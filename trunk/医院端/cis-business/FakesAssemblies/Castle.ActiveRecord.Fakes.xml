<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Castle.ActiveRecord.Fakes</name>
    </assembly>
    <members>
        <member name="T:Castle.ActiveRecord.Attributes.Fakes.ShimAddEventListenerAttribute">
            <summary>Castle.ActiveRecord.Attributes.AddEventListenerAttribute 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Attributes.Fakes.ShimAddEventListenerAttribute.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Attributes.Fakes.ShimAddEventListenerAttribute.#ctor(Castle.ActiveRecord.Attributes.AddEventListenerAttribute)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Attributes.Fakes.ShimAddEventListenerAttribute.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Attributes.Fakes.ShimAddEventListenerAttribute.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Attributes.Fakes.ShimAddEventListenerAttribute.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Attributes.Fakes.ShimAddEventListenerAttribute.ConstructorString">
            <summary>设置 AddEventListenerAttribute.AddEventListenerAttribute(String assemblyName) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Attributes.Fakes.ShimAddEventListenerAttribute.ConstructorType">
            <summary>设置 AddEventListenerAttribute.AddEventListenerAttribute(Type type) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Attributes.Fakes.ShimAddEventListenerAttribute.ExcludeEventGet">
            <summary>设置 AddEventListenerAttribute.get_ExcludeEvent() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Attributes.Fakes.ShimAddEventListenerAttribute.ExcludeEventSetTypeArray">
            <summary>设置 AddEventListenerAttribute.set_ExcludeEvent(Type[] value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Attributes.Fakes.ShimAddEventListenerAttribute.ExcludeGet">
            <summary>设置 AddEventListenerAttribute.get_Exclude() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Attributes.Fakes.ShimAddEventListenerAttribute.ExcludeSetTypeArray">
            <summary>设置 AddEventListenerAttribute.set_Exclude(Type[] value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Attributes.Fakes.ShimAddEventListenerAttribute.IncludeEventGet">
            <summary>设置 AddEventListenerAttribute.get_IncludeEvent() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Attributes.Fakes.ShimAddEventListenerAttribute.IncludeEventSetTypeArray">
            <summary>设置 AddEventListenerAttribute.set_IncludeEvent(Type[] value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Attributes.Fakes.ShimAddEventListenerAttribute.IncludeGet">
            <summary>设置 AddEventListenerAttribute.get_Include() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Attributes.Fakes.ShimAddEventListenerAttribute.IncludeSetTypeArray">
            <summary>设置 AddEventListenerAttribute.set_Include(Type[] value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Attributes.Fakes.ShimAddEventListenerAttribute.ReplaceExistingGet">
            <summary>设置 AddEventListenerAttribute.get_ReplaceExisting() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Attributes.Fakes.ShimAddEventListenerAttribute.ReplaceExistingSetBoolean">
            <summary>设置 AddEventListenerAttribute.set_ReplaceExisting(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Attributes.Fakes.ShimAddEventListenerAttribute.SingletonGet">
            <summary>设置 AddEventListenerAttribute.get_Singleton() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Attributes.Fakes.ShimAddEventListenerAttribute.SingletonSetBoolean">
            <summary>设置 AddEventListenerAttribute.set_Singleton(Boolean value) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Attributes.Fakes.ShimAddEventListenerAttribute.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Attributes.Fakes.ShimAddEventListenerAttribute.AllInstances.ExcludeEventGet">
            <summary>设置 AddEventListenerAttribute.get_ExcludeEvent() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Attributes.Fakes.ShimAddEventListenerAttribute.AllInstances.ExcludeEventSetTypeArray">
            <summary>设置 AddEventListenerAttribute.set_ExcludeEvent(Type[] value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Attributes.Fakes.ShimAddEventListenerAttribute.AllInstances.ExcludeGet">
            <summary>设置 AddEventListenerAttribute.get_Exclude() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Attributes.Fakes.ShimAddEventListenerAttribute.AllInstances.ExcludeSetTypeArray">
            <summary>设置 AddEventListenerAttribute.set_Exclude(Type[] value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Attributes.Fakes.ShimAddEventListenerAttribute.AllInstances.IncludeEventGet">
            <summary>设置 AddEventListenerAttribute.get_IncludeEvent() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Attributes.Fakes.ShimAddEventListenerAttribute.AllInstances.IncludeEventSetTypeArray">
            <summary>设置 AddEventListenerAttribute.set_IncludeEvent(Type[] value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Attributes.Fakes.ShimAddEventListenerAttribute.AllInstances.IncludeGet">
            <summary>设置 AddEventListenerAttribute.get_Include() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Attributes.Fakes.ShimAddEventListenerAttribute.AllInstances.IncludeSetTypeArray">
            <summary>设置 AddEventListenerAttribute.set_Include(Type[] value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Attributes.Fakes.ShimAddEventListenerAttribute.AllInstances.ReplaceExistingGet">
            <summary>设置 AddEventListenerAttribute.get_ReplaceExisting() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Attributes.Fakes.ShimAddEventListenerAttribute.AllInstances.ReplaceExistingSetBoolean">
            <summary>设置 AddEventListenerAttribute.set_ReplaceExisting(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Attributes.Fakes.ShimAddEventListenerAttribute.AllInstances.SingletonGet">
            <summary>设置 AddEventListenerAttribute.get_Singleton() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Attributes.Fakes.ShimAddEventListenerAttribute.AllInstances.SingletonSetBoolean">
            <summary>设置 AddEventListenerAttribute.set_Singleton(Boolean value) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Attributes.Fakes.ShimEventListenerAssemblyAttribute">
            <summary>Castle.ActiveRecord.Attributes.EventListenerAssemblyAttribute 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Attributes.Fakes.ShimEventListenerAssemblyAttribute.#ctor(Castle.ActiveRecord.Attributes.EventListenerAssemblyAttribute)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Attributes.Fakes.ShimEventListenerAssemblyAttribute.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Attributes.Fakes.ShimEventListenerAssemblyAttribute.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Attributes.Fakes.ShimEventListenerAssemblyAttribute.AssemblyGet">
            <summary>设置 EventListenerAssemblyAttribute.get_Assembly() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Attributes.Fakes.ShimEventListenerAssemblyAttribute.AssemblySetAssembly">
            <summary>设置 EventListenerAssemblyAttribute.set_Assembly(Assembly value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Attributes.Fakes.ShimEventListenerAssemblyAttribute.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Attributes.Fakes.ShimEventListenerAssemblyAttribute.Constructor">
            <summary>设置 EventListenerAssemblyAttribute.EventListenerAssemblyAttribute() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Attributes.Fakes.ShimEventListenerAssemblyAttribute.ParseStringExpressionString">
            <summary>设置 EventListenerAssemblyAttribute.ParseStringExpression(String expression) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Attributes.Fakes.ShimEventListenerAssemblyAttribute.TypeGet">
            <summary>设置 EventListenerAssemblyAttribute.get_Type() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Attributes.Fakes.ShimEventListenerAssemblyAttribute.TypeSetType">
            <summary>设置 EventListenerAssemblyAttribute.set_Type(Type value) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Attributes.Fakes.ShimEventListenerAssemblyAttribute.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Attributes.Fakes.ShimEventListenerAssemblyAttribute.AllInstances.AssemblyGet">
            <summary>设置 EventListenerAssemblyAttribute.get_Assembly() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Attributes.Fakes.ShimEventListenerAssemblyAttribute.AllInstances.AssemblySetAssembly">
            <summary>设置 EventListenerAssemblyAttribute.set_Assembly(Assembly value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Attributes.Fakes.ShimEventListenerAssemblyAttribute.AllInstances.ParseStringExpressionString">
            <summary>设置 EventListenerAssemblyAttribute.ParseStringExpression(String expression) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Attributes.Fakes.ShimEventListenerAssemblyAttribute.AllInstances.TypeGet">
            <summary>设置 EventListenerAssemblyAttribute.get_Type() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Attributes.Fakes.ShimEventListenerAssemblyAttribute.AllInstances.TypeSetType">
            <summary>设置 EventListenerAssemblyAttribute.set_Type(Type value) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Attributes.Fakes.ShimIgnoreEventListenerAttribute">
            <summary>Castle.ActiveRecord.Attributes.IgnoreEventListenerAttribute 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Attributes.Fakes.ShimIgnoreEventListenerAttribute.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Attributes.Fakes.ShimIgnoreEventListenerAttribute.#ctor(Castle.ActiveRecord.Attributes.IgnoreEventListenerAttribute)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Attributes.Fakes.ShimIgnoreEventListenerAttribute.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Attributes.Fakes.ShimIgnoreEventListenerAttribute.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Attributes.Fakes.ShimIgnoreEventListenerAttribute.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Attributes.Fakes.ShimIgnoreEventListenerAttribute.ConstructorString">
            <summary>设置 IgnoreEventListenerAttribute.IgnoreEventListenerAttribute(String assemblyName) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Attributes.Fakes.ShimIgnoreEventListenerAttribute.ConstructorType">
            <summary>设置 IgnoreEventListenerAttribute.IgnoreEventListenerAttribute(Type type) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Attributes.Fakes.ShimIgnoreEventListenerAttribute.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Attributes.Fakes.StubAddEventListenerAttribute">
            <summary>Castle.ActiveRecord.Attributes.AddEventListenerAttribute 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Attributes.Fakes.StubAddEventListenerAttribute.#ctor(System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Attributes.Fakes.StubAddEventListenerAttribute.#ctor(System.Type)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Attributes.Fakes.StubAddEventListenerAttribute.Equals(System.Object)">
            <summary>设置 Attribute.Equals(Object obj) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Attributes.Fakes.StubAddEventListenerAttribute.EqualsObject">
            <summary>设置 Attribute.Equals(Object obj) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Attributes.Fakes.StubAddEventListenerAttribute.GetHashCode">
            <summary>设置 Attribute.GetHashCode() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Attributes.Fakes.StubAddEventListenerAttribute.GetHashCode01">
            <summary>设置 Attribute.GetHashCode() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Attributes.Fakes.StubAddEventListenerAttribute.InitializeStub">
            <summary>初始化 type StubAddEventListenerAttribute 的新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Attributes.Fakes.StubAddEventListenerAttribute.IsDefaultAttribute">
            <summary>设置 Attribute.IsDefaultAttribute() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Attributes.Fakes.StubAddEventListenerAttribute.IsDefaultAttribute01">
            <summary>设置 Attribute.IsDefaultAttribute() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Attributes.Fakes.StubAddEventListenerAttribute.Match(System.Object)">
            <summary>设置 Attribute.Match(Object obj) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Attributes.Fakes.StubAddEventListenerAttribute.MatchObject">
            <summary>设置 Attribute.Match(Object obj) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Attributes.Fakes.StubAddEventListenerAttribute.TypeIdGet">
            <summary>设置 Attribute.get_TypeId() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Attributes.Fakes.StubAddEventListenerAttribute.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Attributes.Fakes.StubAddEventListenerAttribute.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Attributes.Fakes.StubAddEventListenerAttribute.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Attributes.Fakes.StubAddEventListenerAttribute.TypeId">
            <summary>设置 Attribute.get_TypeId() 的 stub</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Attributes.Fakes.StubEventListenerAssemblyAttribute">
            <summary>Castle.ActiveRecord.Attributes.EventListenerAssemblyAttribute 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Attributes.Fakes.StubEventListenerAssemblyAttribute.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Attributes.Fakes.StubEventListenerAssemblyAttribute.Equals(System.Object)">
            <summary>设置 Attribute.Equals(Object obj) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Attributes.Fakes.StubEventListenerAssemblyAttribute.EqualsObject">
            <summary>设置 Attribute.Equals(Object obj) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Attributes.Fakes.StubEventListenerAssemblyAttribute.GetHashCode">
            <summary>设置 Attribute.GetHashCode() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Attributes.Fakes.StubEventListenerAssemblyAttribute.GetHashCode01">
            <summary>设置 Attribute.GetHashCode() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Attributes.Fakes.StubEventListenerAssemblyAttribute.InitializeStub">
            <summary>初始化 type StubEventListenerAssemblyAttribute 的新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Attributes.Fakes.StubEventListenerAssemblyAttribute.IsDefaultAttribute">
            <summary>设置 Attribute.IsDefaultAttribute() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Attributes.Fakes.StubEventListenerAssemblyAttribute.IsDefaultAttribute01">
            <summary>设置 Attribute.IsDefaultAttribute() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Attributes.Fakes.StubEventListenerAssemblyAttribute.Match(System.Object)">
            <summary>设置 Attribute.Match(Object obj) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Attributes.Fakes.StubEventListenerAssemblyAttribute.MatchObject">
            <summary>设置 Attribute.Match(Object obj) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Attributes.Fakes.StubEventListenerAssemblyAttribute.TypeIdGet">
            <summary>设置 Attribute.get_TypeId() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Attributes.Fakes.StubEventListenerAssemblyAttribute.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Attributes.Fakes.StubEventListenerAssemblyAttribute.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Attributes.Fakes.StubEventListenerAssemblyAttribute.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Attributes.Fakes.StubEventListenerAssemblyAttribute.TypeId">
            <summary>设置 Attribute.get_TypeId() 的 stub</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Attributes.Fakes.StubIgnoreEventListenerAttribute">
            <summary>Castle.ActiveRecord.Attributes.IgnoreEventListenerAttribute 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Attributes.Fakes.StubIgnoreEventListenerAttribute.#ctor(System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Attributes.Fakes.StubIgnoreEventListenerAttribute.#ctor(System.Type)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Attributes.Fakes.StubIgnoreEventListenerAttribute.Equals(System.Object)">
            <summary>设置 Attribute.Equals(Object obj) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Attributes.Fakes.StubIgnoreEventListenerAttribute.EqualsObject">
            <summary>设置 Attribute.Equals(Object obj) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Attributes.Fakes.StubIgnoreEventListenerAttribute.GetHashCode">
            <summary>设置 Attribute.GetHashCode() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Attributes.Fakes.StubIgnoreEventListenerAttribute.GetHashCode01">
            <summary>设置 Attribute.GetHashCode() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Attributes.Fakes.StubIgnoreEventListenerAttribute.InitializeStub">
            <summary>初始化 type StubIgnoreEventListenerAttribute 的新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Attributes.Fakes.StubIgnoreEventListenerAttribute.IsDefaultAttribute">
            <summary>设置 Attribute.IsDefaultAttribute() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Attributes.Fakes.StubIgnoreEventListenerAttribute.IsDefaultAttribute01">
            <summary>设置 Attribute.IsDefaultAttribute() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Attributes.Fakes.StubIgnoreEventListenerAttribute.Match(System.Object)">
            <summary>设置 Attribute.Match(Object obj) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Attributes.Fakes.StubIgnoreEventListenerAttribute.MatchObject">
            <summary>设置 Attribute.Match(Object obj) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Attributes.Fakes.StubIgnoreEventListenerAttribute.TypeIdGet">
            <summary>设置 Attribute.get_TypeId() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Attributes.Fakes.StubIgnoreEventListenerAttribute.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Attributes.Fakes.StubIgnoreEventListenerAttribute.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Attributes.Fakes.StubIgnoreEventListenerAttribute.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Attributes.Fakes.StubIgnoreEventListenerAttribute.TypeId">
            <summary>设置 Attribute.get_TypeId() 的 stub</summary>
        </member>
        <member name="T:Castle.ActiveRecord.ByteCode.Fakes.ShimProxyFactoryFactory">
            <summary>Castle.ActiveRecord.ByteCode.ProxyFactoryFactory 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.ByteCode.Fakes.ShimProxyFactoryFactory.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.ByteCode.Fakes.ShimProxyFactoryFactory.#ctor(Castle.ActiveRecord.ByteCode.ProxyFactoryFactory)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.ByteCode.Fakes.ShimProxyFactoryFactory.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.ByteCode.Fakes.ShimProxyFactoryFactory.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.ByteCode.Fakes.ShimProxyFactoryFactory.Bind(NHibernate.Bytecode.IProxyFactoryFactory)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.ByteCode.Fakes.ShimProxyFactoryFactory.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.ByteCode.Fakes.ShimProxyFactoryFactory.BuildProxyFactory">
            <summary>设置 ProxyFactoryFactory.BuildProxyFactory() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.ByteCode.Fakes.ShimProxyFactoryFactory.Constructor">
            <summary>设置 ProxyFactoryFactory.ProxyFactoryFactory() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.ByteCode.Fakes.ShimProxyFactoryFactory.IsInstrumentedType">
            <summary>设置 ProxyFactoryFactory.IsInstrumented(Type entityClass) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.ByteCode.Fakes.ShimProxyFactoryFactory.IsProxyObject">
            <summary>设置 ProxyFactoryFactory.IsProxy(Object entity) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.ByteCode.Fakes.ShimProxyFactoryFactory.ProxyValidatorGet">
            <summary>设置 ProxyFactoryFactory.get_ProxyValidator() 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.ByteCode.Fakes.ShimProxyFactoryFactory.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.ByteCode.Fakes.ShimProxyFactoryFactory.AllInstances.BuildProxyFactory">
            <summary>设置 ProxyFactoryFactory.BuildProxyFactory() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.ByteCode.Fakes.ShimProxyFactoryFactory.AllInstances.IsInstrumentedType">
            <summary>设置 ProxyFactoryFactory.IsInstrumented(Type entityClass) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.ByteCode.Fakes.ShimProxyFactoryFactory.AllInstances.IsProxyObject">
            <summary>设置 ProxyFactoryFactory.IsProxy(Object entity) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.ByteCode.Fakes.ShimProxyFactoryFactory.AllInstances.ProxyValidatorGet">
            <summary>设置 ProxyFactoryFactory.get_ProxyValidator() 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.ByteCode.Fakes.StubProxyFactoryFactory">
            <summary>Castle.ActiveRecord.ByteCode.ProxyFactoryFactory 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.ByteCode.Fakes.StubProxyFactoryFactory.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.ByteCode.Fakes.StubProxyFactoryFactory.InitializeStub">
            <summary>初始化 type StubProxyFactoryFactory 的新实例</summary>
        </member>
        <member name="P:Castle.ActiveRecord.ByteCode.Fakes.StubProxyFactoryFactory.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.ByteCode.Fakes.StubProxyFactoryFactory.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.ByteCode.Fakes.StubProxyFactoryFactory.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.ShimActiveRecordAttribute">
            <summary>Castle.ActiveRecord.ActiveRecordAttribute 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimActiveRecordAttribute.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimActiveRecordAttribute.#ctor(Castle.ActiveRecord.ActiveRecordAttribute)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimActiveRecordAttribute.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimActiveRecordAttribute.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordAttribute.BatchSizeGet">
            <summary>设置 ActiveRecordAttribute.get_BatchSize() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordAttribute.BatchSizeSetInt32">
            <summary>设置 ActiveRecordAttribute.set_BatchSize(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordAttribute.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordAttribute.Constructor">
            <summary>设置 ActiveRecordAttribute.ActiveRecordAttribute() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordAttribute.ConstructorString">
            <summary>设置 ActiveRecordAttribute.ActiveRecordAttribute(String table) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordAttribute.ConstructorStringString">
            <summary>设置 ActiveRecordAttribute.ActiveRecordAttribute(String table, String schema) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordAttribute.DiscriminatorColumnGet">
            <summary>设置 ActiveRecordAttribute.get_DiscriminatorColumn() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordAttribute.DiscriminatorColumnSetString">
            <summary>设置 ActiveRecordAttribute.set_DiscriminatorColumn(String value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordAttribute.DiscriminatorLengthGet">
            <summary>设置 ActiveRecordAttribute.get_DiscriminatorLength() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordAttribute.DiscriminatorLengthSetString">
            <summary>设置 ActiveRecordAttribute.set_DiscriminatorLength(String value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordAttribute.DiscriminatorTypeGet">
            <summary>设置 ActiveRecordAttribute.get_DiscriminatorType() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordAttribute.DiscriminatorTypeSetString">
            <summary>设置 ActiveRecordAttribute.set_DiscriminatorType(String value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordAttribute.DiscriminatorValueGet">
            <summary>设置 ActiveRecordAttribute.get_DiscriminatorValue() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordAttribute.DiscriminatorValueSetString">
            <summary>设置 ActiveRecordAttribute.set_DiscriminatorValue(String value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordAttribute.DynamicInsertGet">
            <summary>设置 ActiveRecordAttribute.get_DynamicInsert() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordAttribute.DynamicInsertSetBoolean">
            <summary>设置 ActiveRecordAttribute.set_DynamicInsert(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordAttribute.DynamicUpdateGet">
            <summary>设置 ActiveRecordAttribute.get_DynamicUpdate() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordAttribute.DynamicUpdateSetBoolean">
            <summary>设置 ActiveRecordAttribute.set_DynamicUpdate(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordAttribute.LazyGet">
            <summary>设置 ActiveRecordAttribute.get_Lazy() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordAttribute.LazySetBoolean">
            <summary>设置 ActiveRecordAttribute.set_Lazy(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordAttribute.LazySpecifiedGet">
            <summary>设置 ActiveRecordAttribute.get_LazySpecified() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordAttribute.LockingGet">
            <summary>设置 ActiveRecordAttribute.get_Locking() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordAttribute.LockingSetOptimisticLocking">
            <summary>设置 ActiveRecordAttribute.set_Locking(OptimisticLocking value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordAttribute.MutableGet">
            <summary>设置 ActiveRecordAttribute.get_Mutable() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordAttribute.MutableSetBoolean">
            <summary>设置 ActiveRecordAttribute.set_Mutable(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordAttribute.PersisterGet">
            <summary>设置 ActiveRecordAttribute.get_Persister() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordAttribute.PersisterSetType">
            <summary>设置 ActiveRecordAttribute.set_Persister(Type value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordAttribute.PolymorphismGet">
            <summary>设置 ActiveRecordAttribute.get_Polymorphism() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordAttribute.PolymorphismSetPolymorphism">
            <summary>设置 ActiveRecordAttribute.set_Polymorphism(Polymorphism value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordAttribute.ProxyGet">
            <summary>设置 ActiveRecordAttribute.get_Proxy() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordAttribute.ProxySetType">
            <summary>设置 ActiveRecordAttribute.set_Proxy(Type value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordAttribute.SchemaActionGet">
            <summary>设置 ActiveRecordAttribute.get_SchemaAction() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordAttribute.SchemaActionSetString">
            <summary>设置 ActiveRecordAttribute.set_SchemaAction(String value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordAttribute.SchemaGet">
            <summary>设置 ActiveRecordAttribute.get_Schema() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordAttribute.SchemaSetString">
            <summary>设置 ActiveRecordAttribute.set_Schema(String value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordAttribute.SelectBeforeUpdateGet">
            <summary>设置 ActiveRecordAttribute.get_SelectBeforeUpdate() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordAttribute.SelectBeforeUpdateSetBoolean">
            <summary>设置 ActiveRecordAttribute.set_SelectBeforeUpdate(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordAttribute.TableGet">
            <summary>设置 ActiveRecordAttribute.get_Table() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordAttribute.TableSetString">
            <summary>设置 ActiveRecordAttribute.set_Table(String value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordAttribute.TuplizerGet">
            <summary>设置 ActiveRecordAttribute.get_Tuplizer() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordAttribute.TuplizerSetType">
            <summary>设置 ActiveRecordAttribute.set_Tuplizer(Type value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordAttribute.UseAutoImportGet">
            <summary>设置 ActiveRecordAttribute.get_UseAutoImport() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordAttribute.UseAutoImportSetBoolean">
            <summary>设置 ActiveRecordAttribute.set_UseAutoImport(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordAttribute.WhereGet">
            <summary>设置 ActiveRecordAttribute.get_Where() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordAttribute.WhereSetString">
            <summary>设置 ActiveRecordAttribute.set_Where(String value) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.ShimActiveRecordAttribute.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordAttribute.AllInstances.BatchSizeGet">
            <summary>设置 ActiveRecordAttribute.get_BatchSize() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordAttribute.AllInstances.BatchSizeSetInt32">
            <summary>设置 ActiveRecordAttribute.set_BatchSize(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordAttribute.AllInstances.DiscriminatorColumnGet">
            <summary>设置 ActiveRecordAttribute.get_DiscriminatorColumn() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordAttribute.AllInstances.DiscriminatorColumnSetString">
            <summary>设置 ActiveRecordAttribute.set_DiscriminatorColumn(String value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordAttribute.AllInstances.DiscriminatorLengthGet">
            <summary>设置 ActiveRecordAttribute.get_DiscriminatorLength() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordAttribute.AllInstances.DiscriminatorLengthSetString">
            <summary>设置 ActiveRecordAttribute.set_DiscriminatorLength(String value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordAttribute.AllInstances.DiscriminatorTypeGet">
            <summary>设置 ActiveRecordAttribute.get_DiscriminatorType() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordAttribute.AllInstances.DiscriminatorTypeSetString">
            <summary>设置 ActiveRecordAttribute.set_DiscriminatorType(String value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordAttribute.AllInstances.DiscriminatorValueGet">
            <summary>设置 ActiveRecordAttribute.get_DiscriminatorValue() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordAttribute.AllInstances.DiscriminatorValueSetString">
            <summary>设置 ActiveRecordAttribute.set_DiscriminatorValue(String value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordAttribute.AllInstances.DynamicInsertGet">
            <summary>设置 ActiveRecordAttribute.get_DynamicInsert() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordAttribute.AllInstances.DynamicInsertSetBoolean">
            <summary>设置 ActiveRecordAttribute.set_DynamicInsert(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordAttribute.AllInstances.DynamicUpdateGet">
            <summary>设置 ActiveRecordAttribute.get_DynamicUpdate() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordAttribute.AllInstances.DynamicUpdateSetBoolean">
            <summary>设置 ActiveRecordAttribute.set_DynamicUpdate(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordAttribute.AllInstances.LazyGet">
            <summary>设置 ActiveRecordAttribute.get_Lazy() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordAttribute.AllInstances.LazySetBoolean">
            <summary>设置 ActiveRecordAttribute.set_Lazy(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordAttribute.AllInstances.LazySpecifiedGet">
            <summary>设置 ActiveRecordAttribute.get_LazySpecified() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordAttribute.AllInstances.LockingGet">
            <summary>设置 ActiveRecordAttribute.get_Locking() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordAttribute.AllInstances.LockingSetOptimisticLocking">
            <summary>设置 ActiveRecordAttribute.set_Locking(OptimisticLocking value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordAttribute.AllInstances.MutableGet">
            <summary>设置 ActiveRecordAttribute.get_Mutable() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordAttribute.AllInstances.MutableSetBoolean">
            <summary>设置 ActiveRecordAttribute.set_Mutable(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordAttribute.AllInstances.PersisterGet">
            <summary>设置 ActiveRecordAttribute.get_Persister() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordAttribute.AllInstances.PersisterSetType">
            <summary>设置 ActiveRecordAttribute.set_Persister(Type value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordAttribute.AllInstances.PolymorphismGet">
            <summary>设置 ActiveRecordAttribute.get_Polymorphism() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordAttribute.AllInstances.PolymorphismSetPolymorphism">
            <summary>设置 ActiveRecordAttribute.set_Polymorphism(Polymorphism value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordAttribute.AllInstances.ProxyGet">
            <summary>设置 ActiveRecordAttribute.get_Proxy() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordAttribute.AllInstances.ProxySetType">
            <summary>设置 ActiveRecordAttribute.set_Proxy(Type value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordAttribute.AllInstances.SchemaActionGet">
            <summary>设置 ActiveRecordAttribute.get_SchemaAction() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordAttribute.AllInstances.SchemaActionSetString">
            <summary>设置 ActiveRecordAttribute.set_SchemaAction(String value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordAttribute.AllInstances.SchemaGet">
            <summary>设置 ActiveRecordAttribute.get_Schema() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordAttribute.AllInstances.SchemaSetString">
            <summary>设置 ActiveRecordAttribute.set_Schema(String value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordAttribute.AllInstances.SelectBeforeUpdateGet">
            <summary>设置 ActiveRecordAttribute.get_SelectBeforeUpdate() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordAttribute.AllInstances.SelectBeforeUpdateSetBoolean">
            <summary>设置 ActiveRecordAttribute.set_SelectBeforeUpdate(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordAttribute.AllInstances.TableGet">
            <summary>设置 ActiveRecordAttribute.get_Table() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordAttribute.AllInstances.TableSetString">
            <summary>设置 ActiveRecordAttribute.set_Table(String value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordAttribute.AllInstances.TuplizerGet">
            <summary>设置 ActiveRecordAttribute.get_Tuplizer() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordAttribute.AllInstances.TuplizerSetType">
            <summary>设置 ActiveRecordAttribute.set_Tuplizer(Type value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordAttribute.AllInstances.UseAutoImportGet">
            <summary>设置 ActiveRecordAttribute.get_UseAutoImport() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordAttribute.AllInstances.UseAutoImportSetBoolean">
            <summary>设置 ActiveRecordAttribute.set_UseAutoImport(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordAttribute.AllInstances.WhereGet">
            <summary>设置 ActiveRecordAttribute.get_Where() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordAttribute.AllInstances.WhereSetString">
            <summary>设置 ActiveRecordAttribute.set_Where(String value) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.ShimActiveRecordBase">
            <summary>Castle.ActiveRecord.ActiveRecordBase 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimActiveRecordBase.#ctor(Castle.ActiveRecord.ActiveRecordBase)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimActiveRecordBase.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimActiveRecordBase.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBase.AddOrdersToCriteriaICriteriaIEnumerableOfOrder">
            <summary>设置 ActiveRecordBase.AddOrdersToCriteria(ICriteria criteria, IEnumerable`1&lt;Order&gt; orders) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBase.AscStringArray">
            <summary>设置 ActiveRecordBase.Asc(String[] propertyNames) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBase.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBase.Constructor">
            <summary>设置 ActiveRecordBase.ActiveRecordBase() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBase.CountType">
            <summary>设置 ActiveRecordBase.Count(Type targetType) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBase.CountTypeDetachedCriteria">
            <summary>设置 ActiveRecordBase.Count(Type targetType, DetachedCriteria detachedCriteria) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBase.CountTypeICriterionArray">
            <summary>设置 ActiveRecordBase.Count(Type targetType, ICriterion[] criteria) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBase.CountTypeStringObjectArray">
            <summary>设置 ActiveRecordBase.Count(Type targetType, String filter, Object[] args) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBase.Create">
            <summary>设置 ActiveRecordBase.Create() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBase.CreateAndFlush">
            <summary>设置 ActiveRecordBase.CreateAndFlush() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBase.CreateAndFlushObject">
            <summary>设置 ActiveRecordBase.CreateAndFlush(Object instance) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBase.CreateObject">
            <summary>设置 ActiveRecordBase.Create(Object instance) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBase.Delete">
            <summary>设置 ActiveRecordBase.Delete() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBase.DeleteAllType">
            <summary>设置 ActiveRecordBase.DeleteAll(Type type) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBase.DeleteAllTypeIEnumerable">
            <summary>设置 ActiveRecordBase.DeleteAll(Type targetType, IEnumerable pkValues) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBase.DeleteAllTypeString">
            <summary>设置 ActiveRecordBase.DeleteAll(Type type, String where) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBase.DeleteAndFlush">
            <summary>设置 ActiveRecordBase.DeleteAndFlush() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBase.DeleteAndFlushObject">
            <summary>设置 ActiveRecordBase.DeleteAndFlush(Object instance) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBase.DeleteObject">
            <summary>设置 ActiveRecordBase.Delete(Object instance) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBase.DescStringArray">
            <summary>设置 ActiveRecordBase.Desc(String[] propertyNames) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBase.EnsureInitializedType">
            <summary>设置 ActiveRecordBase.EnsureInitialized(Type type) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBase.EnumerateQueryIActiveRecordQuery">
            <summary>设置 ActiveRecordBase.EnumerateQuery(IActiveRecordQuery query) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBase.ExecuteNHibernateDelegate">
            <summary>设置 ActiveRecordBase.Execute(NHibernateDelegate call) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBase.ExecuteQueryIActiveRecordQuery">
            <summary>设置 ActiveRecordBase.ExecuteQuery(IActiveRecordQuery query) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBase.ExecuteTypeNHibernateDelegateObject">
            <summary>设置 ActiveRecordBase.Execute(Type targetType, NHibernateDelegate call, Object instance) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBase.ExistsType">
            <summary>设置 ActiveRecordBase.Exists(Type targetType) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBase.ExistsTypeDetachedCriteria">
            <summary>设置 ActiveRecordBase.Exists(Type targetType, DetachedCriteria detachedCriteria) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBase.ExistsTypeICriterionArray">
            <summary>设置 ActiveRecordBase.Exists(Type targetType, ICriterion[] criteria) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBase.ExistsTypeIDetachedQuery">
            <summary>设置 ActiveRecordBase.Exists(Type targetType, IDetachedQuery detachedQuery) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBase.ExistsTypeObject">
            <summary>设置 ActiveRecordBase.Exists(Type targetType, Object id) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBase.ExistsTypeStringObjectArray">
            <summary>设置 ActiveRecordBase.Exists(Type targetType, String filter, Object[] args) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBase.FindAllByPropertyTypeStringObject">
            <summary>设置 ActiveRecordBase.FindAllByProperty(Type targetType, String property, Object value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBase.FindAllByPropertyTypeStringStringObject">
            <summary>设置 ActiveRecordBase.FindAllByProperty(Type targetType, String orderByColumn, String property, Object value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBase.FindAllType">
            <summary>设置 ActiveRecordBase.FindAll(Type targetType) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBase.FindAllTypeDetachedCriteriaOrderArray">
            <summary>设置 ActiveRecordBase.FindAll(Type targetType, DetachedCriteria detachedCriteria, Order[] orders) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBase.FindAllTypeICriterionArray">
            <summary>设置 ActiveRecordBase.FindAll(Type targetType, ICriterion[] criteria) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBase.FindAllTypeIDetachedQuery">
            <summary>设置 ActiveRecordBase.FindAll(Type targetType, IDetachedQuery detachedQuery) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBase.FindAllTypeOrderArrayICriterionArray">
            <summary>设置 ActiveRecordBase.FindAll(Type targetType, Order[] orders, ICriterion[] criteria) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBase.FindByPrimaryKeyTypeObject">
            <summary>设置 ActiveRecordBase.FindByPrimaryKey(Type targetType, Object id) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBase.FindByPrimaryKeyTypeObjectBoolean">
            <summary>设置 ActiveRecordBase.FindByPrimaryKey(Type targetType, Object id, Boolean throwOnNotFound) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBase.FindFirstTypeDetachedCriteriaOrderArray">
            <summary>设置 ActiveRecordBase.FindFirst(Type targetType, DetachedCriteria detachedCriteria, Order[] orders) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBase.FindFirstTypeICriterionArray">
            <summary>设置 ActiveRecordBase.FindFirst(Type targetType, ICriterion[] criteria) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBase.FindFirstTypeIDetachedQuery">
            <summary>设置 ActiveRecordBase.FindFirst(Type targetType, IDetachedQuery detachedQuery) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBase.FindFirstTypeOrderArrayICriterionArray">
            <summary>设置 ActiveRecordBase.FindFirst(Type targetType, Order[] orders, ICriterion[] criteria) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBase.FindOneTypeDetachedCriteria">
            <summary>设置 ActiveRecordBase.FindOne(Type targetType, DetachedCriteria criteria) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBase.FindOneTypeICriterionArray">
            <summary>设置 ActiveRecordBase.FindOne(Type targetType, ICriterion[] criteria) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBase.FindOneTypeIDetachedQuery">
            <summary>设置 ActiveRecordBase.FindOne(Type targetType, IDetachedQuery detachedQuery) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBase.GetModelType">
            <summary>设置 ActiveRecordBase.GetModel(Type arType) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBase.InternalCreateObjectBoolean">
            <summary>设置 ActiveRecordBase.InternalCreate(Object instance, Boolean flush) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBase.InternalDeleteObjectBoolean">
            <summary>设置 ActiveRecordBase.InternalDelete(Object instance, Boolean flush) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBase.InternalSaveCopyObjectBoolean">
            <summary>设置 ActiveRecordBase.InternalSaveCopy(Object instance, Boolean flush) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBase.InternalSaveObjectBoolean">
            <summary>设置 ActiveRecordBase.InternalSave(Object instance, Boolean flush) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBase.InternalUpdateObjectBoolean">
            <summary>设置 ActiveRecordBase.InternalUpdate(Object instance, Boolean flush) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBase.PropertyNamesToOrderArrayBooleanStringArray">
            <summary>设置 ActiveRecordBase.PropertyNamesToOrderArray(Boolean asc, String[] propertyNames) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBase.Refresh">
            <summary>设置 ActiveRecordBase.Refresh() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBase.RefreshObject">
            <summary>设置 ActiveRecordBase.Refresh(Object instance) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBase.RegisterTypeActiveRecordModel">
            <summary>设置 ActiveRecordBase.Register(Type arType, ActiveRecordModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBase.ReplicateObjectReplicationMode">
            <summary>设置 ActiveRecordBase.Replicate(Object instance, ReplicationMode replicationMode) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBase.Save">
            <summary>设置 ActiveRecordBase.Save() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBase.SaveAndFlush">
            <summary>设置 ActiveRecordBase.SaveAndFlush() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBase.SaveAndFlushObject">
            <summary>设置 ActiveRecordBase.SaveAndFlush(Object instance) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBase.SaveCopy">
            <summary>设置 ActiveRecordBase.SaveCopy() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBase.SaveCopyAndFlush">
            <summary>设置 ActiveRecordBase.SaveCopyAndFlush() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBase.SaveCopyAndFlushObject">
            <summary>设置 ActiveRecordBase.SaveCopyAndFlush(Object instance) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBase.SaveCopyObject">
            <summary>设置 ActiveRecordBase.SaveCopy(Object instance) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBase.SaveObject">
            <summary>设置 ActiveRecordBase.Save(Object instance) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBase.SlicedFindAllTypeInt32Int32DetachedCriteria">
            <summary>设置 ActiveRecordBase.SlicedFindAll(Type targetType, Int32 firstResult, Int32 maxResults, DetachedCriteria criteria) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBase.SlicedFindAllTypeInt32Int32ICriterionArray">
            <summary>设置 ActiveRecordBase.SlicedFindAll(Type targetType, Int32 firstResult, Int32 maxResults, ICriterion[] criteria) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBase.SlicedFindAllTypeInt32Int32IDetachedQuery">
            <summary>设置 ActiveRecordBase.SlicedFindAll(Type targetType, Int32 firstResult, Int32 maxResults, IDetachedQuery detachedQuery) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBase.SlicedFindAllTypeInt32Int32OrderArrayDetachedCriteria">
            <summary>设置 ActiveRecordBase.SlicedFindAll(Type targetType, Int32 firstResult, Int32 maxResults, Order[] orders, DetachedCriteria criteria) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBase.SlicedFindAllTypeInt32Int32OrderArrayICriterionArray">
            <summary>设置 ActiveRecordBase.SlicedFindAll(Type targetType, Int32 firstResult, Int32 maxResults, Order[] orders, ICriterion[] criteria) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBase.ToString">
            <summary>设置 ActiveRecordBase.ToString() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBase.Update">
            <summary>设置 ActiveRecordBase.Update() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBase.UpdateAndFlush">
            <summary>设置 ActiveRecordBase.UpdateAndFlush() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBase.UpdateAndFlushObject">
            <summary>设置 ActiveRecordBase.UpdateAndFlush(Object instance) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBase.UpdateObject">
            <summary>设置 ActiveRecordBase.Update(Object instance) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.ShimActiveRecordBase.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBase.AllInstances.Create">
            <summary>设置 ActiveRecordBase.Create() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBase.AllInstances.CreateAndFlush">
            <summary>设置 ActiveRecordBase.CreateAndFlush() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBase.AllInstances.Delete">
            <summary>设置 ActiveRecordBase.Delete() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBase.AllInstances.DeleteAndFlush">
            <summary>设置 ActiveRecordBase.DeleteAndFlush() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBase.AllInstances.ExecuteNHibernateDelegate">
            <summary>设置 ActiveRecordBase.Execute(NHibernateDelegate call) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBase.AllInstances.Refresh">
            <summary>设置 ActiveRecordBase.Refresh() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBase.AllInstances.Save">
            <summary>设置 ActiveRecordBase.Save() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBase.AllInstances.SaveAndFlush">
            <summary>设置 ActiveRecordBase.SaveAndFlush() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBase.AllInstances.SaveCopy">
            <summary>设置 ActiveRecordBase.SaveCopy() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBase.AllInstances.SaveCopyAndFlush">
            <summary>设置 ActiveRecordBase.SaveCopyAndFlush() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBase.AllInstances.ToString01">
            <summary>设置 ActiveRecordBase.ToString() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBase.AllInstances.Update">
            <summary>设置 ActiveRecordBase.Update() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBase.AllInstances.UpdateAndFlush">
            <summary>设置 ActiveRecordBase.UpdateAndFlush() 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.ShimActiveRecordBase`1">
            <summary>Castle.ActiveRecord.ActiveRecordBase`1 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimActiveRecordBase`1.#ctor(Castle.ActiveRecord.ActiveRecordBase{`0})">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimActiveRecordBase`1.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimActiveRecordBase`1.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimActiveRecordBase`1.ExecuteQuery2Of1IActiveRecordQueryOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.ActiveRecord.IActiveRecordQuery{``0},``0})">
            <summary>设置 ActiveRecordBase`1.ExecuteQuery2(IActiveRecordQuery`1&lt;!!0&gt; query) 的 填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimActiveRecordBase`1.ExistsOf1M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``0,System.Boolean})">
            <summary>设置 ActiveRecordBase`1.Exists(!!0 id) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBase`1.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBase`1.Constructor">
            <summary>设置 ActiveRecordBase`1.ActiveRecordBase`1() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBase`1.Count">
            <summary>设置 ActiveRecordBase`1.Count() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBase`1.CountDetachedCriteria">
            <summary>设置 ActiveRecordBase`1.Count(DetachedCriteria detachedCriteria) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBase`1.CountICriterionArray">
            <summary>设置 ActiveRecordBase`1.Count(ICriterion[] criteria) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBase`1.CountStringObjectArray">
            <summary>设置 ActiveRecordBase`1.Count(String filter, Object[] args) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBase`1.CreateT0">
            <summary>设置 ActiveRecordBase`1.Create(!0 instance) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBase`1.DeleteAll">
            <summary>设置 ActiveRecordBase`1.DeleteAll() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBase`1.DeleteAllIEnumerable">
            <summary>设置 ActiveRecordBase`1.DeleteAll(IEnumerable pkValues) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBase`1.DeleteAllString">
            <summary>设置 ActiveRecordBase`1.DeleteAll(String where) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBase`1.DeleteT0">
            <summary>设置 ActiveRecordBase`1.Delete(!0 instance) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBase`1.ExecuteNHibernateDelegateObject">
            <summary>设置 ActiveRecordBase`1.Execute(NHibernateDelegate call, Object instance) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBase`1.Exists">
            <summary>设置 ActiveRecordBase`1.Exists() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBase`1.ExistsDetachedCriteria">
            <summary>设置 ActiveRecordBase`1.Exists(DetachedCriteria detachedCriteria) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBase`1.ExistsICriterionArray">
            <summary>设置 ActiveRecordBase`1.Exists(ICriterion[] criteria) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBase`1.ExistsIDetachedQuery">
            <summary>设置 ActiveRecordBase`1.Exists(IDetachedQuery detachedQuery) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBase`1.ExistsStringObjectArray">
            <summary>设置 ActiveRecordBase`1.Exists(String filter, Object[] args) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBase`1.FindAll">
            <summary>设置 ActiveRecordBase`1.FindAll() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBase`1.FindAllByPropertyStringObject">
            <summary>设置 ActiveRecordBase`1.FindAllByProperty(String property, Object value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBase`1.FindAllByPropertyStringStringObject">
            <summary>设置 ActiveRecordBase`1.FindAllByProperty(String orderByColumn, String property, Object value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBase`1.FindAllDetachedCriteriaOrderArray">
            <summary>设置 ActiveRecordBase`1.FindAll(DetachedCriteria criteria, Order[] orders) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBase`1.FindAllICriterionArray">
            <summary>设置 ActiveRecordBase`1.FindAll(ICriterion[] criteria) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBase`1.FindAllIDetachedQuery">
            <summary>设置 ActiveRecordBase`1.FindAll(IDetachedQuery detachedQuery) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBase`1.FindAllOrderArrayICriterionArray">
            <summary>设置 ActiveRecordBase`1.FindAll(Order[] orders, ICriterion[] criteria) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBase`1.FindAllOrderICriterionArray">
            <summary>设置 ActiveRecordBase`1.FindAll(Order order, ICriterion[] criteria) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBase`1.FindByPrimaryKeyObject">
            <summary>设置 ActiveRecordBase`1.FindByPrimaryKey(Object id) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBase`1.FindByPrimaryKeyObjectBoolean">
            <summary>设置 ActiveRecordBase`1.FindByPrimaryKey(Object id, Boolean throwOnNotFound) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBase`1.FindFirstDetachedCriteriaOrderArray">
            <summary>设置 ActiveRecordBase`1.FindFirst(DetachedCriteria criteria, Order[] orders) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBase`1.FindFirstICriterionArray">
            <summary>设置 ActiveRecordBase`1.FindFirst(ICriterion[] criteria) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBase`1.FindFirstIDetachedQuery">
            <summary>设置 ActiveRecordBase`1.FindFirst(IDetachedQuery detachedQuery) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBase`1.FindFirstOrderArrayICriterionArray">
            <summary>设置 ActiveRecordBase`1.FindFirst(Order[] orders, ICriterion[] criteria) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBase`1.FindFirstOrderICriterionArray">
            <summary>设置 ActiveRecordBase`1.FindFirst(Order order, ICriterion[] criteria) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBase`1.FindObject">
            <summary>设置 ActiveRecordBase`1.Find(Object id) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBase`1.FindOneDetachedCriteria">
            <summary>设置 ActiveRecordBase`1.FindOne(DetachedCriteria criteria) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBase`1.FindOneICriterionArray">
            <summary>设置 ActiveRecordBase`1.FindOne(ICriterion[] criteria) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBase`1.FindOneIDetachedQuery">
            <summary>设置 ActiveRecordBase`1.FindOne(IDetachedQuery detachedQuery) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBase`1.RefreshT0">
            <summary>设置 ActiveRecordBase`1.Refresh(!0 instance) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBase`1.SaveCopyT0">
            <summary>设置 ActiveRecordBase`1.SaveCopy(!0 instance) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBase`1.SaveT0">
            <summary>设置 ActiveRecordBase`1.Save(!0 instance) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBase`1.SlicedFindAllInt32Int32DetachedCriteriaOrderArray">
            <summary>设置 ActiveRecordBase`1.SlicedFindAll(Int32 firstResult, Int32 maxResults, DetachedCriteria criteria, Order[] orders) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBase`1.SlicedFindAllInt32Int32ICriterionArray">
            <summary>设置 ActiveRecordBase`1.SlicedFindAll(Int32 firstResult, Int32 maxResults, ICriterion[] criteria) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBase`1.SlicedFindAllInt32Int32IDetachedQuery">
            <summary>设置 ActiveRecordBase`1.SlicedFindAll(Int32 firstResult, Int32 maxResults, IDetachedQuery detachedQuery) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBase`1.SlicedFindAllInt32Int32OrderArrayICriterionArray">
            <summary>设置 ActiveRecordBase`1.SlicedFindAll(Int32 firstResult, Int32 maxResults, Order[] orders, ICriterion[] criteria) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBase`1.TryFindObject">
            <summary>设置 ActiveRecordBase`1.TryFind(Object id) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBase`1.UpdateT0">
            <summary>设置 ActiveRecordBase`1.Update(!0 instance) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.ShimActiveRecordBase`1.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.ShimActiveRecordBaseQuery">
            <summary>Castle.ActiveRecord.ActiveRecordBaseQuery 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimActiveRecordBaseQuery.#ctor(Castle.ActiveRecord.ActiveRecordBaseQuery)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimActiveRecordBaseQuery.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimActiveRecordBaseQuery.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimActiveRecordBaseQuery.Bind(Castle.ActiveRecord.IActiveRecordQuery)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimActiveRecordBaseQuery.Bind(System.ICloneable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBaseQuery.AddModifierIQueryModifier">
            <summary>设置 ActiveRecordBaseQuery.AddModifier(IQueryModifier modifier) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBaseQuery.AddQueryISessionIMultiQuery">
            <summary>设置 ActiveRecordBaseQuery.AddQuery(ISession session, IMultiQuery multiquery) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBaseQuery.ApplyModifiersIQuery">
            <summary>设置 ActiveRecordBaseQuery.ApplyModifiers(IQuery query) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBaseQuery.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBaseQuery.CastleActiveRecordIActiveRecordQueryEnumerateISession">
            <summary>设置 ActiveRecordBaseQuery.Castle.ActiveRecord.IActiveRecordQuery.Enumerate(ISession session) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBaseQuery.CastleActiveRecordIActiveRecordQueryExecuteISession">
            <summary>设置 ActiveRecordBaseQuery.Castle.ActiveRecord.IActiveRecordQuery.Execute(ISession session) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBaseQuery.Clone">
            <summary>设置 ActiveRecordBaseQuery.Clone() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBaseQuery.ConstructorType">
            <summary>设置 ActiveRecordBaseQuery.ActiveRecordBaseQuery(Type rootType) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBaseQuery.GetModifiersActiveRecordBaseQuery">
            <summary>设置 ActiveRecordBaseQuery.GetModifiers(ActiveRecordBaseQuery query) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBaseQuery.GetResultsArrayTypeIListBoolean">
            <summary>设置 ActiveRecordBaseQuery.GetResultsArray(Type t, IList list, Boolean distinct) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBaseQuery.GetResultsArrayTypeIListInt32Boolean">
            <summary>设置 ActiveRecordBaseQuery.GetResultsArray(Type t, IList list, Int32 entityIndex, Boolean distinct) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBaseQuery.InternalEnumerateISession">
            <summary>设置 ActiveRecordBaseQuery.InternalEnumerate(ISession session) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBaseQuery.InternalExecuteISession">
            <summary>设置 ActiveRecordBaseQuery.InternalExecute(ISession session) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBaseQuery.LogGet">
            <summary>设置 ActiveRecordBaseQuery.get_Log() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBaseQuery.LogSetILogger">
            <summary>设置 ActiveRecordBaseQuery.set_Log(ILogger value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBaseQuery.RootTypeGet">
            <summary>设置 ActiveRecordBaseQuery.get_RootType() 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.ShimActiveRecordBaseQuery.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBaseQuery.AllInstances.AddModifierIQueryModifier">
            <summary>设置 ActiveRecordBaseQuery.AddModifier(IQueryModifier modifier) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBaseQuery.AllInstances.AddQueryISessionIMultiQuery">
            <summary>设置 ActiveRecordBaseQuery.AddQuery(ISession session, IMultiQuery multiquery) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBaseQuery.AllInstances.ApplyModifiersIQuery">
            <summary>设置 ActiveRecordBaseQuery.ApplyModifiers(IQuery query) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBaseQuery.AllInstances.CastleActiveRecordIActiveRecordQueryEnumerateISession">
            <summary>设置 ActiveRecordBaseQuery.Castle.ActiveRecord.IActiveRecordQuery.Enumerate(ISession session) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBaseQuery.AllInstances.CastleActiveRecordIActiveRecordQueryExecuteISession">
            <summary>设置 ActiveRecordBaseQuery.Castle.ActiveRecord.IActiveRecordQuery.Execute(ISession session) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBaseQuery.AllInstances.Clone">
            <summary>设置 ActiveRecordBaseQuery.Clone() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBaseQuery.AllInstances.GetResultsArrayTypeIListBoolean">
            <summary>设置 ActiveRecordBaseQuery.GetResultsArray(Type t, IList list, Boolean distinct) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBaseQuery.AllInstances.GetResultsArrayTypeIListInt32Boolean">
            <summary>设置 ActiveRecordBaseQuery.GetResultsArray(Type t, IList list, Int32 entityIndex, Boolean distinct) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBaseQuery.AllInstances.InternalEnumerateISession">
            <summary>设置 ActiveRecordBaseQuery.InternalEnumerate(ISession session) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBaseQuery.AllInstances.InternalExecuteISession">
            <summary>设置 ActiveRecordBaseQuery.InternalExecute(ISession session) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBaseQuery.AllInstances.LogGet">
            <summary>设置 ActiveRecordBaseQuery.get_Log() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBaseQuery.AllInstances.LogSetILogger">
            <summary>设置 ActiveRecordBaseQuery.set_Log(ILogger value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordBaseQuery.AllInstances.RootTypeGet">
            <summary>设置 ActiveRecordBaseQuery.get_RootType() 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.ShimActiveRecordHooksBase">
            <summary>Castle.ActiveRecord.ActiveRecordHooksBase 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimActiveRecordHooksBase.#ctor(Castle.ActiveRecord.ActiveRecordHooksBase)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimActiveRecordHooksBase.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimActiveRecordHooksBase.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordHooksBase.BeforeDeleteIDictionary">
            <summary>设置 ActiveRecordHooksBase.BeforeDelete(IDictionary adapter) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordHooksBase.BeforeLoadObjectIDictionary">
            <summary>设置 ActiveRecordHooksBase.BeforeLoad(Object id, IDictionary adapter) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordHooksBase.BeforeSaveIDictionary">
            <summary>设置 ActiveRecordHooksBase.BeforeSave(IDictionary state) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordHooksBase.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordHooksBase.Constructor">
            <summary>设置 ActiveRecordHooksBase.ActiveRecordHooksBase() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordHooksBase.FindDirtyObjectIDictionaryIDictionaryITypeArray">
            <summary>设置 ActiveRecordHooksBase.FindDirty(Object id, IDictionary previousState, IDictionary currentState, IType[] types) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordHooksBase.IsUnsaved">
            <summary>设置 ActiveRecordHooksBase.IsUnsaved() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordHooksBase.OnDelete">
            <summary>设置 ActiveRecordHooksBase.OnDelete() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordHooksBase.OnFlushDirtyObjectIDictionaryIDictionaryITypeArray">
            <summary>设置 ActiveRecordHooksBase.OnFlushDirty(Object id, IDictionary previousState, IDictionary currentState, IType[] types) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordHooksBase.OnLoadObject">
            <summary>设置 ActiveRecordHooksBase.OnLoad(Object id) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordHooksBase.OnSave">
            <summary>设置 ActiveRecordHooksBase.OnSave() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordHooksBase.OnUpdate">
            <summary>设置 ActiveRecordHooksBase.OnUpdate() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordHooksBase.PostFlush">
            <summary>设置 ActiveRecordHooksBase.PostFlush() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordHooksBase.PreFlush">
            <summary>设置 ActiveRecordHooksBase.PreFlush() 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.ShimActiveRecordHooksBase.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordHooksBase.AllInstances.BeforeDeleteIDictionary">
            <summary>设置 ActiveRecordHooksBase.BeforeDelete(IDictionary adapter) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordHooksBase.AllInstances.BeforeLoadObjectIDictionary">
            <summary>设置 ActiveRecordHooksBase.BeforeLoad(Object id, IDictionary adapter) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordHooksBase.AllInstances.BeforeSaveIDictionary">
            <summary>设置 ActiveRecordHooksBase.BeforeSave(IDictionary state) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordHooksBase.AllInstances.FindDirtyObjectIDictionaryIDictionaryITypeArray">
            <summary>设置 ActiveRecordHooksBase.FindDirty(Object id, IDictionary previousState, IDictionary currentState, IType[] types) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordHooksBase.AllInstances.IsUnsaved">
            <summary>设置 ActiveRecordHooksBase.IsUnsaved() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordHooksBase.AllInstances.OnDelete">
            <summary>设置 ActiveRecordHooksBase.OnDelete() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordHooksBase.AllInstances.OnFlushDirtyObjectIDictionaryIDictionaryITypeArray">
            <summary>设置 ActiveRecordHooksBase.OnFlushDirty(Object id, IDictionary previousState, IDictionary currentState, IType[] types) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordHooksBase.AllInstances.OnLoadObject">
            <summary>设置 ActiveRecordHooksBase.OnLoad(Object id) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordHooksBase.AllInstances.OnSave">
            <summary>设置 ActiveRecordHooksBase.OnSave() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordHooksBase.AllInstances.OnUpdate">
            <summary>设置 ActiveRecordHooksBase.OnUpdate() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordHooksBase.AllInstances.PostFlush">
            <summary>设置 ActiveRecordHooksBase.PostFlush() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordHooksBase.AllInstances.PreFlush">
            <summary>设置 ActiveRecordHooksBase.PreFlush() 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.ShimActiveRecordHooksValidationBase">
            <summary>Castle.ActiveRecord.ActiveRecordHooksValidationBase 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimActiveRecordHooksValidationBase.#ctor(Castle.ActiveRecord.ActiveRecordHooksValidationBase)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimActiveRecordHooksValidationBase.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimActiveRecordHooksValidationBase.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimActiveRecordHooksValidationBase.Bind(Castle.ActiveRecord.Framework.IValidationProvider)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordHooksValidationBase.ActualValidatorGet">
            <summary>设置 ActiveRecordHooksValidationBase.get_ActualValidator() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordHooksValidationBase.BeforeSaveIDictionary">
            <summary>设置 ActiveRecordHooksValidationBase.BeforeSave(IDictionary state) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordHooksValidationBase.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordHooksValidationBase.Constructor">
            <summary>设置 ActiveRecordHooksValidationBase.ActiveRecordHooksValidationBase() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordHooksValidationBase.IsValid">
            <summary>设置 ActiveRecordHooksValidationBase.IsValid() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordHooksValidationBase.IsValidRunWhen">
            <summary>设置 ActiveRecordHooksValidationBase.IsValid(RunWhen runWhen) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordHooksValidationBase.OnFlushDirtyObjectIDictionaryIDictionaryITypeArray">
            <summary>设置 ActiveRecordHooksValidationBase.OnFlushDirty(Object id, IDictionary previousState, IDictionary currentState, IType[] types) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordHooksValidationBase.OnNotValid">
            <summary>设置 ActiveRecordHooksValidationBase.OnNotValid() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordHooksValidationBase.PropertiesValidationErrorMessagesGet">
            <summary>设置 ActiveRecordHooksValidationBase.get_PropertiesValidationErrorMessages() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordHooksValidationBase.ValidationErrorMessagesGet">
            <summary>设置 ActiveRecordHooksValidationBase.get_ValidationErrorMessages() 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.ShimActiveRecordHooksValidationBase.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordHooksValidationBase.AllInstances.ActualValidatorGet">
            <summary>设置 ActiveRecordHooksValidationBase.get_ActualValidator() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordHooksValidationBase.AllInstances.BeforeSaveIDictionary">
            <summary>设置 ActiveRecordHooksValidationBase.BeforeSave(IDictionary state) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordHooksValidationBase.AllInstances.IsValid">
            <summary>设置 ActiveRecordHooksValidationBase.IsValid() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordHooksValidationBase.AllInstances.IsValidRunWhen">
            <summary>设置 ActiveRecordHooksValidationBase.IsValid(RunWhen runWhen) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordHooksValidationBase.AllInstances.OnFlushDirtyObjectIDictionaryIDictionaryITypeArray">
            <summary>设置 ActiveRecordHooksValidationBase.OnFlushDirty(Object id, IDictionary previousState, IDictionary currentState, IType[] types) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordHooksValidationBase.AllInstances.OnNotValid">
            <summary>设置 ActiveRecordHooksValidationBase.OnNotValid() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordHooksValidationBase.AllInstances.PropertiesValidationErrorMessagesGet">
            <summary>设置 ActiveRecordHooksValidationBase.get_PropertiesValidationErrorMessages() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordHooksValidationBase.AllInstances.ValidationErrorMessagesGet">
            <summary>设置 ActiveRecordHooksValidationBase.get_ValidationErrorMessages() 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.ShimActiveRecordMediator">
            <summary>Castle.ActiveRecord.ActiveRecordMediator 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimActiveRecordMediator.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimActiveRecordMediator.#ctor(Castle.ActiveRecord.ActiveRecordMediator)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimActiveRecordMediator.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimActiveRecordMediator.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordMediator.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordMediator.Constructor">
            <summary>设置 ActiveRecordMediator.ActiveRecordMediator() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordMediator.CountType">
            <summary>设置 ActiveRecordMediator.Count(Type targetType) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordMediator.CountTypeDetachedCriteria">
            <summary>设置 ActiveRecordMediator.Count(Type targetType, DetachedCriteria detachedCriteria) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordMediator.CountTypeICriterionArray">
            <summary>设置 ActiveRecordMediator.Count(Type targetType, ICriterion[] criteria) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordMediator.CountTypeStringObjectArray">
            <summary>设置 ActiveRecordMediator.Count(Type targetType, String filter, Object[] args) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordMediator.CreateAndFlushObject">
            <summary>设置 ActiveRecordMediator.CreateAndFlush(Object instance) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordMediator.CreateObject">
            <summary>设置 ActiveRecordMediator.Create(Object instance) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordMediator.DeleteAllType">
            <summary>设置 ActiveRecordMediator.DeleteAll(Type type) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordMediator.DeleteAllTypeIEnumerable">
            <summary>设置 ActiveRecordMediator.DeleteAll(Type targetType, IEnumerable pkValues) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordMediator.DeleteAllTypeString">
            <summary>设置 ActiveRecordMediator.DeleteAll(Type type, String where) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordMediator.DeleteAndFlushObject">
            <summary>设置 ActiveRecordMediator.DeleteAndFlush(Object instance) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordMediator.DeleteObject">
            <summary>设置 ActiveRecordMediator.Delete(Object instance) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordMediator.EnumerateQueryIActiveRecordQuery">
            <summary>设置 ActiveRecordMediator.EnumerateQuery(IActiveRecordQuery q) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordMediator.EvictCollectionString">
            <summary>设置 ActiveRecordMediator.EvictCollection(String roleName) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordMediator.EvictCollectionStringObject">
            <summary>设置 ActiveRecordMediator.EvictCollection(String roleName, Object id) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordMediator.EvictEntityString">
            <summary>设置 ActiveRecordMediator.EvictEntity(String entityName) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordMediator.EvictObject">
            <summary>设置 ActiveRecordMediator.Evict(Object instance) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordMediator.EvictQueriesString">
            <summary>设置 ActiveRecordMediator.EvictQueries(String cacheRegion) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordMediator.ExecuteQueryIActiveRecordQuery">
            <summary>设置 ActiveRecordMediator.ExecuteQuery(IActiveRecordQuery q) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordMediator.ExecuteTypeNHibernateDelegateObject">
            <summary>设置 ActiveRecordMediator.Execute(Type targetType, NHibernateDelegate call, Object instance) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordMediator.ExistsType">
            <summary>设置 ActiveRecordMediator.Exists(Type targetType) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordMediator.ExistsTypeDetachedCriteria">
            <summary>设置 ActiveRecordMediator.Exists(Type targetType, DetachedCriteria detachedCriteria) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordMediator.ExistsTypeICriterionArray">
            <summary>设置 ActiveRecordMediator.Exists(Type targetType, ICriterion[] criterias) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordMediator.ExistsTypeIDetachedQuery">
            <summary>设置 ActiveRecordMediator.Exists(Type targetType, IDetachedQuery detachedQuery) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordMediator.ExistsTypeObject">
            <summary>设置 ActiveRecordMediator.Exists(Type targetType, Object id) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordMediator.ExistsTypeStringObjectArray">
            <summary>设置 ActiveRecordMediator.Exists(Type targetType, String filter, Object[] args) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordMediator.FindAllByPropertyTypeStringObject">
            <summary>设置 ActiveRecordMediator.FindAllByProperty(Type targetType, String property, Object value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordMediator.FindAllByPropertyTypeStringStringObject">
            <summary>设置 ActiveRecordMediator.FindAllByProperty(Type targetType, String orderByColumn, String property, Object value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordMediator.FindAllType">
            <summary>设置 ActiveRecordMediator.FindAll(Type targetType) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordMediator.FindAllTypeDetachedCriteriaOrderArray">
            <summary>设置 ActiveRecordMediator.FindAll(Type targetType, DetachedCriteria detachedCriteria, Order[] orders) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordMediator.FindAllTypeICriterionArray">
            <summary>设置 ActiveRecordMediator.FindAll(Type targetType, ICriterion[] criterias) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordMediator.FindAllTypeIDetachedQuery">
            <summary>设置 ActiveRecordMediator.FindAll(Type targetType, IDetachedQuery detachedQuery) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordMediator.FindAllTypeOrderArrayICriterionArray">
            <summary>设置 ActiveRecordMediator.FindAll(Type targetType, Order[] orders, ICriterion[] criterias) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordMediator.FindByPrimaryKeyTypeObject">
            <summary>设置 ActiveRecordMediator.FindByPrimaryKey(Type targetType, Object id) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordMediator.FindByPrimaryKeyTypeObjectBoolean">
            <summary>设置 ActiveRecordMediator.FindByPrimaryKey(Type targetType, Object id, Boolean throwOnNotFound) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordMediator.FindFirstTypeDetachedCriteria">
            <summary>设置 ActiveRecordMediator.FindFirst(Type targetType, DetachedCriteria criteria) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordMediator.FindFirstTypeDetachedCriteriaOrderArray">
            <summary>设置 ActiveRecordMediator.FindFirst(Type targetType, DetachedCriteria detachedCriteria, Order[] orders) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordMediator.FindFirstTypeICriterionArray">
            <summary>设置 ActiveRecordMediator.FindFirst(Type targetType, ICriterion[] criterias) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordMediator.FindFirstTypeIDetachedQuery">
            <summary>设置 ActiveRecordMediator.FindFirst(Type targetType, IDetachedQuery detachedQuery) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordMediator.FindFirstTypeOrderArrayICriterionArray">
            <summary>设置 ActiveRecordMediator.FindFirst(Type targetType, Order[] orders, ICriterion[] criterias) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordMediator.FindOneTypeDetachedCriteria">
            <summary>设置 ActiveRecordMediator.FindOne(Type targetType, DetachedCriteria criteria) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordMediator.FindOneTypeICriterionArray">
            <summary>设置 ActiveRecordMediator.FindOne(Type targetType, ICriterion[] criterias) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordMediator.FindOneTypeIDetachedQuery">
            <summary>设置 ActiveRecordMediator.FindOne(Type targetType, IDetachedQuery detachedQuery) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordMediator.GetFactoryType">
            <summary>设置 ActiveRecordMediator.GetFactory(Type type) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordMediator.GetSessionFactoryHolder">
            <summary>设置 ActiveRecordMediator.GetSessionFactoryHolder() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordMediator.GlobalEvictType">
            <summary>设置 ActiveRecordMediator.GlobalEvict(Type type) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordMediator.GlobalEvictTypeObject">
            <summary>设置 ActiveRecordMediator.GlobalEvict(Type type, Object id) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordMediator.RefreshObject">
            <summary>设置 ActiveRecordMediator.Refresh(Object instance) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordMediator.ReplicateObjectReplicationMode">
            <summary>设置 ActiveRecordMediator.Replicate(Object instance, ReplicationMode replicationMode) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordMediator.SaveAndFlushObject">
            <summary>设置 ActiveRecordMediator.SaveAndFlush(Object instance) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordMediator.SaveCopyAndFlushObject">
            <summary>设置 ActiveRecordMediator.SaveCopyAndFlush(Object instance) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordMediator.SaveCopyObject">
            <summary>设置 ActiveRecordMediator.SaveCopy(Object instance) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordMediator.SaveObject">
            <summary>设置 ActiveRecordMediator.Save(Object instance) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordMediator.SlicedFindAllTypeInt32Int32DetachedCriteria">
            <summary>设置 ActiveRecordMediator.SlicedFindAll(Type targetType, Int32 firstResult, Int32 maxResults, DetachedCriteria criteria) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordMediator.SlicedFindAllTypeInt32Int32ICriterionArray">
            <summary>设置 ActiveRecordMediator.SlicedFindAll(Type targetType, Int32 firstResult, Int32 maxresults, ICriterion[] criterias) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordMediator.SlicedFindAllTypeInt32Int32IDetachedQuery">
            <summary>设置 ActiveRecordMediator.SlicedFindAll(Type targetType, Int32 firstResult, Int32 maxResults, IDetachedQuery detachedQuery) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordMediator.SlicedFindAllTypeInt32Int32OrderArrayDetachedCriteria">
            <summary>设置 ActiveRecordMediator.SlicedFindAll(Type targetType, Int32 firstResult, Int32 maxResults, Order[] orders, DetachedCriteria criteria) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordMediator.SlicedFindAllTypeInt32Int32OrderArrayICriterionArray">
            <summary>设置 ActiveRecordMediator.SlicedFindAll(Type targetType, Int32 firstResult, Int32 maxresults, Order[] orders, ICriterion[] criterias) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordMediator.UpdateAndFlushObject">
            <summary>设置 ActiveRecordMediator.UpdateAndFlush(Object instance) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordMediator.UpdateObject">
            <summary>设置 ActiveRecordMediator.Update(Object instance) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.ShimActiveRecordMediator.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.ShimActiveRecordMediator`1">
            <summary>Castle.ActiveRecord.ActiveRecordMediator`1 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimActiveRecordMediator`1.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimActiveRecordMediator`1.#ctor(Castle.ActiveRecord.ActiveRecordMediator{`0})">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimActiveRecordMediator`1.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimActiveRecordMediator`1.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimActiveRecordMediator`1.ExecuteQuery2Of1IActiveRecordQueryOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.ActiveRecord.IActiveRecordQuery{``0},``0})">
            <summary>设置 ActiveRecordMediator`1.ExecuteQuery2(IActiveRecordQuery`1&lt;!!0&gt; query) 的 填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimActiveRecordMediator`1.ExistsOf1M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``0,System.Boolean})">
            <summary>设置 ActiveRecordMediator`1.Exists(!!0 id) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordMediator`1.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordMediator`1.Constructor">
            <summary>设置 ActiveRecordMediator`1.ActiveRecordMediator`1() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordMediator`1.Count">
            <summary>设置 ActiveRecordMediator`1.Count() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordMediator`1.CountDetachedCriteria">
            <summary>设置 ActiveRecordMediator`1.Count(DetachedCriteria detachedCriteria) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordMediator`1.CountICriterionArray">
            <summary>设置 ActiveRecordMediator`1.Count(ICriterion[] criteria) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordMediator`1.CountStringObjectArray">
            <summary>设置 ActiveRecordMediator`1.Count(String filter, Object[] args) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordMediator`1.CreateT0">
            <summary>设置 ActiveRecordMediator`1.Create(!0 instance) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordMediator`1.DeleteAll">
            <summary>设置 ActiveRecordMediator`1.DeleteAll() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordMediator`1.DeleteAllString">
            <summary>设置 ActiveRecordMediator`1.DeleteAll(String where) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordMediator`1.DeleteT0">
            <summary>设置 ActiveRecordMediator`1.Delete(!0 instance) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordMediator`1.ExecuteNHibernateDelegateT0">
            <summary>设置 ActiveRecordMediator`1.Execute(NHibernateDelegate call, !0 instance) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordMediator`1.Exists">
            <summary>设置 ActiveRecordMediator`1.Exists() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordMediator`1.ExistsDetachedCriteria">
            <summary>设置 ActiveRecordMediator`1.Exists(DetachedCriteria detachedCriteria) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordMediator`1.ExistsICriterionArray">
            <summary>设置 ActiveRecordMediator`1.Exists(ICriterion[] criterias) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordMediator`1.ExistsIDetachedQuery">
            <summary>设置 ActiveRecordMediator`1.Exists(IDetachedQuery detachedQuery) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordMediator`1.ExistsObject">
            <summary>设置 ActiveRecordMediator`1.Exists(Object id) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordMediator`1.ExistsStringObjectArray">
            <summary>设置 ActiveRecordMediator`1.Exists(String filter, Object[] args) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordMediator`1.FindAll">
            <summary>设置 ActiveRecordMediator`1.FindAll() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordMediator`1.FindAllByPropertyStringObject">
            <summary>设置 ActiveRecordMediator`1.FindAllByProperty(String property, Object value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordMediator`1.FindAllByPropertyStringStringObject">
            <summary>设置 ActiveRecordMediator`1.FindAllByProperty(String orderByColumn, String property, Object value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordMediator`1.FindAllDetachedCriteriaOrderArray">
            <summary>设置 ActiveRecordMediator`1.FindAll(DetachedCriteria detachedCriteria, Order[] orders) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordMediator`1.FindAllICriterionArray">
            <summary>设置 ActiveRecordMediator`1.FindAll(ICriterion[] criterias) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordMediator`1.FindAllIDetachedQuery">
            <summary>设置 ActiveRecordMediator`1.FindAll(IDetachedQuery detachedQuery) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordMediator`1.FindAllOrderArrayICriterionArray">
            <summary>设置 ActiveRecordMediator`1.FindAll(Order[] orders, ICriterion[] criterias) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordMediator`1.FindByPrimaryKeyObject">
            <summary>设置 ActiveRecordMediator`1.FindByPrimaryKey(Object id) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordMediator`1.FindByPrimaryKeyObjectBoolean">
            <summary>设置 ActiveRecordMediator`1.FindByPrimaryKey(Object id, Boolean throwOnNotFound) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordMediator`1.FindFirstDetachedCriteria">
            <summary>设置 ActiveRecordMediator`1.FindFirst(DetachedCriteria criteria) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordMediator`1.FindFirstDetachedCriteriaOrderArray">
            <summary>设置 ActiveRecordMediator`1.FindFirst(DetachedCriteria detachedCriteria, Order[] orders) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordMediator`1.FindFirstICriterionArray">
            <summary>设置 ActiveRecordMediator`1.FindFirst(ICriterion[] criterias) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordMediator`1.FindFirstIDetachedQuery">
            <summary>设置 ActiveRecordMediator`1.FindFirst(IDetachedQuery detachedQuery) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordMediator`1.FindFirstOrderArrayICriterionArray">
            <summary>设置 ActiveRecordMediator`1.FindFirst(Order[] orders, ICriterion[] criterias) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordMediator`1.FindOneDetachedCriteria">
            <summary>设置 ActiveRecordMediator`1.FindOne(DetachedCriteria criteria) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordMediator`1.FindOneICriterionArray">
            <summary>设置 ActiveRecordMediator`1.FindOne(ICriterion[] criterias) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordMediator`1.FindOneIDetachedQuery">
            <summary>设置 ActiveRecordMediator`1.FindOne(IDetachedQuery detachedQuery) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordMediator`1.RefreshT0">
            <summary>设置 ActiveRecordMediator`1.Refresh(!0 instance) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordMediator`1.SaveCopyT0">
            <summary>设置 ActiveRecordMediator`1.SaveCopy(!0 instance) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordMediator`1.SaveT0">
            <summary>设置 ActiveRecordMediator`1.Save(!0 instance) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordMediator`1.SlicedFindAllInt32Int32DetachedCriteriaOrderArray">
            <summary>设置 ActiveRecordMediator`1.SlicedFindAll(Int32 firstResult, Int32 maxResults, DetachedCriteria criteria, Order[] orders) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordMediator`1.SlicedFindAllInt32Int32ICriterionArray">
            <summary>设置 ActiveRecordMediator`1.SlicedFindAll(Int32 firstResult, Int32 maxResults, ICriterion[] criterias) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordMediator`1.SlicedFindAllInt32Int32IDetachedQuery">
            <summary>设置 ActiveRecordMediator`1.SlicedFindAll(Int32 firstResult, Int32 maxResults, IDetachedQuery detachedQuery) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordMediator`1.SlicedFindAllInt32Int32OrderArrayICriterionArray">
            <summary>设置 ActiveRecordMediator`1.SlicedFindAll(Int32 firstResult, Int32 maxResults, Order[] orders, ICriterion[] criterias) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordMediator`1.UpdateT0">
            <summary>设置 ActiveRecordMediator`1.Update(!0 instance) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.ShimActiveRecordMediator`1.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.ShimActiveRecordSkipAttribute">
            <summary>Castle.ActiveRecord.ActiveRecordSkipAttribute 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimActiveRecordSkipAttribute.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimActiveRecordSkipAttribute.#ctor(Castle.ActiveRecord.ActiveRecordSkipAttribute)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimActiveRecordSkipAttribute.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimActiveRecordSkipAttribute.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordSkipAttribute.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordSkipAttribute.Constructor">
            <summary>设置 ActiveRecordSkipAttribute.ActiveRecordSkipAttribute() 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.ShimActiveRecordSkipAttribute.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.ShimActiveRecordStarter">
            <summary>Castle.ActiveRecord.ActiveRecordStarter 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimActiveRecordStarter.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimActiveRecordStarter.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimActiveRecordStarter.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordStarter.AddContributorINHContributor">
            <summary>设置 ActiveRecordStarter.AddContributor(INHContributor contributor) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordStarter.AddContributorsToConfigTypeConfiguration">
            <summary>设置 ActiveRecordStarter.AddContributorsToConfig(Type type, Configuration nconf) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordStarter.AddXmlStringConfigurationStringActiveRecordModel">
            <summary>设置 ActiveRecordStarter.AddXmlString(Configuration config, String xml, ActiveRecordModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordStarter.AddXmlToNHibernateCfgISessionFactoryHolderActiveRecordModelCollection">
            <summary>设置 ActiveRecordStarter.AddXmlToNHibernateCfg(ISessionFactoryHolder holder, ActiveRecordModelCollection models) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordStarter.AddXmlToNHibernateFromAssmebliesAttributesISessionFactoryHolderActiveRecordModelCollection">
            <summary>设置 ActiveRecordStarter.AddXmlToNHibernateFromAssmebliesAttributes(ISessionFactoryHolder holder, ActiveRecordModelCollection models) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordStarter.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordStarter.BuildModelsISessionFactoryHolderIConfigurationSourceIEnumerableOfTypeBoolean">
            <summary>设置 ActiveRecordStarter.BuildModels(ISessionFactoryHolder holder, IConfigurationSource source, IEnumerable`1&lt;Type&gt; types, Boolean ignoreProblematicTypes) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordStarter.CheckInitialized">
            <summary>设置 ActiveRecordStarter.CheckInitialized() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordStarter.ClearContributors">
            <summary>设置 ActiveRecordStarter.ClearContributors() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordStarter.CollectValidActiveRecordTypesFromAssemblyAssemblyICollectionOfTypeIConfigurationSource">
            <summary>设置 ActiveRecordStarter.CollectValidActiveRecordTypesFromAssembly(Assembly assembly, ICollection`1&lt;Type&gt; list, IConfigurationSource source) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordStarter.ConfigurationSourceGet">
            <summary>设置 ActiveRecordStarter.get_ConfigurationSource() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordStarter.ConfigureEventListenerEventListenerAssemblyAttributeEventListenerConfig">
            <summary>设置 ActiveRecordStarter.ConfigureEventListener(EventListenerAssemblyAttribute attribute, EventListenerConfig config) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordStarter.CreateAnotherFileStringInt32">
            <summary>设置 ActiveRecordStarter.CreateAnotherFile(String originalFileName, Int32 fileCount) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordStarter.CreateConfigurationIConfiguration">
            <summary>设置 ActiveRecordStarter.CreateConfiguration(IConfiguration config) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordStarter.CreateSchema">
            <summary>设置 ActiveRecordStarter.CreateSchema() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordStarter.CreateSchemaExportConfiguration">
            <summary>设置 ActiveRecordStarter.CreateSchemaExport(Configuration cfg) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordStarter.CreateSchemaFromFileString">
            <summary>设置 ActiveRecordStarter.CreateSchemaFromFile(String scriptFileName) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordStarter.CreateSchemaFromFileStringIDbConnection">
            <summary>设置 ActiveRecordStarter.CreateSchemaFromFile(String scriptFileName, IDbConnection connection) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordStarter.CreateSchemaType">
            <summary>设置 ActiveRecordStarter.CreateSchema(Type baseClass) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordStarter.CreateSchemaUpdateConfiguration">
            <summary>设置 ActiveRecordStarter.CreateSchemaUpdate(Configuration cfg) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordStarter.CreateSessionFactoryHolderImplementationIConfigurationSource">
            <summary>设置 ActiveRecordStarter.CreateSessionFactoryHolderImplementation(IConfigurationSource source) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordStarter.CreateThreadScopeInfoImplementationIConfigurationSource">
            <summary>设置 ActiveRecordStarter.CreateThreadScopeInfoImplementation(IConfigurationSource source) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordStarter.DropSchema">
            <summary>设置 ActiveRecordStarter.DropSchema() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordStarter.DropSchemaType">
            <summary>设置 ActiveRecordStarter.DropSchema(Type baseClass) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordStarter.EventListenerComponentRegistrationHookAddEventListenerRegistrationDelegate">
            <summary>设置 ActiveRecordStarter.add_EventListenerComponentRegistrationHook(EventListenerRegistrationDelegate value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordStarter.EventListenerComponentRegistrationHookRemoveEventListenerRegistrationDelegate">
            <summary>设置 ActiveRecordStarter.remove_EventListenerComponentRegistrationHook(EventListenerRegistrationDelegate value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordStarter.EventListenerFacilityConfigurationHookAddEventListenerRegistrationDelegate">
            <summary>设置 ActiveRecordStarter.add_EventListenerFacilityConfigurationHook(EventListenerRegistrationDelegate value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordStarter.EventListenerFacilityConfigurationHookRemoveEventListenerRegistrationDelegate">
            <summary>设置 ActiveRecordStarter.remove_EventListenerFacilityConfigurationHook(EventListenerRegistrationDelegate value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordStarter.GenerateCreationScriptsString">
            <summary>设置 ActiveRecordStarter.GenerateCreationScripts(String fileName) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordStarter.GenerateCreationScriptsTypeString">
            <summary>设置 ActiveRecordStarter.GenerateCreationScripts(Type baseType, String fileName) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordStarter.GenerateDropScriptsString">
            <summary>设置 ActiveRecordStarter.GenerateDropScripts(String fileName) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordStarter.GenerateDropScriptsTypeString">
            <summary>设置 ActiveRecordStarter.GenerateDropScripts(Type baseType, String fileName) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordStarter.GetExportedTypesFromAssemblyAssembly">
            <summary>设置 ActiveRecordStarter.GetExportedTypesFromAssembly(Assembly assembly) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordStarter.GetRegisteredTypes">
            <summary>设置 ActiveRecordStarter.GetRegisteredTypes() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordStarter.Initialize">
            <summary>设置 ActiveRecordStarter.Initialize() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordStarter.InitializeAssemblyArrayIConfigurationSourceTypeArray">
            <summary>设置 ActiveRecordStarter.Initialize(Assembly[] assemblies, IConfigurationSource source, Type[] additionalTypes) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordStarter.InitializeAssemblyIConfigurationSource">
            <summary>设置 ActiveRecordStarter.Initialize(Assembly assembly, IConfigurationSource source) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordStarter.InitializeIConfigurationSourceTypeArray">
            <summary>设置 ActiveRecordStarter.Initialize(IConfigurationSource source, Type[] types) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordStarter.IsActiveRecordTypeICustomAttributeProvider">
            <summary>设置 ActiveRecordStarter.IsActiveRecordType(ICustomAttributeProvider type) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordStarter.IsConfiguredAsRootTypeType">
            <summary>设置 ActiveRecordStarter.IsConfiguredAsRootType(Type type) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordStarter.IsEventListenerType">
            <summary>设置 ActiveRecordStarter.IsEventListener(Type type) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordStarter.IsInitializedGet">
            <summary>设置 ActiveRecordStarter.get_IsInitialized() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordStarter.IsTypeHierarchyBaseICustomAttributeProvider">
            <summary>设置 ActiveRecordStarter.IsTypeHierarchyBase(ICustomAttributeProvider type) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordStarter.MappingRegisteredInConfigurationAddSessionFactoryHolderDelegate">
            <summary>设置 ActiveRecordStarter.add_MappingRegisteredInConfiguration(SessionFactoryHolderDelegate value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordStarter.MappingRegisteredInConfigurationRemoveSessionFactoryHolderDelegate">
            <summary>设置 ActiveRecordStarter.remove_MappingRegisteredInConfiguration(SessionFactoryHolderDelegate value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordStarter.ModelCreatedAddModelDelegate">
            <summary>设置 ActiveRecordStarter.add_ModelCreated(ModelDelegate value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordStarter.ModelCreatedRemoveModelDelegate">
            <summary>设置 ActiveRecordStarter.remove_ModelCreated(ModelDelegate value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordStarter.ModelsCreatedAddModelsDelegate">
            <summary>设置 ActiveRecordStarter.add_ModelsCreated(ModelsDelegate value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordStarter.ModelsCreatedRemoveModelsDelegate">
            <summary>设置 ActiveRecordStarter.remove_ModelsCreated(ModelsDelegate value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordStarter.ModelsValidatedAddModelsDelegate">
            <summary>设置 ActiveRecordStarter.add_ModelsValidated(ModelsDelegate value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordStarter.ModelsValidatedRemoveModelsDelegate">
            <summary>设置 ActiveRecordStarter.remove_ModelsValidated(ModelsDelegate value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordStarter.ProcessEventListenerAssemblyAttributesEventListenerContributorIEnumerableOfEventListenerAssemblyAttribute">
            <summary>设置 ActiveRecordStarter.ProcessEventListenerAssemblyAttributes(EventListenerContributor contributor, IEnumerable`1&lt;EventListenerAssemblyAttribute&gt; attributes) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordStarter.RaiseSessionFactoryHolderCreatedISessionFactoryHolder">
            <summary>设置 ActiveRecordStarter.RaiseSessionFactoryHolderCreated(ISessionFactoryHolder holder) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordStarter.RegisterAssembliesAssemblyArray">
            <summary>设置 ActiveRecordStarter.RegisterAssemblies(Assembly[] assemblies) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordStarter.RegisterEventListenersIEnumerableOfType">
            <summary>设置 ActiveRecordStarter.RegisterEventListeners(IEnumerable`1&lt;Type&gt; types) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordStarter.RegisterExtensionIModelBuilderExtension">
            <summary>设置 ActiveRecordStarter.RegisterExtension(IModelBuilderExtension extension) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordStarter.RegisterTypesISessionFactoryHolderIConfigurationSourceIEnumerableOfTypeBoolean">
            <summary>设置 ActiveRecordStarter.RegisterTypes(ISessionFactoryHolder holder, IConfigurationSource source, IEnumerable`1&lt;Type&gt; types, Boolean ignoreProblematicTypes) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordStarter.RegisterTypesTypeArray">
            <summary>设置 ActiveRecordStarter.RegisterTypes(Type[] types) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordStarter.ResetInitializationFlag">
            <summary>设置 ActiveRecordStarter.ResetInitializationFlag() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordStarter.SessionFactoryHolderCreatedAddSessionFactoryHolderDelegate">
            <summary>设置 ActiveRecordStarter.add_SessionFactoryHolderCreated(SessionFactoryHolderDelegate value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordStarter.SessionFactoryHolderCreatedRemoveSessionFactoryHolderDelegate">
            <summary>设置 ActiveRecordStarter.remove_SessionFactoryHolderCreated(SessionFactoryHolderDelegate value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordStarter.SetSchemaDelimiterString">
            <summary>设置 ActiveRecordStarter.SetSchemaDelimiter(String newDelimiter) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordStarter.SetUpConfigurationIConfigurationSourceTypeISessionFactoryHolder">
            <summary>设置 ActiveRecordStarter.SetUpConfiguration(IConfigurationSource source, Type type, ISessionFactoryHolder holder) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordStarter.ShouldIgnoreTypeType">
            <summary>设置 ActiveRecordStarter.ShouldIgnoreType(Type type) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordStarter.StaticConstructor">
            <summary>设置 ActiveRecordStarter.ActiveRecordStarter() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordStarter.TypeDefinesADatabaseBoundaryType">
            <summary>设置 ActiveRecordStarter.TypeDefinesADatabaseBoundary(Type type) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordStarter.UpdateSchema">
            <summary>设置 ActiveRecordStarter.UpdateSchema() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordStarter.UpdateSchemaType">
            <summary>设置 ActiveRecordStarter.UpdateSchema(Type baseClass) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordStarter.VerifySchemaActiveRecordModelCollection">
            <summary>设置 ActiveRecordStarter.VerifySchema(ActiveRecordModelCollection models) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.ShimActiveRecordValidationBase">
            <summary>Castle.ActiveRecord.ActiveRecordValidationBase 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimActiveRecordValidationBase.#ctor(Castle.ActiveRecord.ActiveRecordValidationBase)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimActiveRecordValidationBase.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimActiveRecordValidationBase.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimActiveRecordValidationBase.Bind(Castle.ActiveRecord.Framework.IValidationProvider)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordValidationBase.ActualValidatorGet">
            <summary>设置 ActiveRecordValidationBase.get_ActualValidator() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordValidationBase.BeforeSaveIDictionary">
            <summary>设置 ActiveRecordValidationBase.BeforeSave(IDictionary state) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordValidationBase.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordValidationBase.Constructor">
            <summary>设置 ActiveRecordValidationBase.ActiveRecordValidationBase() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordValidationBase.IsValid">
            <summary>设置 ActiveRecordValidationBase.IsValid() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordValidationBase.IsValidRunWhen">
            <summary>设置 ActiveRecordValidationBase.IsValid(RunWhen runWhen) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordValidationBase.OnFlushDirtyObjectIDictionaryIDictionaryITypeArray">
            <summary>设置 ActiveRecordValidationBase.OnFlushDirty(Object id, IDictionary previousState, IDictionary currentState, IType[] types) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordValidationBase.OnNotValid">
            <summary>设置 ActiveRecordValidationBase.OnNotValid() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordValidationBase.PropertiesValidationErrorMessagesGet">
            <summary>设置 ActiveRecordValidationBase.get_PropertiesValidationErrorMessages() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordValidationBase.ValidationErrorMessagesGet">
            <summary>设置 ActiveRecordValidationBase.get_ValidationErrorMessages() 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.ShimActiveRecordValidationBase.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordValidationBase.AllInstances.ActualValidatorGet">
            <summary>设置 ActiveRecordValidationBase.get_ActualValidator() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordValidationBase.AllInstances.BeforeSaveIDictionary">
            <summary>设置 ActiveRecordValidationBase.BeforeSave(IDictionary state) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordValidationBase.AllInstances.IsValid">
            <summary>设置 ActiveRecordValidationBase.IsValid() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordValidationBase.AllInstances.IsValidRunWhen">
            <summary>设置 ActiveRecordValidationBase.IsValid(RunWhen runWhen) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordValidationBase.AllInstances.OnFlushDirtyObjectIDictionaryIDictionaryITypeArray">
            <summary>设置 ActiveRecordValidationBase.OnFlushDirty(Object id, IDictionary previousState, IDictionary currentState, IType[] types) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordValidationBase.AllInstances.OnNotValid">
            <summary>设置 ActiveRecordValidationBase.OnNotValid() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordValidationBase.AllInstances.PropertiesValidationErrorMessagesGet">
            <summary>设置 ActiveRecordValidationBase.get_PropertiesValidationErrorMessages() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordValidationBase.AllInstances.ValidationErrorMessagesGet">
            <summary>设置 ActiveRecordValidationBase.get_ValidationErrorMessages() 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.ShimActiveRecordValidationBase`1">
            <summary>Castle.ActiveRecord.ActiveRecordValidationBase`1 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimActiveRecordValidationBase`1.#ctor(Castle.ActiveRecord.ActiveRecordValidationBase{`0})">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimActiveRecordValidationBase`1.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimActiveRecordValidationBase`1.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimActiveRecordValidationBase`1.Bind(Castle.ActiveRecord.Framework.IValidationProvider)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordValidationBase`1.ActualValidatorGet">
            <summary>设置 ActiveRecordValidationBase`1.get_ActualValidator() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordValidationBase`1.BeforeSaveIDictionary">
            <summary>设置 ActiveRecordValidationBase`1.BeforeSave(IDictionary state) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordValidationBase`1.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordValidationBase`1.Constructor">
            <summary>设置 ActiveRecordValidationBase`1.ActiveRecordValidationBase`1() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordValidationBase`1.IsValid">
            <summary>设置 ActiveRecordValidationBase`1.IsValid() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordValidationBase`1.IsValidRunWhen">
            <summary>设置 ActiveRecordValidationBase`1.IsValid(RunWhen runWhen) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordValidationBase`1.OnFlushDirtyObjectIDictionaryIDictionaryITypeArray">
            <summary>设置 ActiveRecordValidationBase`1.OnFlushDirty(Object id, IDictionary previousState, IDictionary currentState, IType[] types) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordValidationBase`1.OnNotValid">
            <summary>设置 ActiveRecordValidationBase`1.OnNotValid() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordValidationBase`1.PropertiesValidationErrorMessagesGet">
            <summary>设置 ActiveRecordValidationBase`1.get_PropertiesValidationErrorMessages() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordValidationBase`1.ValidationErrorMessagesGet">
            <summary>设置 ActiveRecordValidationBase`1.get_ValidationErrorMessages() 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.ShimActiveRecordValidationBase`1.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordValidationBase`1.AllInstances.ActualValidatorGet">
            <summary>设置 ActiveRecordValidationBase`1.get_ActualValidator() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordValidationBase`1.AllInstances.BeforeSaveIDictionary">
            <summary>设置 ActiveRecordValidationBase`1.BeforeSave(IDictionary state) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordValidationBase`1.AllInstances.IsValid">
            <summary>设置 ActiveRecordValidationBase`1.IsValid() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordValidationBase`1.AllInstances.IsValidRunWhen">
            <summary>设置 ActiveRecordValidationBase`1.IsValid(RunWhen runWhen) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordValidationBase`1.AllInstances.OnFlushDirtyObjectIDictionaryIDictionaryITypeArray">
            <summary>设置 ActiveRecordValidationBase`1.OnFlushDirty(Object id, IDictionary previousState, IDictionary currentState, IType[] types) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordValidationBase`1.AllInstances.OnNotValid">
            <summary>设置 ActiveRecordValidationBase`1.OnNotValid() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordValidationBase`1.AllInstances.PropertiesValidationErrorMessagesGet">
            <summary>设置 ActiveRecordValidationBase`1.get_PropertiesValidationErrorMessages() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordValidationBase`1.AllInstances.ValidationErrorMessagesGet">
            <summary>设置 ActiveRecordValidationBase`1.get_ValidationErrorMessages() 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.ShimActiveRecordValidationException">
            <summary>Castle.ActiveRecord.ActiveRecordValidationException 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimActiveRecordValidationException.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimActiveRecordValidationException.#ctor(Castle.ActiveRecord.ActiveRecordValidationException)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimActiveRecordValidationException.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimActiveRecordValidationException.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimActiveRecordValidationException.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordValidationException.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordValidationException.ConstructorSerializationInfoStreamingContext">
            <summary>设置 ActiveRecordValidationException.ActiveRecordValidationException(SerializationInfo info, StreamingContext context) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordValidationException.ConstructorString">
            <summary>设置 ActiveRecordValidationException.ActiveRecordValidationException(String message) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordValidationException.ConstructorStringException">
            <summary>设置 ActiveRecordValidationException.ActiveRecordValidationException(String message, Exception innerException) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordValidationException.ConstructorStringExceptionStringArrayIDictionary">
            <summary>设置 ActiveRecordValidationException.ActiveRecordValidationException(String message, Exception innerException, String[] validationErrorMessages, IDictionary propertiesValidationErrorMessages) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordValidationException.ConstructorStringStringArrayIDictionary">
            <summary>设置 ActiveRecordValidationException.ActiveRecordValidationException(String message, String[] validationErrorMessages, IDictionary propertiesValidationErrorMessages) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordValidationException.FailedPropertiesGet">
            <summary>设置 ActiveRecordValidationException.get_FailedProperties() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordValidationException.PropertiesValidationErrorMessagesGet">
            <summary>设置 ActiveRecordValidationException.get_PropertiesValidationErrorMessages() 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.ShimActiveRecordValidationException.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordValidationException.AllInstances.FailedPropertiesGet">
            <summary>设置 ActiveRecordValidationException.get_FailedProperties() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordValidationException.AllInstances.PropertiesValidationErrorMessagesGet">
            <summary>设置 ActiveRecordValidationException.get_PropertiesValidationErrorMessages() 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.ShimActiveRecordValidator">
            <summary>Castle.ActiveRecord.ActiveRecordValidator 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimActiveRecordValidator.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimActiveRecordValidator.#ctor(Castle.ActiveRecord.ActiveRecordValidator)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimActiveRecordValidator.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimActiveRecordValidator.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimActiveRecordValidator.Bind(Castle.ActiveRecord.Framework.IValidationProvider)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordValidator.ARObjectInstanceGet">
            <summary>设置 ActiveRecordValidator.get_ARObjectInstance() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordValidator.AddNestedPropertyValidationErrorMessagesListOfStringObjectValidatorRunner">
            <summary>设置 ActiveRecordValidator.AddNestedPropertyValidationErrorMessages(List`1&lt;String&gt; errorMessages, Object instance, ValidatorRunner runner) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordValidator.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordValidator.ConstructorObject">
            <summary>设置 ActiveRecordValidator.ActiveRecordValidator(Object arObjectInstance) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordValidator.GetNestedPropertiesToValidateObject">
            <summary>设置 ActiveRecordValidator.GetNestedPropertiesToValidate(Object instance) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordValidator.IsValid">
            <summary>设置 ActiveRecordValidator.IsValid() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordValidator.IsValidRunWhen">
            <summary>设置 ActiveRecordValidator.IsValid(RunWhen runWhen) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordValidator.PropertiesValidationErrorMessagesGet">
            <summary>设置 ActiveRecordValidator.get_PropertiesValidationErrorMessages() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordValidator.RunnerGet">
            <summary>设置 ActiveRecordValidator.get_Runner() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordValidator.ThrowNotValidExceptionStringArrayIDictionary">
            <summary>设置 ActiveRecordValidator.ThrowNotValidException(String[] validationErrorMessages, IDictionary propertiesValidationErrorMessages) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordValidator.ValidationErrorMessagesGet">
            <summary>设置 ActiveRecordValidator.get_ValidationErrorMessages() 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.ShimActiveRecordValidator.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordValidator.AllInstances.ARObjectInstanceGet">
            <summary>设置 ActiveRecordValidator.get_ARObjectInstance() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordValidator.AllInstances.IsValid">
            <summary>设置 ActiveRecordValidator.IsValid() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordValidator.AllInstances.IsValidRunWhen">
            <summary>设置 ActiveRecordValidator.IsValid(RunWhen runWhen) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordValidator.AllInstances.PropertiesValidationErrorMessagesGet">
            <summary>设置 ActiveRecordValidator.get_PropertiesValidationErrorMessages() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordValidator.AllInstances.RunnerGet">
            <summary>设置 ActiveRecordValidator.get_Runner() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimActiveRecordValidator.AllInstances.ValidationErrorMessagesGet">
            <summary>设置 ActiveRecordValidator.get_ValidationErrorMessages() 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.ShimAny">
            <summary>Castle.ActiveRecord.Any 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimAny.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimAny.#ctor(Castle.ActiveRecord.Any)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimAny.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimAny.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimAny.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimAny.Constructor">
            <summary>设置 Any.Any() 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.ShimAny.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.ShimAny.ShimMetaValueAttribute">
            <summary>Castle.ActiveRecord.Any+MetaValueAttribute 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimAny.ShimMetaValueAttribute.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimAny.ShimMetaValueAttribute.#ctor(Castle.ActiveRecord.Any.MetaValueAttribute)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimAny.ShimMetaValueAttribute.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimAny.ShimMetaValueAttribute.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimAny.ShimMetaValueAttribute.Bind(System.IComparable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimAny.ShimMetaValueAttribute.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimAny.ShimMetaValueAttribute.ClassGet">
            <summary>设置 MetaValueAttribute.get_Class() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimAny.ShimMetaValueAttribute.ClassSetType">
            <summary>设置 MetaValueAttribute.set_Class(Type value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimAny.ShimMetaValueAttribute.ConstructorByteType">
            <summary>设置 MetaValueAttribute.MetaValueAttribute(Byte value, Type clazz) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimAny.ShimMetaValueAttribute.ConstructorInt16Type">
            <summary>设置 MetaValueAttribute.MetaValueAttribute(Int16 value, Type clazz) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimAny.ShimMetaValueAttribute.ConstructorInt32Type">
            <summary>设置 MetaValueAttribute.MetaValueAttribute(Int32 value, Type clazz) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimAny.ShimMetaValueAttribute.ConstructorStringType">
            <summary>设置 MetaValueAttribute.MetaValueAttribute(String value, Type clazz) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimAny.ShimMetaValueAttribute.SystemIComparableCompareToObject">
            <summary>设置 MetaValueAttribute.System.IComparable.CompareTo(Object obj) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimAny.ShimMetaValueAttribute.ValueGet">
            <summary>设置 MetaValueAttribute.get_Value() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimAny.ShimMetaValueAttribute.ValueSetString">
            <summary>设置 MetaValueAttribute.set_Value(String value) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.ShimAny.ShimMetaValueAttribute.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimAny.ShimMetaValueAttribute.AllInstances.ClassGet">
            <summary>设置 MetaValueAttribute.get_Class() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimAny.ShimMetaValueAttribute.AllInstances.ClassSetType">
            <summary>设置 MetaValueAttribute.set_Class(Type value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimAny.ShimMetaValueAttribute.AllInstances.SystemIComparableCompareToObject">
            <summary>设置 MetaValueAttribute.System.IComparable.CompareTo(Object obj) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimAny.ShimMetaValueAttribute.AllInstances.ValueGet">
            <summary>设置 MetaValueAttribute.get_Value() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimAny.ShimMetaValueAttribute.AllInstances.ValueSetString">
            <summary>设置 MetaValueAttribute.set_Value(String value) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.ShimAnyAttribute">
            <summary>Castle.ActiveRecord.AnyAttribute 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimAnyAttribute.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimAnyAttribute.#ctor(Castle.ActiveRecord.AnyAttribute)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimAnyAttribute.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimAnyAttribute.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimAnyAttribute.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimAnyAttribute.CascadeGet">
            <summary>设置 AnyAttribute.get_Cascade() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimAnyAttribute.CascadeSetCascadeEnum">
            <summary>设置 AnyAttribute.set_Cascade(CascadeEnum value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimAnyAttribute.Constructor">
            <summary>设置 AnyAttribute.AnyAttribute() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimAnyAttribute.ConstructorType">
            <summary>设置 AnyAttribute.AnyAttribute(Type idType) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimAnyAttribute.IdColumnGet">
            <summary>设置 AnyAttribute.get_IdColumn() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimAnyAttribute.IdColumnSetString">
            <summary>设置 AnyAttribute.set_IdColumn(String value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimAnyAttribute.IdTypeGet">
            <summary>设置 AnyAttribute.get_IdType() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimAnyAttribute.IdTypeSetType">
            <summary>设置 AnyAttribute.set_IdType(Type value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimAnyAttribute.IndexGet">
            <summary>设置 AnyAttribute.get_Index() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimAnyAttribute.IndexSetString">
            <summary>设置 AnyAttribute.set_Index(String value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimAnyAttribute.InsertGet">
            <summary>设置 AnyAttribute.get_Insert() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimAnyAttribute.InsertSetBoolean">
            <summary>设置 AnyAttribute.set_Insert(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimAnyAttribute.MetaTypeGet">
            <summary>设置 AnyAttribute.get_MetaType() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimAnyAttribute.MetaTypeSetType">
            <summary>设置 AnyAttribute.set_MetaType(Type value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimAnyAttribute.NotNullGet">
            <summary>设置 AnyAttribute.get_NotNull() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimAnyAttribute.NotNullSetBoolean">
            <summary>设置 AnyAttribute.set_NotNull(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimAnyAttribute.TypeColumnGet">
            <summary>设置 AnyAttribute.get_TypeColumn() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimAnyAttribute.TypeColumnSetString">
            <summary>设置 AnyAttribute.set_TypeColumn(String value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimAnyAttribute.UpdateGet">
            <summary>设置 AnyAttribute.get_Update() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimAnyAttribute.UpdateSetBoolean">
            <summary>设置 AnyAttribute.set_Update(Boolean value) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.ShimAnyAttribute.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimAnyAttribute.AllInstances.CascadeGet">
            <summary>设置 AnyAttribute.get_Cascade() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimAnyAttribute.AllInstances.CascadeSetCascadeEnum">
            <summary>设置 AnyAttribute.set_Cascade(CascadeEnum value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimAnyAttribute.AllInstances.IdColumnGet">
            <summary>设置 AnyAttribute.get_IdColumn() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimAnyAttribute.AllInstances.IdColumnSetString">
            <summary>设置 AnyAttribute.set_IdColumn(String value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimAnyAttribute.AllInstances.IdTypeGet">
            <summary>设置 AnyAttribute.get_IdType() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimAnyAttribute.AllInstances.IdTypeSetType">
            <summary>设置 AnyAttribute.set_IdType(Type value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimAnyAttribute.AllInstances.IndexGet">
            <summary>设置 AnyAttribute.get_Index() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimAnyAttribute.AllInstances.IndexSetString">
            <summary>设置 AnyAttribute.set_Index(String value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimAnyAttribute.AllInstances.InsertGet">
            <summary>设置 AnyAttribute.get_Insert() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimAnyAttribute.AllInstances.InsertSetBoolean">
            <summary>设置 AnyAttribute.set_Insert(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimAnyAttribute.AllInstances.MetaTypeGet">
            <summary>设置 AnyAttribute.get_MetaType() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimAnyAttribute.AllInstances.MetaTypeSetType">
            <summary>设置 AnyAttribute.set_MetaType(Type value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimAnyAttribute.AllInstances.NotNullGet">
            <summary>设置 AnyAttribute.get_NotNull() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimAnyAttribute.AllInstances.NotNullSetBoolean">
            <summary>设置 AnyAttribute.set_NotNull(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimAnyAttribute.AllInstances.TypeColumnGet">
            <summary>设置 AnyAttribute.get_TypeColumn() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimAnyAttribute.AllInstances.TypeColumnSetString">
            <summary>设置 AnyAttribute.set_TypeColumn(String value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimAnyAttribute.AllInstances.UpdateGet">
            <summary>设置 AnyAttribute.get_Update() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimAnyAttribute.AllInstances.UpdateSetBoolean">
            <summary>设置 AnyAttribute.set_Update(Boolean value) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.ShimBaseAttribute">
            <summary>Castle.ActiveRecord.BaseAttribute 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimBaseAttribute.#ctor(Castle.ActiveRecord.BaseAttribute)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimBaseAttribute.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimBaseAttribute.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimBaseAttribute.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimBaseAttribute.CacheGet">
            <summary>设置 BaseAttribute.get_Cache() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimBaseAttribute.CacheRegionGet">
            <summary>设置 BaseAttribute.get_CacheRegion() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimBaseAttribute.CacheRegionSetString">
            <summary>设置 BaseAttribute.set_CacheRegion(String value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimBaseAttribute.CacheSetCacheEnum">
            <summary>设置 BaseAttribute.set_Cache(CacheEnum value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimBaseAttribute.Constructor">
            <summary>设置 BaseAttribute.BaseAttribute() 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.ShimBaseAttribute.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimBaseAttribute.AllInstances.CacheGet">
            <summary>设置 BaseAttribute.get_Cache() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimBaseAttribute.AllInstances.CacheRegionGet">
            <summary>设置 BaseAttribute.get_CacheRegion() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimBaseAttribute.AllInstances.CacheRegionSetString">
            <summary>设置 BaseAttribute.set_CacheRegion(String value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimBaseAttribute.AllInstances.CacheSetCacheEnum">
            <summary>设置 BaseAttribute.set_Cache(CacheEnum value) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.ShimBelongsToAttribute">
            <summary>Castle.ActiveRecord.BelongsToAttribute 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimBelongsToAttribute.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimBelongsToAttribute.#ctor(Castle.ActiveRecord.BelongsToAttribute)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimBelongsToAttribute.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimBelongsToAttribute.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimBelongsToAttribute.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimBelongsToAttribute.CascadeGet">
            <summary>设置 BelongsToAttribute.get_Cascade() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimBelongsToAttribute.CascadeSetCascadeEnum">
            <summary>设置 BelongsToAttribute.set_Cascade(CascadeEnum value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimBelongsToAttribute.ColumnGet">
            <summary>设置 BelongsToAttribute.get_Column() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimBelongsToAttribute.ColumnSetString">
            <summary>设置 BelongsToAttribute.set_Column(String value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimBelongsToAttribute.CompositeKeyColumnsGet">
            <summary>设置 BelongsToAttribute.get_CompositeKeyColumns() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimBelongsToAttribute.CompositeKeyColumnsSetStringArray">
            <summary>设置 BelongsToAttribute.set_CompositeKeyColumns(String[] value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimBelongsToAttribute.Constructor">
            <summary>设置 BelongsToAttribute.BelongsToAttribute() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimBelongsToAttribute.ConstructorString">
            <summary>设置 BelongsToAttribute.BelongsToAttribute(String column) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimBelongsToAttribute.FetchGet">
            <summary>设置 BelongsToAttribute.get_Fetch() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimBelongsToAttribute.FetchSetFetchEnum">
            <summary>设置 BelongsToAttribute.set_Fetch(FetchEnum value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimBelongsToAttribute.ForeignKeyGet">
            <summary>设置 BelongsToAttribute.get_ForeignKey() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimBelongsToAttribute.ForeignKeySetString">
            <summary>设置 BelongsToAttribute.set_ForeignKey(String value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimBelongsToAttribute.IndexGet">
            <summary>设置 BelongsToAttribute.get_Index() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimBelongsToAttribute.IndexSetString">
            <summary>设置 BelongsToAttribute.set_Index(String value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimBelongsToAttribute.InsertGet">
            <summary>设置 BelongsToAttribute.get_Insert() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimBelongsToAttribute.InsertSetBoolean">
            <summary>设置 BelongsToAttribute.set_Insert(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimBelongsToAttribute.LazyGet">
            <summary>设置 BelongsToAttribute.get_Lazy() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimBelongsToAttribute.LazySetFetchWhen">
            <summary>设置 BelongsToAttribute.set_Lazy(FetchWhen value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimBelongsToAttribute.NotFoundBehaviourGet">
            <summary>设置 BelongsToAttribute.get_NotFoundBehaviour() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimBelongsToAttribute.NotFoundBehaviourSetNotFoundBehaviour">
            <summary>设置 BelongsToAttribute.set_NotFoundBehaviour(NotFoundBehaviour value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimBelongsToAttribute.NotNullGet">
            <summary>设置 BelongsToAttribute.get_NotNull() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimBelongsToAttribute.NotNullSetBoolean">
            <summary>设置 BelongsToAttribute.set_NotNull(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimBelongsToAttribute.OuterJoinGet">
            <summary>设置 BelongsToAttribute.get_OuterJoin() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimBelongsToAttribute.OuterJoinSetOuterJoinEnum">
            <summary>设置 BelongsToAttribute.set_OuterJoin(OuterJoinEnum value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimBelongsToAttribute.PropertyRefGet">
            <summary>设置 BelongsToAttribute.get_PropertyRef() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimBelongsToAttribute.PropertyRefSetString">
            <summary>设置 BelongsToAttribute.set_PropertyRef(String value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimBelongsToAttribute.TypeGet">
            <summary>设置 BelongsToAttribute.get_Type() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimBelongsToAttribute.TypeSetType">
            <summary>设置 BelongsToAttribute.set_Type(Type value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimBelongsToAttribute.UniqueGet">
            <summary>设置 BelongsToAttribute.get_Unique() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimBelongsToAttribute.UniqueKeyGet">
            <summary>设置 BelongsToAttribute.get_UniqueKey() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimBelongsToAttribute.UniqueKeySetString">
            <summary>设置 BelongsToAttribute.set_UniqueKey(String value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimBelongsToAttribute.UniqueSetBoolean">
            <summary>设置 BelongsToAttribute.set_Unique(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimBelongsToAttribute.UpdateGet">
            <summary>设置 BelongsToAttribute.get_Update() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimBelongsToAttribute.UpdateSetBoolean">
            <summary>设置 BelongsToAttribute.set_Update(Boolean value) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.ShimBelongsToAttribute.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimBelongsToAttribute.AllInstances.CascadeGet">
            <summary>设置 BelongsToAttribute.get_Cascade() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimBelongsToAttribute.AllInstances.CascadeSetCascadeEnum">
            <summary>设置 BelongsToAttribute.set_Cascade(CascadeEnum value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimBelongsToAttribute.AllInstances.ColumnGet">
            <summary>设置 BelongsToAttribute.get_Column() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimBelongsToAttribute.AllInstances.ColumnSetString">
            <summary>设置 BelongsToAttribute.set_Column(String value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimBelongsToAttribute.AllInstances.CompositeKeyColumnsGet">
            <summary>设置 BelongsToAttribute.get_CompositeKeyColumns() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimBelongsToAttribute.AllInstances.CompositeKeyColumnsSetStringArray">
            <summary>设置 BelongsToAttribute.set_CompositeKeyColumns(String[] value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimBelongsToAttribute.AllInstances.FetchGet">
            <summary>设置 BelongsToAttribute.get_Fetch() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimBelongsToAttribute.AllInstances.FetchSetFetchEnum">
            <summary>设置 BelongsToAttribute.set_Fetch(FetchEnum value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimBelongsToAttribute.AllInstances.ForeignKeyGet">
            <summary>设置 BelongsToAttribute.get_ForeignKey() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimBelongsToAttribute.AllInstances.ForeignKeySetString">
            <summary>设置 BelongsToAttribute.set_ForeignKey(String value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimBelongsToAttribute.AllInstances.IndexGet">
            <summary>设置 BelongsToAttribute.get_Index() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimBelongsToAttribute.AllInstances.IndexSetString">
            <summary>设置 BelongsToAttribute.set_Index(String value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimBelongsToAttribute.AllInstances.InsertGet">
            <summary>设置 BelongsToAttribute.get_Insert() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimBelongsToAttribute.AllInstances.InsertSetBoolean">
            <summary>设置 BelongsToAttribute.set_Insert(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimBelongsToAttribute.AllInstances.LazyGet">
            <summary>设置 BelongsToAttribute.get_Lazy() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimBelongsToAttribute.AllInstances.LazySetFetchWhen">
            <summary>设置 BelongsToAttribute.set_Lazy(FetchWhen value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimBelongsToAttribute.AllInstances.NotFoundBehaviourGet">
            <summary>设置 BelongsToAttribute.get_NotFoundBehaviour() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimBelongsToAttribute.AllInstances.NotFoundBehaviourSetNotFoundBehaviour">
            <summary>设置 BelongsToAttribute.set_NotFoundBehaviour(NotFoundBehaviour value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimBelongsToAttribute.AllInstances.NotNullGet">
            <summary>设置 BelongsToAttribute.get_NotNull() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimBelongsToAttribute.AllInstances.NotNullSetBoolean">
            <summary>设置 BelongsToAttribute.set_NotNull(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimBelongsToAttribute.AllInstances.OuterJoinGet">
            <summary>设置 BelongsToAttribute.get_OuterJoin() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimBelongsToAttribute.AllInstances.OuterJoinSetOuterJoinEnum">
            <summary>设置 BelongsToAttribute.set_OuterJoin(OuterJoinEnum value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimBelongsToAttribute.AllInstances.PropertyRefGet">
            <summary>设置 BelongsToAttribute.get_PropertyRef() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimBelongsToAttribute.AllInstances.PropertyRefSetString">
            <summary>设置 BelongsToAttribute.set_PropertyRef(String value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimBelongsToAttribute.AllInstances.TypeGet">
            <summary>设置 BelongsToAttribute.get_Type() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimBelongsToAttribute.AllInstances.TypeSetType">
            <summary>设置 BelongsToAttribute.set_Type(Type value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimBelongsToAttribute.AllInstances.UniqueGet">
            <summary>设置 BelongsToAttribute.get_Unique() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimBelongsToAttribute.AllInstances.UniqueKeyGet">
            <summary>设置 BelongsToAttribute.get_UniqueKey() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimBelongsToAttribute.AllInstances.UniqueKeySetString">
            <summary>设置 BelongsToAttribute.set_UniqueKey(String value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimBelongsToAttribute.AllInstances.UniqueSetBoolean">
            <summary>设置 BelongsToAttribute.set_Unique(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimBelongsToAttribute.AllInstances.UpdateGet">
            <summary>设置 BelongsToAttribute.get_Update() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimBelongsToAttribute.AllInstances.UpdateSetBoolean">
            <summary>设置 BelongsToAttribute.set_Update(Boolean value) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.ShimCollectionIDAttribute">
            <summary>Castle.ActiveRecord.CollectionIDAttribute 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimCollectionIDAttribute.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimCollectionIDAttribute.#ctor(Castle.ActiveRecord.CollectionIDAttribute)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimCollectionIDAttribute.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimCollectionIDAttribute.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimCollectionIDAttribute.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimCollectionIDAttribute.ColumnGet">
            <summary>设置 CollectionIDAttribute.get_Column() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimCollectionIDAttribute.ColumnSetString">
            <summary>设置 CollectionIDAttribute.set_Column(String value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimCollectionIDAttribute.ColumnTypeGet">
            <summary>设置 CollectionIDAttribute.get_ColumnType() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimCollectionIDAttribute.ColumnTypeSetString">
            <summary>设置 CollectionIDAttribute.set_ColumnType(String value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimCollectionIDAttribute.ConstructorCollectionIDTypeStringString">
            <summary>设置 CollectionIDAttribute.CollectionIDAttribute(CollectionIDType generator, String column, String ColumnType) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimCollectionIDAttribute.GeneratorGet">
            <summary>设置 CollectionIDAttribute.get_Generator() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimCollectionIDAttribute.GeneratorSetCollectionIDType">
            <summary>设置 CollectionIDAttribute.set_Generator(CollectionIDType value) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.ShimCollectionIDAttribute.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimCollectionIDAttribute.AllInstances.ColumnGet">
            <summary>设置 CollectionIDAttribute.get_Column() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimCollectionIDAttribute.AllInstances.ColumnSetString">
            <summary>设置 CollectionIDAttribute.set_Column(String value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimCollectionIDAttribute.AllInstances.ColumnTypeGet">
            <summary>设置 CollectionIDAttribute.get_ColumnType() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimCollectionIDAttribute.AllInstances.ColumnTypeSetString">
            <summary>设置 CollectionIDAttribute.set_ColumnType(String value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimCollectionIDAttribute.AllInstances.GeneratorGet">
            <summary>设置 CollectionIDAttribute.get_Generator() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimCollectionIDAttribute.AllInstances.GeneratorSetCollectionIDType">
            <summary>设置 CollectionIDAttribute.set_Generator(CollectionIDType value) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.ShimCompositeKeyAttribute">
            <summary>Castle.ActiveRecord.CompositeKeyAttribute 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimCompositeKeyAttribute.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimCompositeKeyAttribute.#ctor(Castle.ActiveRecord.CompositeKeyAttribute)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimCompositeKeyAttribute.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimCompositeKeyAttribute.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimCompositeKeyAttribute.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimCompositeKeyAttribute.Constructor">
            <summary>设置 CompositeKeyAttribute.CompositeKeyAttribute() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimCompositeKeyAttribute.UnsavedValueGet">
            <summary>设置 CompositeKeyAttribute.get_UnsavedValue() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimCompositeKeyAttribute.UnsavedValueSetString">
            <summary>设置 CompositeKeyAttribute.set_UnsavedValue(String value) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.ShimCompositeKeyAttribute.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimCompositeKeyAttribute.AllInstances.UnsavedValueGet">
            <summary>设置 CompositeKeyAttribute.get_UnsavedValue() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimCompositeKeyAttribute.AllInstances.UnsavedValueSetString">
            <summary>设置 CompositeKeyAttribute.set_UnsavedValue(String value) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.ShimCompositeUserTypeAttribute">
            <summary>Castle.ActiveRecord.CompositeUserTypeAttribute 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimCompositeUserTypeAttribute.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimCompositeUserTypeAttribute.#ctor(Castle.ActiveRecord.CompositeUserTypeAttribute)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimCompositeUserTypeAttribute.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimCompositeUserTypeAttribute.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimCompositeUserTypeAttribute.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimCompositeUserTypeAttribute.CheckCompositeTypeType">
            <summary>设置 CompositeUserTypeAttribute.CheckCompositeType(Type t) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimCompositeUserTypeAttribute.ColumnNamesGet">
            <summary>设置 CompositeUserTypeAttribute.get_ColumnNames() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimCompositeUserTypeAttribute.ColumnNamesSetStringArray">
            <summary>设置 CompositeUserTypeAttribute.set_ColumnNames(String[] value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimCompositeUserTypeAttribute.CompositeTypeGet">
            <summary>设置 CompositeUserTypeAttribute.get_CompositeType() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimCompositeUserTypeAttribute.CompositeTypeSetType">
            <summary>设置 CompositeUserTypeAttribute.set_CompositeType(Type value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimCompositeUserTypeAttribute.Constructor">
            <summary>设置 CompositeUserTypeAttribute.CompositeUserTypeAttribute() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimCompositeUserTypeAttribute.ConstructorStringStringArray">
            <summary>设置 CompositeUserTypeAttribute.CompositeUserTypeAttribute(String compositeTypeName, String[] columnNames) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimCompositeUserTypeAttribute.ConstructorTypeStringArray">
            <summary>设置 CompositeUserTypeAttribute.CompositeUserTypeAttribute(Type compositeType, String[] columnNames) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimCompositeUserTypeAttribute.InsertGet">
            <summary>设置 CompositeUserTypeAttribute.get_Insert() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimCompositeUserTypeAttribute.InsertSetBoolean">
            <summary>设置 CompositeUserTypeAttribute.set_Insert(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimCompositeUserTypeAttribute.LengthGet">
            <summary>设置 CompositeUserTypeAttribute.get_Length() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimCompositeUserTypeAttribute.LengthSetInt32Array">
            <summary>设置 CompositeUserTypeAttribute.set_Length(Int32[] value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimCompositeUserTypeAttribute.OptimisticLockGet">
            <summary>设置 CompositeUserTypeAttribute.get_OptimisticLock() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimCompositeUserTypeAttribute.OptimisticLockSetBoolean">
            <summary>设置 CompositeUserTypeAttribute.set_OptimisticLock(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimCompositeUserTypeAttribute.UpdateGet">
            <summary>设置 CompositeUserTypeAttribute.get_Update() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimCompositeUserTypeAttribute.UpdateSetBoolean">
            <summary>设置 CompositeUserTypeAttribute.set_Update(Boolean value) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.ShimCompositeUserTypeAttribute.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimCompositeUserTypeAttribute.AllInstances.CheckCompositeTypeType">
            <summary>设置 CompositeUserTypeAttribute.CheckCompositeType(Type t) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimCompositeUserTypeAttribute.AllInstances.ColumnNamesGet">
            <summary>设置 CompositeUserTypeAttribute.get_ColumnNames() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimCompositeUserTypeAttribute.AllInstances.ColumnNamesSetStringArray">
            <summary>设置 CompositeUserTypeAttribute.set_ColumnNames(String[] value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimCompositeUserTypeAttribute.AllInstances.CompositeTypeGet">
            <summary>设置 CompositeUserTypeAttribute.get_CompositeType() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimCompositeUserTypeAttribute.AllInstances.CompositeTypeSetType">
            <summary>设置 CompositeUserTypeAttribute.set_CompositeType(Type value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimCompositeUserTypeAttribute.AllInstances.InsertGet">
            <summary>设置 CompositeUserTypeAttribute.get_Insert() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimCompositeUserTypeAttribute.AllInstances.InsertSetBoolean">
            <summary>设置 CompositeUserTypeAttribute.set_Insert(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimCompositeUserTypeAttribute.AllInstances.LengthGet">
            <summary>设置 CompositeUserTypeAttribute.get_Length() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimCompositeUserTypeAttribute.AllInstances.LengthSetInt32Array">
            <summary>设置 CompositeUserTypeAttribute.set_Length(Int32[] value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimCompositeUserTypeAttribute.AllInstances.OptimisticLockGet">
            <summary>设置 CompositeUserTypeAttribute.get_OptimisticLock() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimCompositeUserTypeAttribute.AllInstances.OptimisticLockSetBoolean">
            <summary>设置 CompositeUserTypeAttribute.set_OptimisticLock(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimCompositeUserTypeAttribute.AllInstances.UpdateGet">
            <summary>设置 CompositeUserTypeAttribute.get_Update() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimCompositeUserTypeAttribute.AllInstances.UpdateSetBoolean">
            <summary>设置 CompositeUserTypeAttribute.set_Update(Boolean value) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.ShimConversationCanceledEventArgs">
            <summary>Castle.ActiveRecord.ConversationCanceledEventArgs 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimConversationCanceledEventArgs.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimConversationCanceledEventArgs.#ctor(Castle.ActiveRecord.ConversationCanceledEventArgs)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimConversationCanceledEventArgs.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimConversationCanceledEventArgs.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimConversationCanceledEventArgs.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimConversationCanceledEventArgs.CanceledByUserGet">
            <summary>设置 ConversationCanceledEventArgs.get_CanceledByUser() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimConversationCanceledEventArgs.CanceledByUserSetBoolean">
            <summary>设置 ConversationCanceledEventArgs.set_CanceledByUser(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimConversationCanceledEventArgs.ConstructorBooleanException">
            <summary>设置 ConversationCanceledEventArgs.ConversationCanceledEventArgs(Boolean canceledByUser, Exception exception) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimConversationCanceledEventArgs.ExceptionGet">
            <summary>设置 ConversationCanceledEventArgs.get_Exception() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimConversationCanceledEventArgs.ExceptionSetException">
            <summary>设置 ConversationCanceledEventArgs.set_Exception(Exception value) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.ShimConversationCanceledEventArgs.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimConversationCanceledEventArgs.AllInstances.CanceledByUserGet">
            <summary>设置 ConversationCanceledEventArgs.get_CanceledByUser() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimConversationCanceledEventArgs.AllInstances.CanceledByUserSetBoolean">
            <summary>设置 ConversationCanceledEventArgs.set_CanceledByUser(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimConversationCanceledEventArgs.AllInstances.ExceptionGet">
            <summary>设置 ConversationCanceledEventArgs.get_Exception() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimConversationCanceledEventArgs.AllInstances.ExceptionSetException">
            <summary>设置 ConversationCanceledEventArgs.set_Exception(Exception value) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.ShimConversationalScope">
            <summary>Castle.ActiveRecord.ConversationalScope 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimConversationalScope.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimConversationalScope.#ctor(Castle.ActiveRecord.ConversationalScope)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimConversationalScope.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimConversationalScope.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimConversationalScope.Bind(Castle.ActiveRecord.ISessionScope)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimConversationalScope.Bind(System.IDisposable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimConversationalScope.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimConversationalScope.ConstructorIScopeConversation">
            <summary>设置 ConversationalScope.ConversationalScope(IScopeConversation conversation) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimConversationalScope.FailSessionISession">
            <summary>设置 ConversationalScope.FailSession(ISession session) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimConversationalScope.OpenSessionISessionFactoryIInterceptor">
            <summary>设置 ConversationalScope.OpenSession(ISessionFactory sessionFactory, IInterceptor interceptor) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimConversationalScope.WantsToCreateTheSessionGet">
            <summary>设置 ConversationalScope.get_WantsToCreateTheSession() 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.ShimConversationalScope.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimConversationalScope.AllInstances.FailSessionISession">
            <summary>设置 ConversationalScope.FailSession(ISession session) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimConversationalScope.AllInstances.OpenSessionISessionFactoryIInterceptor">
            <summary>设置 ConversationalScope.OpenSession(ISessionFactory sessionFactory, IInterceptor interceptor) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimConversationalScope.AllInstances.WantsToCreateTheSessionGet">
            <summary>设置 ConversationalScope.get_WantsToCreateTheSession() 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.ShimEventListenerAttribute">
            <summary>Castle.ActiveRecord.EventListenerAttribute 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimEventListenerAttribute.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimEventListenerAttribute.#ctor(Castle.ActiveRecord.EventListenerAttribute)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimEventListenerAttribute.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimEventListenerAttribute.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimEventListenerAttribute.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimEventListenerAttribute.Constructor">
            <summary>设置 EventListenerAttribute.EventListenerAttribute() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimEventListenerAttribute.ExcludeGet">
            <summary>设置 EventListenerAttribute.get_Exclude() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimEventListenerAttribute.ExcludeSetTypeArray">
            <summary>设置 EventListenerAttribute.set_Exclude(Type[] value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimEventListenerAttribute.IgnoreGet">
            <summary>设置 EventListenerAttribute.get_Ignore() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimEventListenerAttribute.IgnoreSetBoolean">
            <summary>设置 EventListenerAttribute.set_Ignore(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimEventListenerAttribute.IncludeGet">
            <summary>设置 EventListenerAttribute.get_Include() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimEventListenerAttribute.IncludeSetTypeArray">
            <summary>设置 EventListenerAttribute.set_Include(Type[] value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimEventListenerAttribute.ReplaceExistingGet">
            <summary>设置 EventListenerAttribute.get_ReplaceExisting() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimEventListenerAttribute.ReplaceExistingSetBoolean">
            <summary>设置 EventListenerAttribute.set_ReplaceExisting(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimEventListenerAttribute.SingletonGet">
            <summary>设置 EventListenerAttribute.get_Singleton() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimEventListenerAttribute.SingletonSetBoolean">
            <summary>设置 EventListenerAttribute.set_Singleton(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimEventListenerAttribute.SkipEventGet">
            <summary>设置 EventListenerAttribute.get_SkipEvent() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimEventListenerAttribute.SkipEventSetTypeArray">
            <summary>设置 EventListenerAttribute.set_SkipEvent(Type[] value) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.ShimEventListenerAttribute.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimEventListenerAttribute.AllInstances.ExcludeGet">
            <summary>设置 EventListenerAttribute.get_Exclude() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimEventListenerAttribute.AllInstances.ExcludeSetTypeArray">
            <summary>设置 EventListenerAttribute.set_Exclude(Type[] value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimEventListenerAttribute.AllInstances.IgnoreGet">
            <summary>设置 EventListenerAttribute.get_Ignore() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimEventListenerAttribute.AllInstances.IgnoreSetBoolean">
            <summary>设置 EventListenerAttribute.set_Ignore(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimEventListenerAttribute.AllInstances.IncludeGet">
            <summary>设置 EventListenerAttribute.get_Include() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimEventListenerAttribute.AllInstances.IncludeSetTypeArray">
            <summary>设置 EventListenerAttribute.set_Include(Type[] value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimEventListenerAttribute.AllInstances.ReplaceExistingGet">
            <summary>设置 EventListenerAttribute.get_ReplaceExisting() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimEventListenerAttribute.AllInstances.ReplaceExistingSetBoolean">
            <summary>设置 EventListenerAttribute.set_ReplaceExisting(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimEventListenerAttribute.AllInstances.SingletonGet">
            <summary>设置 EventListenerAttribute.get_Singleton() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimEventListenerAttribute.AllInstances.SingletonSetBoolean">
            <summary>设置 EventListenerAttribute.set_Singleton(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimEventListenerAttribute.AllInstances.SkipEventGet">
            <summary>设置 EventListenerAttribute.get_SkipEvent() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimEventListenerAttribute.AllInstances.SkipEventSetTypeArray">
            <summary>设置 EventListenerAttribute.set_SkipEvent(Type[] value) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.ShimFieldAttribute">
            <summary>Castle.ActiveRecord.FieldAttribute 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimFieldAttribute.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimFieldAttribute.#ctor(Castle.ActiveRecord.FieldAttribute)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimFieldAttribute.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimFieldAttribute.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimFieldAttribute.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimFieldAttribute.CheckGet">
            <summary>设置 FieldAttribute.get_Check() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimFieldAttribute.CheckSetString">
            <summary>设置 FieldAttribute.set_Check(String value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimFieldAttribute.ColumnGet">
            <summary>设置 FieldAttribute.get_Column() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimFieldAttribute.ColumnSetString">
            <summary>设置 FieldAttribute.set_Column(String value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimFieldAttribute.ColumnTypeGet">
            <summary>设置 FieldAttribute.get_ColumnType() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimFieldAttribute.ColumnTypeSetString">
            <summary>设置 FieldAttribute.set_ColumnType(String value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimFieldAttribute.Constructor">
            <summary>设置 FieldAttribute.FieldAttribute() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimFieldAttribute.ConstructorString">
            <summary>设置 FieldAttribute.FieldAttribute(String column) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimFieldAttribute.ConstructorStringString">
            <summary>设置 FieldAttribute.FieldAttribute(String column, String type) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimFieldAttribute.DefaultGet">
            <summary>设置 FieldAttribute.get_Default() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimFieldAttribute.DefaultSetString">
            <summary>设置 FieldAttribute.set_Default(String value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimFieldAttribute.FormulaGet">
            <summary>设置 FieldAttribute.get_Formula() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimFieldAttribute.FormulaSetString">
            <summary>设置 FieldAttribute.set_Formula(String value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimFieldAttribute.IndexGet">
            <summary>设置 FieldAttribute.get_Index() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimFieldAttribute.IndexSetString">
            <summary>设置 FieldAttribute.set_Index(String value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimFieldAttribute.InsertGet">
            <summary>设置 FieldAttribute.get_Insert() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimFieldAttribute.InsertSetBoolean">
            <summary>设置 FieldAttribute.set_Insert(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimFieldAttribute.LazyGet">
            <summary>设置 FieldAttribute.get_Lazy() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimFieldAttribute.LazySetBoolean">
            <summary>设置 FieldAttribute.set_Lazy(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimFieldAttribute.LengthGet">
            <summary>设置 FieldAttribute.get_Length() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimFieldAttribute.LengthSetInt32">
            <summary>设置 FieldAttribute.set_Length(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimFieldAttribute.NotNullGet">
            <summary>设置 FieldAttribute.get_NotNull() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimFieldAttribute.NotNullSetBoolean">
            <summary>设置 FieldAttribute.set_NotNull(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimFieldAttribute.SqlTypeGet">
            <summary>设置 FieldAttribute.get_SqlType() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimFieldAttribute.SqlTypeSetString">
            <summary>设置 FieldAttribute.set_SqlType(String value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimFieldAttribute.UniqueGet">
            <summary>设置 FieldAttribute.get_Unique() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimFieldAttribute.UniqueKeyGet">
            <summary>设置 FieldAttribute.get_UniqueKey() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimFieldAttribute.UniqueKeySetString">
            <summary>设置 FieldAttribute.set_UniqueKey(String value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimFieldAttribute.UniqueSetBoolean">
            <summary>设置 FieldAttribute.set_Unique(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimFieldAttribute.UpdateGet">
            <summary>设置 FieldAttribute.get_Update() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimFieldAttribute.UpdateSetBoolean">
            <summary>设置 FieldAttribute.set_Update(Boolean value) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.ShimFieldAttribute.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimFieldAttribute.AllInstances.CheckGet">
            <summary>设置 FieldAttribute.get_Check() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimFieldAttribute.AllInstances.CheckSetString">
            <summary>设置 FieldAttribute.set_Check(String value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimFieldAttribute.AllInstances.ColumnGet">
            <summary>设置 FieldAttribute.get_Column() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimFieldAttribute.AllInstances.ColumnSetString">
            <summary>设置 FieldAttribute.set_Column(String value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimFieldAttribute.AllInstances.ColumnTypeGet">
            <summary>设置 FieldAttribute.get_ColumnType() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimFieldAttribute.AllInstances.ColumnTypeSetString">
            <summary>设置 FieldAttribute.set_ColumnType(String value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimFieldAttribute.AllInstances.DefaultGet">
            <summary>设置 FieldAttribute.get_Default() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimFieldAttribute.AllInstances.DefaultSetString">
            <summary>设置 FieldAttribute.set_Default(String value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimFieldAttribute.AllInstances.FormulaGet">
            <summary>设置 FieldAttribute.get_Formula() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimFieldAttribute.AllInstances.FormulaSetString">
            <summary>设置 FieldAttribute.set_Formula(String value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimFieldAttribute.AllInstances.IndexGet">
            <summary>设置 FieldAttribute.get_Index() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimFieldAttribute.AllInstances.IndexSetString">
            <summary>设置 FieldAttribute.set_Index(String value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimFieldAttribute.AllInstances.InsertGet">
            <summary>设置 FieldAttribute.get_Insert() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimFieldAttribute.AllInstances.InsertSetBoolean">
            <summary>设置 FieldAttribute.set_Insert(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimFieldAttribute.AllInstances.LazyGet">
            <summary>设置 FieldAttribute.get_Lazy() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimFieldAttribute.AllInstances.LazySetBoolean">
            <summary>设置 FieldAttribute.set_Lazy(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimFieldAttribute.AllInstances.LengthGet">
            <summary>设置 FieldAttribute.get_Length() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimFieldAttribute.AllInstances.LengthSetInt32">
            <summary>设置 FieldAttribute.set_Length(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimFieldAttribute.AllInstances.NotNullGet">
            <summary>设置 FieldAttribute.get_NotNull() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimFieldAttribute.AllInstances.NotNullSetBoolean">
            <summary>设置 FieldAttribute.set_NotNull(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimFieldAttribute.AllInstances.SqlTypeGet">
            <summary>设置 FieldAttribute.get_SqlType() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimFieldAttribute.AllInstances.SqlTypeSetString">
            <summary>设置 FieldAttribute.set_SqlType(String value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimFieldAttribute.AllInstances.UniqueGet">
            <summary>设置 FieldAttribute.get_Unique() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimFieldAttribute.AllInstances.UniqueKeyGet">
            <summary>设置 FieldAttribute.get_UniqueKey() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimFieldAttribute.AllInstances.UniqueKeySetString">
            <summary>设置 FieldAttribute.set_UniqueKey(String value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimFieldAttribute.AllInstances.UniqueSetBoolean">
            <summary>设置 FieldAttribute.set_Unique(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimFieldAttribute.AllInstances.UpdateGet">
            <summary>设置 FieldAttribute.get_Update() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimFieldAttribute.AllInstances.UpdateSetBoolean">
            <summary>设置 FieldAttribute.set_Update(Boolean value) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.ShimHasAndBelongsToManyAttribute">
            <summary>Castle.ActiveRecord.HasAndBelongsToManyAttribute 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimHasAndBelongsToManyAttribute.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimHasAndBelongsToManyAttribute.#ctor(Castle.ActiveRecord.HasAndBelongsToManyAttribute)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimHasAndBelongsToManyAttribute.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimHasAndBelongsToManyAttribute.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimHasAndBelongsToManyAttribute.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimHasAndBelongsToManyAttribute.CollectionTypeGet">
            <summary>设置 HasAndBelongsToManyAttribute.get_CollectionType() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimHasAndBelongsToManyAttribute.CollectionTypeSetType">
            <summary>设置 HasAndBelongsToManyAttribute.set_CollectionType(Type value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimHasAndBelongsToManyAttribute.ColumnKeyGet">
            <summary>设置 HasAndBelongsToManyAttribute.get_ColumnKey() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimHasAndBelongsToManyAttribute.ColumnKeySetString">
            <summary>设置 HasAndBelongsToManyAttribute.set_ColumnKey(String value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimHasAndBelongsToManyAttribute.ColumnRefGet">
            <summary>设置 HasAndBelongsToManyAttribute.get_ColumnRef() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimHasAndBelongsToManyAttribute.ColumnRefSetString">
            <summary>设置 HasAndBelongsToManyAttribute.set_ColumnRef(String value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimHasAndBelongsToManyAttribute.CompositeKeyColumnKeysGet">
            <summary>设置 HasAndBelongsToManyAttribute.get_CompositeKeyColumnKeys() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimHasAndBelongsToManyAttribute.CompositeKeyColumnKeysSetStringArray">
            <summary>设置 HasAndBelongsToManyAttribute.set_CompositeKeyColumnKeys(String[] value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimHasAndBelongsToManyAttribute.CompositeKeyColumnRefsGet">
            <summary>设置 HasAndBelongsToManyAttribute.get_CompositeKeyColumnRefs() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimHasAndBelongsToManyAttribute.CompositeKeyColumnRefsSetStringArray">
            <summary>设置 HasAndBelongsToManyAttribute.set_CompositeKeyColumnRefs(String[] value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimHasAndBelongsToManyAttribute.Constructor">
            <summary>设置 HasAndBelongsToManyAttribute.HasAndBelongsToManyAttribute() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimHasAndBelongsToManyAttribute.ConstructorType">
            <summary>设置 HasAndBelongsToManyAttribute.HasAndBelongsToManyAttribute(Type mapType) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimHasAndBelongsToManyAttribute.ConstructorTypeRelationType">
            <summary>设置 HasAndBelongsToManyAttribute.HasAndBelongsToManyAttribute(Type mapType, RelationType type) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimHasAndBelongsToManyAttribute.FetchGet">
            <summary>设置 HasAndBelongsToManyAttribute.get_Fetch() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimHasAndBelongsToManyAttribute.FetchSetFetchEnum">
            <summary>设置 HasAndBelongsToManyAttribute.set_Fetch(FetchEnum value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimHasAndBelongsToManyAttribute.ForeignKeyGet">
            <summary>设置 HasAndBelongsToManyAttribute.get_ForeignKey() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimHasAndBelongsToManyAttribute.ForeignKeySetString">
            <summary>设置 HasAndBelongsToManyAttribute.set_ForeignKey(String value) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.ShimHasAndBelongsToManyAttribute.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimHasAndBelongsToManyAttribute.AllInstances.CollectionTypeGet">
            <summary>设置 HasAndBelongsToManyAttribute.get_CollectionType() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimHasAndBelongsToManyAttribute.AllInstances.CollectionTypeSetType">
            <summary>设置 HasAndBelongsToManyAttribute.set_CollectionType(Type value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimHasAndBelongsToManyAttribute.AllInstances.ColumnKeyGet">
            <summary>设置 HasAndBelongsToManyAttribute.get_ColumnKey() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimHasAndBelongsToManyAttribute.AllInstances.ColumnKeySetString">
            <summary>设置 HasAndBelongsToManyAttribute.set_ColumnKey(String value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimHasAndBelongsToManyAttribute.AllInstances.ColumnRefGet">
            <summary>设置 HasAndBelongsToManyAttribute.get_ColumnRef() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimHasAndBelongsToManyAttribute.AllInstances.ColumnRefSetString">
            <summary>设置 HasAndBelongsToManyAttribute.set_ColumnRef(String value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimHasAndBelongsToManyAttribute.AllInstances.CompositeKeyColumnKeysGet">
            <summary>设置 HasAndBelongsToManyAttribute.get_CompositeKeyColumnKeys() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimHasAndBelongsToManyAttribute.AllInstances.CompositeKeyColumnKeysSetStringArray">
            <summary>设置 HasAndBelongsToManyAttribute.set_CompositeKeyColumnKeys(String[] value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimHasAndBelongsToManyAttribute.AllInstances.CompositeKeyColumnRefsGet">
            <summary>设置 HasAndBelongsToManyAttribute.get_CompositeKeyColumnRefs() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimHasAndBelongsToManyAttribute.AllInstances.CompositeKeyColumnRefsSetStringArray">
            <summary>设置 HasAndBelongsToManyAttribute.set_CompositeKeyColumnRefs(String[] value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimHasAndBelongsToManyAttribute.AllInstances.FetchGet">
            <summary>设置 HasAndBelongsToManyAttribute.get_Fetch() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimHasAndBelongsToManyAttribute.AllInstances.FetchSetFetchEnum">
            <summary>设置 HasAndBelongsToManyAttribute.set_Fetch(FetchEnum value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimHasAndBelongsToManyAttribute.AllInstances.ForeignKeyGet">
            <summary>设置 HasAndBelongsToManyAttribute.get_ForeignKey() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimHasAndBelongsToManyAttribute.AllInstances.ForeignKeySetString">
            <summary>设置 HasAndBelongsToManyAttribute.set_ForeignKey(String value) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.ShimHasManyAttribute">
            <summary>Castle.ActiveRecord.HasManyAttribute 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimHasManyAttribute.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimHasManyAttribute.#ctor(Castle.ActiveRecord.HasManyAttribute)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimHasManyAttribute.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimHasManyAttribute.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimHasManyAttribute.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimHasManyAttribute.CollectionTypeGet">
            <summary>设置 HasManyAttribute.get_CollectionType() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimHasManyAttribute.CollectionTypeSetType">
            <summary>设置 HasManyAttribute.set_CollectionType(Type value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimHasManyAttribute.ColumnKeyGet">
            <summary>设置 HasManyAttribute.get_ColumnKey() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimHasManyAttribute.ColumnKeySetString">
            <summary>设置 HasManyAttribute.set_ColumnKey(String value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimHasManyAttribute.CompositeKeyColumnKeysGet">
            <summary>设置 HasManyAttribute.get_CompositeKeyColumnKeys() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimHasManyAttribute.CompositeKeyColumnKeysSetStringArray">
            <summary>设置 HasManyAttribute.set_CompositeKeyColumnKeys(String[] value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimHasManyAttribute.Constructor">
            <summary>设置 HasManyAttribute.HasManyAttribute() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimHasManyAttribute.ConstructorType">
            <summary>设置 HasManyAttribute.HasManyAttribute(Type mapType) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimHasManyAttribute.ConstructorTypeStringString">
            <summary>设置 HasManyAttribute.HasManyAttribute(Type mapType, String keyColumn, String table) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimHasManyAttribute.DependentObjectsGet">
            <summary>设置 HasManyAttribute.get_DependentObjects() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimHasManyAttribute.DependentObjectsSetBoolean">
            <summary>设置 HasManyAttribute.set_DependentObjects(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimHasManyAttribute.FetchGet">
            <summary>设置 HasManyAttribute.get_Fetch() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimHasManyAttribute.FetchSetFetchEnum">
            <summary>设置 HasManyAttribute.set_Fetch(FetchEnum value) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.ShimHasManyAttribute.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimHasManyAttribute.AllInstances.CollectionTypeGet">
            <summary>设置 HasManyAttribute.get_CollectionType() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimHasManyAttribute.AllInstances.CollectionTypeSetType">
            <summary>设置 HasManyAttribute.set_CollectionType(Type value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimHasManyAttribute.AllInstances.ColumnKeyGet">
            <summary>设置 HasManyAttribute.get_ColumnKey() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimHasManyAttribute.AllInstances.ColumnKeySetString">
            <summary>设置 HasManyAttribute.set_ColumnKey(String value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimHasManyAttribute.AllInstances.CompositeKeyColumnKeysGet">
            <summary>设置 HasManyAttribute.get_CompositeKeyColumnKeys() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimHasManyAttribute.AllInstances.CompositeKeyColumnKeysSetStringArray">
            <summary>设置 HasManyAttribute.set_CompositeKeyColumnKeys(String[] value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimHasManyAttribute.AllInstances.DependentObjectsGet">
            <summary>设置 HasManyAttribute.get_DependentObjects() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimHasManyAttribute.AllInstances.DependentObjectsSetBoolean">
            <summary>设置 HasManyAttribute.set_DependentObjects(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimHasManyAttribute.AllInstances.FetchGet">
            <summary>设置 HasManyAttribute.get_Fetch() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimHasManyAttribute.AllInstances.FetchSetFetchEnum">
            <summary>设置 HasManyAttribute.set_Fetch(FetchEnum value) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.ShimHasManyToAnyAttribute">
            <summary>Castle.ActiveRecord.HasManyToAnyAttribute 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimHasManyToAnyAttribute.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimHasManyToAnyAttribute.#ctor(Castle.ActiveRecord.HasManyToAnyAttribute)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimHasManyToAnyAttribute.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimHasManyToAnyAttribute.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimHasManyToAnyAttribute.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimHasManyToAnyAttribute.ConstructorTypeStringStringTypeStringString">
            <summary>设置 HasManyToAnyAttribute.HasManyToAnyAttribute(Type mapType, String keyColum, String table, Type idType, String typeColumn, String idColumn) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimHasManyToAnyAttribute.IdColumnGet">
            <summary>设置 HasManyToAnyAttribute.get_IdColumn() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimHasManyToAnyAttribute.IdColumnSetString">
            <summary>设置 HasManyToAnyAttribute.set_IdColumn(String value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimHasManyToAnyAttribute.IdTypeGet">
            <summary>设置 HasManyToAnyAttribute.get_IdType() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimHasManyToAnyAttribute.IdTypeSetType">
            <summary>设置 HasManyToAnyAttribute.set_IdType(Type value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimHasManyToAnyAttribute.MetaTypeGet">
            <summary>设置 HasManyToAnyAttribute.get_MetaType() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimHasManyToAnyAttribute.MetaTypeSetType">
            <summary>设置 HasManyToAnyAttribute.set_MetaType(Type value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimHasManyToAnyAttribute.TypeColumnGet">
            <summary>设置 HasManyToAnyAttribute.get_TypeColumn() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimHasManyToAnyAttribute.TypeColumnSetString">
            <summary>设置 HasManyToAnyAttribute.set_TypeColumn(String value) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.ShimHasManyToAnyAttribute.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimHasManyToAnyAttribute.AllInstances.IdColumnGet">
            <summary>设置 HasManyToAnyAttribute.get_IdColumn() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimHasManyToAnyAttribute.AllInstances.IdColumnSetString">
            <summary>设置 HasManyToAnyAttribute.set_IdColumn(String value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimHasManyToAnyAttribute.AllInstances.IdTypeGet">
            <summary>设置 HasManyToAnyAttribute.get_IdType() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimHasManyToAnyAttribute.AllInstances.IdTypeSetType">
            <summary>设置 HasManyToAnyAttribute.set_IdType(Type value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimHasManyToAnyAttribute.AllInstances.MetaTypeGet">
            <summary>设置 HasManyToAnyAttribute.get_MetaType() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimHasManyToAnyAttribute.AllInstances.MetaTypeSetType">
            <summary>设置 HasManyToAnyAttribute.set_MetaType(Type value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimHasManyToAnyAttribute.AllInstances.TypeColumnGet">
            <summary>设置 HasManyToAnyAttribute.get_TypeColumn() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimHasManyToAnyAttribute.AllInstances.TypeColumnSetString">
            <summary>设置 HasManyToAnyAttribute.set_TypeColumn(String value) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.ShimHiloAttribute">
            <summary>Castle.ActiveRecord.HiloAttribute 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimHiloAttribute.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimHiloAttribute.#ctor(Castle.ActiveRecord.HiloAttribute)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimHiloAttribute.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimHiloAttribute.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimHiloAttribute.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimHiloAttribute.ColumnGet">
            <summary>设置 HiloAttribute.get_Column() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimHiloAttribute.ColumnSetString">
            <summary>设置 HiloAttribute.set_Column(String value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimHiloAttribute.Constructor">
            <summary>设置 HiloAttribute.HiloAttribute() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimHiloAttribute.ConstructorStringStringInt32">
            <summary>设置 HiloAttribute.HiloAttribute(String table, String column, Int32 maxlo) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimHiloAttribute.MaxLoGet">
            <summary>设置 HiloAttribute.get_MaxLo() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimHiloAttribute.MaxLoSetInt32">
            <summary>设置 HiloAttribute.set_MaxLo(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimHiloAttribute.TableGet">
            <summary>设置 HiloAttribute.get_Table() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimHiloAttribute.TableSetString">
            <summary>设置 HiloAttribute.set_Table(String value) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.ShimHiloAttribute.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimHiloAttribute.AllInstances.ColumnGet">
            <summary>设置 HiloAttribute.get_Column() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimHiloAttribute.AllInstances.ColumnSetString">
            <summary>设置 HiloAttribute.set_Column(String value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimHiloAttribute.AllInstances.MaxLoGet">
            <summary>设置 HiloAttribute.get_MaxLo() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimHiloAttribute.AllInstances.MaxLoSetInt32">
            <summary>设置 HiloAttribute.set_MaxLo(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimHiloAttribute.AllInstances.TableGet">
            <summary>设置 HiloAttribute.get_Table() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimHiloAttribute.AllInstances.TableSetString">
            <summary>设置 HiloAttribute.set_Table(String value) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.ShimHqlNamedQueryAttribute">
            <summary>Castle.ActiveRecord.HqlNamedQueryAttribute 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimHqlNamedQueryAttribute.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimHqlNamedQueryAttribute.#ctor(Castle.ActiveRecord.HqlNamedQueryAttribute)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimHqlNamedQueryAttribute.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimHqlNamedQueryAttribute.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimHqlNamedQueryAttribute.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimHqlNamedQueryAttribute.ConstructorStringString">
            <summary>设置 HqlNamedQueryAttribute.HqlNamedQueryAttribute(String name, String query) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimHqlNamedQueryAttribute.NameGet">
            <summary>设置 HqlNamedQueryAttribute.get_Name() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimHqlNamedQueryAttribute.QueryGet">
            <summary>设置 HqlNamedQueryAttribute.get_Query() 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.ShimHqlNamedQueryAttribute.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimHqlNamedQueryAttribute.AllInstances.NameGet">
            <summary>设置 HqlNamedQueryAttribute.get_Name() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimHqlNamedQueryAttribute.AllInstances.QueryGet">
            <summary>设置 HqlNamedQueryAttribute.get_Query() 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.ShimImportAttribute">
            <summary>Castle.ActiveRecord.ImportAttribute 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimImportAttribute.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimImportAttribute.#ctor(Castle.ActiveRecord.ImportAttribute)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimImportAttribute.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimImportAttribute.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimImportAttribute.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimImportAttribute.ConstructorTypeString">
            <summary>设置 ImportAttribute.ImportAttribute(Type type, String rename) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimImportAttribute.RenameGet">
            <summary>设置 ImportAttribute.get_Rename() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimImportAttribute.RenameSetString">
            <summary>设置 ImportAttribute.set_Rename(String value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimImportAttribute.TypeGet">
            <summary>设置 ImportAttribute.get_Type() 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.ShimImportAttribute.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimImportAttribute.AllInstances.RenameGet">
            <summary>设置 ImportAttribute.get_Rename() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimImportAttribute.AllInstances.RenameSetString">
            <summary>设置 ImportAttribute.set_Rename(String value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimImportAttribute.AllInstances.TypeGet">
            <summary>设置 ImportAttribute.get_Type() 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.ShimJoinedBaseAttribute">
            <summary>Castle.ActiveRecord.JoinedBaseAttribute 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimJoinedBaseAttribute.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimJoinedBaseAttribute.#ctor(Castle.ActiveRecord.JoinedBaseAttribute)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimJoinedBaseAttribute.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimJoinedBaseAttribute.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimJoinedBaseAttribute.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimJoinedBaseAttribute.Constructor">
            <summary>设置 JoinedBaseAttribute.JoinedBaseAttribute() 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.ShimJoinedBaseAttribute.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.ShimJoinedKeyAttribute">
            <summary>Castle.ActiveRecord.JoinedKeyAttribute 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimJoinedKeyAttribute.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimJoinedKeyAttribute.#ctor(Castle.ActiveRecord.JoinedKeyAttribute)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimJoinedKeyAttribute.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimJoinedKeyAttribute.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimJoinedKeyAttribute.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimJoinedKeyAttribute.ColumnGet">
            <summary>设置 JoinedKeyAttribute.get_Column() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimJoinedKeyAttribute.ColumnSetString">
            <summary>设置 JoinedKeyAttribute.set_Column(String value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimJoinedKeyAttribute.Constructor">
            <summary>设置 JoinedKeyAttribute.JoinedKeyAttribute() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimJoinedKeyAttribute.ConstructorString">
            <summary>设置 JoinedKeyAttribute.JoinedKeyAttribute(String column) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.ShimJoinedKeyAttribute.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimJoinedKeyAttribute.AllInstances.ColumnGet">
            <summary>设置 JoinedKeyAttribute.get_Column() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimJoinedKeyAttribute.AllInstances.ColumnSetString">
            <summary>设置 JoinedKeyAttribute.set_Column(String value) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.ShimJoinedTableAttribute">
            <summary>Castle.ActiveRecord.JoinedTableAttribute 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimJoinedTableAttribute.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimJoinedTableAttribute.#ctor(Castle.ActiveRecord.JoinedTableAttribute)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimJoinedTableAttribute.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimJoinedTableAttribute.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimJoinedTableAttribute.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimJoinedTableAttribute.ColumnGet">
            <summary>设置 JoinedTableAttribute.get_Column() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimJoinedTableAttribute.ColumnSetString">
            <summary>设置 JoinedTableAttribute.set_Column(String value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimJoinedTableAttribute.ConstructorString">
            <summary>设置 JoinedTableAttribute.JoinedTableAttribute(String table) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimJoinedTableAttribute.FetchGet">
            <summary>设置 JoinedTableAttribute.get_Fetch() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimJoinedTableAttribute.FetchSetFetchEnum">
            <summary>设置 JoinedTableAttribute.set_Fetch(FetchEnum value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimJoinedTableAttribute.InverseGet">
            <summary>设置 JoinedTableAttribute.get_Inverse() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimJoinedTableAttribute.InverseSetBoolean">
            <summary>设置 JoinedTableAttribute.set_Inverse(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimJoinedTableAttribute.OptionalGet">
            <summary>设置 JoinedTableAttribute.get_Optional() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimJoinedTableAttribute.OptionalSetBoolean">
            <summary>设置 JoinedTableAttribute.set_Optional(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimJoinedTableAttribute.SchemaGet">
            <summary>设置 JoinedTableAttribute.get_Schema() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimJoinedTableAttribute.SchemaSetString">
            <summary>设置 JoinedTableAttribute.set_Schema(String value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimJoinedTableAttribute.TableGet">
            <summary>设置 JoinedTableAttribute.get_Table() 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.ShimJoinedTableAttribute.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimJoinedTableAttribute.AllInstances.ColumnGet">
            <summary>设置 JoinedTableAttribute.get_Column() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimJoinedTableAttribute.AllInstances.ColumnSetString">
            <summary>设置 JoinedTableAttribute.set_Column(String value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimJoinedTableAttribute.AllInstances.FetchGet">
            <summary>设置 JoinedTableAttribute.get_Fetch() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimJoinedTableAttribute.AllInstances.FetchSetFetchEnum">
            <summary>设置 JoinedTableAttribute.set_Fetch(FetchEnum value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimJoinedTableAttribute.AllInstances.InverseGet">
            <summary>设置 JoinedTableAttribute.get_Inverse() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimJoinedTableAttribute.AllInstances.InverseSetBoolean">
            <summary>设置 JoinedTableAttribute.set_Inverse(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimJoinedTableAttribute.AllInstances.OptionalGet">
            <summary>设置 JoinedTableAttribute.get_Optional() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimJoinedTableAttribute.AllInstances.OptionalSetBoolean">
            <summary>设置 JoinedTableAttribute.set_Optional(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimJoinedTableAttribute.AllInstances.SchemaGet">
            <summary>设置 JoinedTableAttribute.get_Schema() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimJoinedTableAttribute.AllInstances.SchemaSetString">
            <summary>设置 JoinedTableAttribute.set_Schema(String value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimJoinedTableAttribute.AllInstances.TableGet">
            <summary>设置 JoinedTableAttribute.get_Table() 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.ShimKeyPropertyAttribute">
            <summary>Castle.ActiveRecord.KeyPropertyAttribute 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimKeyPropertyAttribute.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimKeyPropertyAttribute.#ctor(Castle.ActiveRecord.KeyPropertyAttribute)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimKeyPropertyAttribute.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimKeyPropertyAttribute.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimKeyPropertyAttribute.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimKeyPropertyAttribute.Constructor">
            <summary>设置 KeyPropertyAttribute.KeyPropertyAttribute() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimKeyPropertyAttribute.UnsavedValueGet">
            <summary>设置 KeyPropertyAttribute.get_UnsavedValue() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimKeyPropertyAttribute.UnsavedValueSetString">
            <summary>设置 KeyPropertyAttribute.set_UnsavedValue(String value) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.ShimKeyPropertyAttribute.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimKeyPropertyAttribute.AllInstances.UnsavedValueGet">
            <summary>设置 KeyPropertyAttribute.get_UnsavedValue() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimKeyPropertyAttribute.AllInstances.UnsavedValueSetString">
            <summary>设置 KeyPropertyAttribute.set_UnsavedValue(String value) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.ShimNestedAttribute">
            <summary>Castle.ActiveRecord.NestedAttribute 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimNestedAttribute.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimNestedAttribute.#ctor(Castle.ActiveRecord.NestedAttribute)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimNestedAttribute.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimNestedAttribute.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimNestedAttribute.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimNestedAttribute.ColumnPrefixGet">
            <summary>设置 NestedAttribute.get_ColumnPrefix() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimNestedAttribute.ColumnPrefixSetString">
            <summary>设置 NestedAttribute.set_ColumnPrefix(String value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimNestedAttribute.Constructor">
            <summary>设置 NestedAttribute.NestedAttribute() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimNestedAttribute.ConstructorString">
            <summary>设置 NestedAttribute.NestedAttribute(String columnPrefix) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimNestedAttribute.InsertGet">
            <summary>设置 NestedAttribute.get_Insert() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimNestedAttribute.InsertSetBoolean">
            <summary>设置 NestedAttribute.set_Insert(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimNestedAttribute.MapTypeGet">
            <summary>设置 NestedAttribute.get_MapType() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimNestedAttribute.MapTypeSetType">
            <summary>设置 NestedAttribute.set_MapType(Type value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimNestedAttribute.UpdateGet">
            <summary>设置 NestedAttribute.get_Update() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimNestedAttribute.UpdateSetBoolean">
            <summary>设置 NestedAttribute.set_Update(Boolean value) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.ShimNestedAttribute.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimNestedAttribute.AllInstances.ColumnPrefixGet">
            <summary>设置 NestedAttribute.get_ColumnPrefix() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimNestedAttribute.AllInstances.ColumnPrefixSetString">
            <summary>设置 NestedAttribute.set_ColumnPrefix(String value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimNestedAttribute.AllInstances.InsertGet">
            <summary>设置 NestedAttribute.get_Insert() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimNestedAttribute.AllInstances.InsertSetBoolean">
            <summary>设置 NestedAttribute.set_Insert(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimNestedAttribute.AllInstances.MapTypeGet">
            <summary>设置 NestedAttribute.get_MapType() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimNestedAttribute.AllInstances.MapTypeSetType">
            <summary>设置 NestedAttribute.set_MapType(Type value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimNestedAttribute.AllInstances.UpdateGet">
            <summary>设置 NestedAttribute.get_Update() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimNestedAttribute.AllInstances.UpdateSetBoolean">
            <summary>设置 NestedAttribute.set_Update(Boolean value) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.ShimNestedParentReferenceAttribute">
            <summary>Castle.ActiveRecord.NestedParentReferenceAttribute 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimNestedParentReferenceAttribute.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimNestedParentReferenceAttribute.#ctor(Castle.ActiveRecord.NestedParentReferenceAttribute)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimNestedParentReferenceAttribute.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimNestedParentReferenceAttribute.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimNestedParentReferenceAttribute.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimNestedParentReferenceAttribute.Constructor">
            <summary>设置 NestedParentReferenceAttribute.NestedParentReferenceAttribute() 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.ShimNestedParentReferenceAttribute.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.ShimNotFoundException">
            <summary>Castle.ActiveRecord.NotFoundException 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimNotFoundException.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimNotFoundException.#ctor(Castle.ActiveRecord.NotFoundException)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimNotFoundException.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimNotFoundException.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimNotFoundException.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimNotFoundException.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimNotFoundException.ConstructorSerializationInfoStreamingContext">
            <summary>设置 NotFoundException.NotFoundException(SerializationInfo info, StreamingContext context) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimNotFoundException.ConstructorString">
            <summary>设置 NotFoundException.NotFoundException(String message) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimNotFoundException.ConstructorStringException">
            <summary>设置 NotFoundException.NotFoundException(String message, Exception innerException) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.ShimNotFoundException.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.ShimOneToOneAttribute">
            <summary>Castle.ActiveRecord.OneToOneAttribute 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimOneToOneAttribute.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimOneToOneAttribute.#ctor(Castle.ActiveRecord.OneToOneAttribute)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimOneToOneAttribute.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimOneToOneAttribute.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimOneToOneAttribute.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimOneToOneAttribute.CascadeGet">
            <summary>设置 OneToOneAttribute.get_Cascade() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimOneToOneAttribute.CascadeSetCascadeEnum">
            <summary>设置 OneToOneAttribute.set_Cascade(CascadeEnum value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimOneToOneAttribute.ConstrainedGet">
            <summary>设置 OneToOneAttribute.get_Constrained() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimOneToOneAttribute.ConstrainedSetBoolean">
            <summary>设置 OneToOneAttribute.set_Constrained(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimOneToOneAttribute.Constructor">
            <summary>设置 OneToOneAttribute.OneToOneAttribute() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimOneToOneAttribute.FetchGet">
            <summary>设置 OneToOneAttribute.get_Fetch() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimOneToOneAttribute.FetchSetFetchEnum">
            <summary>设置 OneToOneAttribute.set_Fetch(FetchEnum value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimOneToOneAttribute.ForeignKeyGet">
            <summary>设置 OneToOneAttribute.get_ForeignKey() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimOneToOneAttribute.ForeignKeySetString">
            <summary>设置 OneToOneAttribute.set_ForeignKey(String value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimOneToOneAttribute.MapTypeGet">
            <summary>设置 OneToOneAttribute.get_MapType() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimOneToOneAttribute.MapTypeSetType">
            <summary>设置 OneToOneAttribute.set_MapType(Type value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimOneToOneAttribute.PropertyRefGet">
            <summary>设置 OneToOneAttribute.get_PropertyRef() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimOneToOneAttribute.PropertyRefSetString">
            <summary>设置 OneToOneAttribute.set_PropertyRef(String value) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.ShimOneToOneAttribute.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimOneToOneAttribute.AllInstances.CascadeGet">
            <summary>设置 OneToOneAttribute.get_Cascade() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimOneToOneAttribute.AllInstances.CascadeSetCascadeEnum">
            <summary>设置 OneToOneAttribute.set_Cascade(CascadeEnum value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimOneToOneAttribute.AllInstances.ConstrainedGet">
            <summary>设置 OneToOneAttribute.get_Constrained() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimOneToOneAttribute.AllInstances.ConstrainedSetBoolean">
            <summary>设置 OneToOneAttribute.set_Constrained(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimOneToOneAttribute.AllInstances.FetchGet">
            <summary>设置 OneToOneAttribute.get_Fetch() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimOneToOneAttribute.AllInstances.FetchSetFetchEnum">
            <summary>设置 OneToOneAttribute.set_Fetch(FetchEnum value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimOneToOneAttribute.AllInstances.ForeignKeyGet">
            <summary>设置 OneToOneAttribute.get_ForeignKey() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimOneToOneAttribute.AllInstances.ForeignKeySetString">
            <summary>设置 OneToOneAttribute.set_ForeignKey(String value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimOneToOneAttribute.AllInstances.MapTypeGet">
            <summary>设置 OneToOneAttribute.get_MapType() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimOneToOneAttribute.AllInstances.MapTypeSetType">
            <summary>设置 OneToOneAttribute.set_MapType(Type value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimOneToOneAttribute.AllInstances.PropertyRefGet">
            <summary>设置 OneToOneAttribute.get_PropertyRef() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimOneToOneAttribute.AllInstances.PropertyRefSetString">
            <summary>设置 OneToOneAttribute.set_PropertyRef(String value) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.ShimPrimaryKeyAttribute">
            <summary>Castle.ActiveRecord.PrimaryKeyAttribute 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimPrimaryKeyAttribute.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimPrimaryKeyAttribute.#ctor(Castle.ActiveRecord.PrimaryKeyAttribute)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimPrimaryKeyAttribute.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimPrimaryKeyAttribute.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimPrimaryKeyAttribute.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimPrimaryKeyAttribute.ColumnGet">
            <summary>设置 PrimaryKeyAttribute.get_Column() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimPrimaryKeyAttribute.ColumnSetString">
            <summary>设置 PrimaryKeyAttribute.set_Column(String value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimPrimaryKeyAttribute.ColumnTypeGet">
            <summary>设置 PrimaryKeyAttribute.get_ColumnType() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimPrimaryKeyAttribute.ColumnTypeSetString">
            <summary>设置 PrimaryKeyAttribute.set_ColumnType(String value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimPrimaryKeyAttribute.Constructor">
            <summary>设置 PrimaryKeyAttribute.PrimaryKeyAttribute() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimPrimaryKeyAttribute.ConstructorPrimaryKeyType">
            <summary>设置 PrimaryKeyAttribute.PrimaryKeyAttribute(PrimaryKeyType generator) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimPrimaryKeyAttribute.ConstructorPrimaryKeyTypeString">
            <summary>设置 PrimaryKeyAttribute.PrimaryKeyAttribute(PrimaryKeyType generator, String column) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimPrimaryKeyAttribute.ConstructorString">
            <summary>设置 PrimaryKeyAttribute.PrimaryKeyAttribute(String column) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimPrimaryKeyAttribute.ConstructorType">
            <summary>设置 PrimaryKeyAttribute.PrimaryKeyAttribute(Type customGenerator) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimPrimaryKeyAttribute.CustomGeneratorGet">
            <summary>设置 PrimaryKeyAttribute.get_CustomGenerator() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimPrimaryKeyAttribute.CustomGeneratorSetType">
            <summary>设置 PrimaryKeyAttribute.set_CustomGenerator(Type value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimPrimaryKeyAttribute.GeneratorGet">
            <summary>设置 PrimaryKeyAttribute.get_Generator() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimPrimaryKeyAttribute.GeneratorSetPrimaryKeyType">
            <summary>设置 PrimaryKeyAttribute.set_Generator(PrimaryKeyType value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimPrimaryKeyAttribute.IsOverrideGet">
            <summary>设置 PrimaryKeyAttribute.get_IsOverride() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimPrimaryKeyAttribute.IsOverrideSetBoolean">
            <summary>设置 PrimaryKeyAttribute.set_IsOverride(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimPrimaryKeyAttribute.LengthGet">
            <summary>设置 PrimaryKeyAttribute.get_Length() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimPrimaryKeyAttribute.LengthSetInt32">
            <summary>设置 PrimaryKeyAttribute.set_Length(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimPrimaryKeyAttribute.ParamsGet">
            <summary>设置 PrimaryKeyAttribute.get_Params() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimPrimaryKeyAttribute.ParamsSetString">
            <summary>设置 PrimaryKeyAttribute.set_Params(String value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimPrimaryKeyAttribute.SequenceNameGet">
            <summary>设置 PrimaryKeyAttribute.get_SequenceName() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimPrimaryKeyAttribute.SequenceNameSetString">
            <summary>设置 PrimaryKeyAttribute.set_SequenceName(String value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimPrimaryKeyAttribute.StaticConstructor">
            <summary>设置 PrimaryKeyAttribute.PrimaryKeyAttribute() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimPrimaryKeyAttribute.TypeSpecifiedGet">
            <summary>设置 PrimaryKeyAttribute.get_TypeSpecified() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimPrimaryKeyAttribute.UnsavedValueGet">
            <summary>设置 PrimaryKeyAttribute.get_UnsavedValue() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimPrimaryKeyAttribute.UnsavedValueSetString">
            <summary>设置 PrimaryKeyAttribute.set_UnsavedValue(String value) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.ShimPrimaryKeyAttribute.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimPrimaryKeyAttribute.AllInstances.ColumnGet">
            <summary>设置 PrimaryKeyAttribute.get_Column() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimPrimaryKeyAttribute.AllInstances.ColumnSetString">
            <summary>设置 PrimaryKeyAttribute.set_Column(String value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimPrimaryKeyAttribute.AllInstances.ColumnTypeGet">
            <summary>设置 PrimaryKeyAttribute.get_ColumnType() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimPrimaryKeyAttribute.AllInstances.ColumnTypeSetString">
            <summary>设置 PrimaryKeyAttribute.set_ColumnType(String value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimPrimaryKeyAttribute.AllInstances.CustomGeneratorGet">
            <summary>设置 PrimaryKeyAttribute.get_CustomGenerator() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimPrimaryKeyAttribute.AllInstances.CustomGeneratorSetType">
            <summary>设置 PrimaryKeyAttribute.set_CustomGenerator(Type value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimPrimaryKeyAttribute.AllInstances.GeneratorGet">
            <summary>设置 PrimaryKeyAttribute.get_Generator() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimPrimaryKeyAttribute.AllInstances.GeneratorSetPrimaryKeyType">
            <summary>设置 PrimaryKeyAttribute.set_Generator(PrimaryKeyType value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimPrimaryKeyAttribute.AllInstances.IsOverrideGet">
            <summary>设置 PrimaryKeyAttribute.get_IsOverride() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimPrimaryKeyAttribute.AllInstances.IsOverrideSetBoolean">
            <summary>设置 PrimaryKeyAttribute.set_IsOverride(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimPrimaryKeyAttribute.AllInstances.LengthGet">
            <summary>设置 PrimaryKeyAttribute.get_Length() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimPrimaryKeyAttribute.AllInstances.LengthSetInt32">
            <summary>设置 PrimaryKeyAttribute.set_Length(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimPrimaryKeyAttribute.AllInstances.ParamsGet">
            <summary>设置 PrimaryKeyAttribute.get_Params() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimPrimaryKeyAttribute.AllInstances.ParamsSetString">
            <summary>设置 PrimaryKeyAttribute.set_Params(String value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimPrimaryKeyAttribute.AllInstances.SequenceNameGet">
            <summary>设置 PrimaryKeyAttribute.get_SequenceName() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimPrimaryKeyAttribute.AllInstances.SequenceNameSetString">
            <summary>设置 PrimaryKeyAttribute.set_SequenceName(String value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimPrimaryKeyAttribute.AllInstances.TypeSpecifiedGet">
            <summary>设置 PrimaryKeyAttribute.get_TypeSpecified() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimPrimaryKeyAttribute.AllInstances.UnsavedValueGet">
            <summary>设置 PrimaryKeyAttribute.get_UnsavedValue() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimPrimaryKeyAttribute.AllInstances.UnsavedValueSetString">
            <summary>设置 PrimaryKeyAttribute.set_UnsavedValue(String value) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.ShimPropertyAccessHelper">
            <summary>Castle.ActiveRecord.PropertyAccessHelper 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimPropertyAccessHelper.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimPropertyAccessHelper.#ctor(Castle.ActiveRecord.PropertyAccessHelper)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimPropertyAccessHelper.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimPropertyAccessHelper.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimPropertyAccessHelper.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimPropertyAccessHelper.Constructor">
            <summary>设置 PropertyAccessHelper.PropertyAccessHelper() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimPropertyAccessHelper.ToStringPropertyAccess">
            <summary>设置 PropertyAccessHelper.ToString(PropertyAccess access) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.ShimPropertyAccessHelper.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.ShimPropertyAttribute">
            <summary>Castle.ActiveRecord.PropertyAttribute 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimPropertyAttribute.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimPropertyAttribute.#ctor(Castle.ActiveRecord.PropertyAttribute)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimPropertyAttribute.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimPropertyAttribute.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimPropertyAttribute.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimPropertyAttribute.CheckGet">
            <summary>设置 PropertyAttribute.get_Check() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimPropertyAttribute.CheckSetString">
            <summary>设置 PropertyAttribute.set_Check(String value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimPropertyAttribute.ColumnGet">
            <summary>设置 PropertyAttribute.get_Column() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimPropertyAttribute.ColumnSetString">
            <summary>设置 PropertyAttribute.set_Column(String value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimPropertyAttribute.ColumnTypeGet">
            <summary>设置 PropertyAttribute.get_ColumnType() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimPropertyAttribute.ColumnTypeSetString">
            <summary>设置 PropertyAttribute.set_ColumnType(String value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimPropertyAttribute.Constructor">
            <summary>设置 PropertyAttribute.PropertyAttribute() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimPropertyAttribute.ConstructorString">
            <summary>设置 PropertyAttribute.PropertyAttribute(String column) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimPropertyAttribute.ConstructorStringString">
            <summary>设置 PropertyAttribute.PropertyAttribute(String column, String type) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimPropertyAttribute.DefaultGet">
            <summary>设置 PropertyAttribute.get_Default() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimPropertyAttribute.DefaultSetString">
            <summary>设置 PropertyAttribute.set_Default(String value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimPropertyAttribute.FormulaGet">
            <summary>设置 PropertyAttribute.get_Formula() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimPropertyAttribute.FormulaSetString">
            <summary>设置 PropertyAttribute.set_Formula(String value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimPropertyAttribute.IndexGet">
            <summary>设置 PropertyAttribute.get_Index() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimPropertyAttribute.IndexSetString">
            <summary>设置 PropertyAttribute.set_Index(String value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimPropertyAttribute.InsertGet">
            <summary>设置 PropertyAttribute.get_Insert() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimPropertyAttribute.InsertSetBoolean">
            <summary>设置 PropertyAttribute.set_Insert(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimPropertyAttribute.IsOverrideGet">
            <summary>设置 PropertyAttribute.get_IsOverride() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimPropertyAttribute.IsOverrideSetBoolean">
            <summary>设置 PropertyAttribute.set_IsOverride(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimPropertyAttribute.LazyGet">
            <summary>设置 PropertyAttribute.get_Lazy() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimPropertyAttribute.LazySetBoolean">
            <summary>设置 PropertyAttribute.set_Lazy(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimPropertyAttribute.LengthGet">
            <summary>设置 PropertyAttribute.get_Length() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimPropertyAttribute.LengthSetInt32">
            <summary>设置 PropertyAttribute.set_Length(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimPropertyAttribute.NotNullGet">
            <summary>设置 PropertyAttribute.get_NotNull() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimPropertyAttribute.NotNullSetBoolean">
            <summary>设置 PropertyAttribute.set_NotNull(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimPropertyAttribute.SqlTypeGet">
            <summary>设置 PropertyAttribute.get_SqlType() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimPropertyAttribute.SqlTypeSetString">
            <summary>设置 PropertyAttribute.set_SqlType(String value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimPropertyAttribute.UniqueGet">
            <summary>设置 PropertyAttribute.get_Unique() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimPropertyAttribute.UniqueKeyGet">
            <summary>设置 PropertyAttribute.get_UniqueKey() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimPropertyAttribute.UniqueKeySetString">
            <summary>设置 PropertyAttribute.set_UniqueKey(String value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimPropertyAttribute.UniqueSetBoolean">
            <summary>设置 PropertyAttribute.set_Unique(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimPropertyAttribute.UpdateGet">
            <summary>设置 PropertyAttribute.get_Update() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimPropertyAttribute.UpdateSetBoolean">
            <summary>设置 PropertyAttribute.set_Update(Boolean value) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.ShimPropertyAttribute.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimPropertyAttribute.AllInstances.CheckGet">
            <summary>设置 PropertyAttribute.get_Check() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimPropertyAttribute.AllInstances.CheckSetString">
            <summary>设置 PropertyAttribute.set_Check(String value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimPropertyAttribute.AllInstances.ColumnGet">
            <summary>设置 PropertyAttribute.get_Column() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimPropertyAttribute.AllInstances.ColumnSetString">
            <summary>设置 PropertyAttribute.set_Column(String value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimPropertyAttribute.AllInstances.ColumnTypeGet">
            <summary>设置 PropertyAttribute.get_ColumnType() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimPropertyAttribute.AllInstances.ColumnTypeSetString">
            <summary>设置 PropertyAttribute.set_ColumnType(String value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimPropertyAttribute.AllInstances.DefaultGet">
            <summary>设置 PropertyAttribute.get_Default() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimPropertyAttribute.AllInstances.DefaultSetString">
            <summary>设置 PropertyAttribute.set_Default(String value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimPropertyAttribute.AllInstances.FormulaGet">
            <summary>设置 PropertyAttribute.get_Formula() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimPropertyAttribute.AllInstances.FormulaSetString">
            <summary>设置 PropertyAttribute.set_Formula(String value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimPropertyAttribute.AllInstances.IndexGet">
            <summary>设置 PropertyAttribute.get_Index() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimPropertyAttribute.AllInstances.IndexSetString">
            <summary>设置 PropertyAttribute.set_Index(String value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimPropertyAttribute.AllInstances.InsertGet">
            <summary>设置 PropertyAttribute.get_Insert() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimPropertyAttribute.AllInstances.InsertSetBoolean">
            <summary>设置 PropertyAttribute.set_Insert(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimPropertyAttribute.AllInstances.IsOverrideGet">
            <summary>设置 PropertyAttribute.get_IsOverride() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimPropertyAttribute.AllInstances.IsOverrideSetBoolean">
            <summary>设置 PropertyAttribute.set_IsOverride(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimPropertyAttribute.AllInstances.LazyGet">
            <summary>设置 PropertyAttribute.get_Lazy() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimPropertyAttribute.AllInstances.LazySetBoolean">
            <summary>设置 PropertyAttribute.set_Lazy(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimPropertyAttribute.AllInstances.LengthGet">
            <summary>设置 PropertyAttribute.get_Length() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimPropertyAttribute.AllInstances.LengthSetInt32">
            <summary>设置 PropertyAttribute.set_Length(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimPropertyAttribute.AllInstances.NotNullGet">
            <summary>设置 PropertyAttribute.get_NotNull() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimPropertyAttribute.AllInstances.NotNullSetBoolean">
            <summary>设置 PropertyAttribute.set_NotNull(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimPropertyAttribute.AllInstances.SqlTypeGet">
            <summary>设置 PropertyAttribute.get_SqlType() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimPropertyAttribute.AllInstances.SqlTypeSetString">
            <summary>设置 PropertyAttribute.set_SqlType(String value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimPropertyAttribute.AllInstances.UniqueGet">
            <summary>设置 PropertyAttribute.get_Unique() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimPropertyAttribute.AllInstances.UniqueKeyGet">
            <summary>设置 PropertyAttribute.get_UniqueKey() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimPropertyAttribute.AllInstances.UniqueKeySetString">
            <summary>设置 PropertyAttribute.set_UniqueKey(String value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimPropertyAttribute.AllInstances.UniqueSetBoolean">
            <summary>设置 PropertyAttribute.set_Unique(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimPropertyAttribute.AllInstances.UpdateGet">
            <summary>设置 PropertyAttribute.get_Update() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimPropertyAttribute.AllInstances.UpdateSetBoolean">
            <summary>设置 PropertyAttribute.set_Update(Boolean value) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.ShimRawXmlMappingAttribute">
            <summary>Castle.ActiveRecord.RawXmlMappingAttribute 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimRawXmlMappingAttribute.#ctor(Castle.ActiveRecord.RawXmlMappingAttribute)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimRawXmlMappingAttribute.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimRawXmlMappingAttribute.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimRawXmlMappingAttribute.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimRawXmlMappingAttribute.Constructor">
            <summary>设置 RawXmlMappingAttribute.RawXmlMappingAttribute() 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.ShimRawXmlMappingAttribute.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.ShimRelationAttribute">
            <summary>Castle.ActiveRecord.RelationAttribute 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimRelationAttribute.#ctor(Castle.ActiveRecord.RelationAttribute)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimRelationAttribute.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimRelationAttribute.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimRelationAttribute.BatchSizeGet">
            <summary>设置 RelationAttribute.get_BatchSize() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimRelationAttribute.BatchSizeSetInt32">
            <summary>设置 RelationAttribute.set_BatchSize(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimRelationAttribute.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimRelationAttribute.CascadeGet">
            <summary>设置 RelationAttribute.get_Cascade() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimRelationAttribute.CascadeSetManyRelationCascadeEnum">
            <summary>设置 RelationAttribute.set_Cascade(ManyRelationCascadeEnum value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimRelationAttribute.Constructor">
            <summary>设置 RelationAttribute.RelationAttribute() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimRelationAttribute.ElementGet">
            <summary>设置 RelationAttribute.get_Element() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimRelationAttribute.ElementSetString">
            <summary>设置 RelationAttribute.set_Element(String value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimRelationAttribute.ElementTypeGet">
            <summary>设置 RelationAttribute.get_ElementType() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimRelationAttribute.ElementTypeSetType">
            <summary>设置 RelationAttribute.set_ElementType(Type value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimRelationAttribute.ExtraLazyGet">
            <summary>设置 RelationAttribute.get_ExtraLazy() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimRelationAttribute.ExtraLazySetBoolean">
            <summary>设置 RelationAttribute.set_ExtraLazy(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimRelationAttribute.IndexGet">
            <summary>设置 RelationAttribute.get_Index() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimRelationAttribute.IndexSetString">
            <summary>设置 RelationAttribute.set_Index(String value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimRelationAttribute.IndexTypeGet">
            <summary>设置 RelationAttribute.get_IndexType() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimRelationAttribute.IndexTypeSetString">
            <summary>设置 RelationAttribute.set_IndexType(String value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimRelationAttribute.InverseGet">
            <summary>设置 RelationAttribute.get_Inverse() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimRelationAttribute.InverseSetBoolean">
            <summary>设置 RelationAttribute.set_Inverse(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimRelationAttribute.LazyAttributeValueGet">
            <summary>设置 RelationAttribute.get_LazyAttributeValue() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimRelationAttribute.LazyGet">
            <summary>设置 RelationAttribute.get_Lazy() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimRelationAttribute.LazySetBoolean">
            <summary>设置 RelationAttribute.set_Lazy(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimRelationAttribute.MapTypeGet">
            <summary>设置 RelationAttribute.get_MapType() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimRelationAttribute.MapTypeSetType">
            <summary>设置 RelationAttribute.set_MapType(Type value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimRelationAttribute.NotFoundBehaviourGet">
            <summary>设置 RelationAttribute.get_NotFoundBehaviour() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimRelationAttribute.NotFoundBehaviourSetNotFoundBehaviour">
            <summary>设置 RelationAttribute.set_NotFoundBehaviour(NotFoundBehaviour value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimRelationAttribute.OptimisticLockGet">
            <summary>设置 RelationAttribute.get_OptimisticLock() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimRelationAttribute.OptimisticLockSetBoolean">
            <summary>设置 RelationAttribute.set_OptimisticLock(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimRelationAttribute.OrderByGet">
            <summary>设置 RelationAttribute.get_OrderBy() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimRelationAttribute.OrderBySetString">
            <summary>设置 RelationAttribute.set_OrderBy(String value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimRelationAttribute.RelationTypeGet">
            <summary>设置 RelationAttribute.get_RelationType() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimRelationAttribute.RelationTypeSetRelationType">
            <summary>设置 RelationAttribute.set_RelationType(RelationType value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimRelationAttribute.SchemaGet">
            <summary>设置 RelationAttribute.get_Schema() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimRelationAttribute.SchemaSetString">
            <summary>设置 RelationAttribute.set_Schema(String value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimRelationAttribute.SortGet">
            <summary>设置 RelationAttribute.get_Sort() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimRelationAttribute.SortSetString">
            <summary>设置 RelationAttribute.set_Sort(String value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimRelationAttribute.TableGet">
            <summary>设置 RelationAttribute.get_Table() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimRelationAttribute.TableSetString">
            <summary>设置 RelationAttribute.set_Table(String value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimRelationAttribute.WhereGet">
            <summary>设置 RelationAttribute.get_Where() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimRelationAttribute.WhereSetString">
            <summary>设置 RelationAttribute.set_Where(String value) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.ShimRelationAttribute.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimRelationAttribute.AllInstances.BatchSizeGet">
            <summary>设置 RelationAttribute.get_BatchSize() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimRelationAttribute.AllInstances.BatchSizeSetInt32">
            <summary>设置 RelationAttribute.set_BatchSize(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimRelationAttribute.AllInstances.CascadeGet">
            <summary>设置 RelationAttribute.get_Cascade() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimRelationAttribute.AllInstances.CascadeSetManyRelationCascadeEnum">
            <summary>设置 RelationAttribute.set_Cascade(ManyRelationCascadeEnum value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimRelationAttribute.AllInstances.ElementGet">
            <summary>设置 RelationAttribute.get_Element() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimRelationAttribute.AllInstances.ElementSetString">
            <summary>设置 RelationAttribute.set_Element(String value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimRelationAttribute.AllInstances.ElementTypeGet">
            <summary>设置 RelationAttribute.get_ElementType() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimRelationAttribute.AllInstances.ElementTypeSetType">
            <summary>设置 RelationAttribute.set_ElementType(Type value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimRelationAttribute.AllInstances.ExtraLazyGet">
            <summary>设置 RelationAttribute.get_ExtraLazy() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimRelationAttribute.AllInstances.ExtraLazySetBoolean">
            <summary>设置 RelationAttribute.set_ExtraLazy(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimRelationAttribute.AllInstances.IndexGet">
            <summary>设置 RelationAttribute.get_Index() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimRelationAttribute.AllInstances.IndexSetString">
            <summary>设置 RelationAttribute.set_Index(String value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimRelationAttribute.AllInstances.IndexTypeGet">
            <summary>设置 RelationAttribute.get_IndexType() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimRelationAttribute.AllInstances.IndexTypeSetString">
            <summary>设置 RelationAttribute.set_IndexType(String value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimRelationAttribute.AllInstances.InverseGet">
            <summary>设置 RelationAttribute.get_Inverse() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimRelationAttribute.AllInstances.InverseSetBoolean">
            <summary>设置 RelationAttribute.set_Inverse(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimRelationAttribute.AllInstances.LazyAttributeValueGet">
            <summary>设置 RelationAttribute.get_LazyAttributeValue() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimRelationAttribute.AllInstances.LazyGet">
            <summary>设置 RelationAttribute.get_Lazy() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimRelationAttribute.AllInstances.LazySetBoolean">
            <summary>设置 RelationAttribute.set_Lazy(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimRelationAttribute.AllInstances.MapTypeGet">
            <summary>设置 RelationAttribute.get_MapType() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimRelationAttribute.AllInstances.MapTypeSetType">
            <summary>设置 RelationAttribute.set_MapType(Type value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimRelationAttribute.AllInstances.NotFoundBehaviourGet">
            <summary>设置 RelationAttribute.get_NotFoundBehaviour() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimRelationAttribute.AllInstances.NotFoundBehaviourSetNotFoundBehaviour">
            <summary>设置 RelationAttribute.set_NotFoundBehaviour(NotFoundBehaviour value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimRelationAttribute.AllInstances.OptimisticLockGet">
            <summary>设置 RelationAttribute.get_OptimisticLock() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimRelationAttribute.AllInstances.OptimisticLockSetBoolean">
            <summary>设置 RelationAttribute.set_OptimisticLock(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimRelationAttribute.AllInstances.OrderByGet">
            <summary>设置 RelationAttribute.get_OrderBy() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimRelationAttribute.AllInstances.OrderBySetString">
            <summary>设置 RelationAttribute.set_OrderBy(String value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimRelationAttribute.AllInstances.RelationTypeGet">
            <summary>设置 RelationAttribute.get_RelationType() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimRelationAttribute.AllInstances.RelationTypeSetRelationType">
            <summary>设置 RelationAttribute.set_RelationType(RelationType value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimRelationAttribute.AllInstances.SchemaGet">
            <summary>设置 RelationAttribute.get_Schema() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimRelationAttribute.AllInstances.SchemaSetString">
            <summary>设置 RelationAttribute.set_Schema(String value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimRelationAttribute.AllInstances.SortGet">
            <summary>设置 RelationAttribute.get_Sort() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimRelationAttribute.AllInstances.SortSetString">
            <summary>设置 RelationAttribute.set_Sort(String value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimRelationAttribute.AllInstances.TableGet">
            <summary>设置 RelationAttribute.get_Table() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimRelationAttribute.AllInstances.TableSetString">
            <summary>设置 RelationAttribute.set_Table(String value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimRelationAttribute.AllInstances.WhereGet">
            <summary>设置 RelationAttribute.get_Where() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimRelationAttribute.AllInstances.WhereSetString">
            <summary>设置 RelationAttribute.set_Where(String value) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.ShimScopedConversation">
            <summary>Castle.ActiveRecord.ScopedConversation 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimScopedConversation.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimScopedConversation.#ctor(Castle.ActiveRecord.ScopedConversation)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimScopedConversation.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimScopedConversation.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimScopedConversation.Bind(Castle.ActiveRecord.IConversation)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimScopedConversation.Bind(Castle.ActiveRecord.IScopeConversation)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimScopedConversation.Bind(System.IDisposable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimScopedConversation.AssertNotCanceled">
            <summary>设置 ScopedConversation.AssertNotCanceled() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimScopedConversation.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimScopedConversation.Cancel">
            <summary>设置 ScopedConversation.Cancel() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimScopedConversation.CanceledAddEventHandlerOfConversationCanceledEventArgs">
            <summary>设置 ScopedConversation.add_Canceled(EventHandler`1&lt;ConversationCanceledEventArgs&gt; value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimScopedConversation.CanceledRemoveEventHandlerOfConversationCanceledEventArgs">
            <summary>设置 ScopedConversation.remove_Canceled(EventHandler`1&lt;ConversationCanceledEventArgs&gt; value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimScopedConversation.ClearSessions">
            <summary>设置 ScopedConversation.ClearSessions() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimScopedConversation.Constructor">
            <summary>设置 ScopedConversation.ScopedConversation() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimScopedConversation.ConstructorConversationFlushMode">
            <summary>设置 ScopedConversation.ScopedConversation(ConversationFlushMode mode) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimScopedConversation.CreateSessionISessionFactoryIInterceptor">
            <summary>设置 ScopedConversation.CreateSession(ISessionFactory factory, IInterceptor interceptor) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimScopedConversation.Dispose">
            <summary>设置 ScopedConversation.Dispose() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimScopedConversation.DoCancelBooleanException">
            <summary>设置 ScopedConversation.DoCancel(Boolean userCanceled, Exception exceptionCaught) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimScopedConversation.ExecuteAction">
            <summary>设置 ScopedConversation.Execute(Action action) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimScopedConversation.ExecuteActionBoolean">
            <summary>设置 ScopedConversation.Execute(Action action, Boolean silently) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimScopedConversation.ExecuteSilentlyAction">
            <summary>设置 ScopedConversation.ExecuteSilently(Action action) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimScopedConversation.Flush">
            <summary>设置 ScopedConversation.Flush() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimScopedConversation.FlushModeGet">
            <summary>设置 ScopedConversation.get_FlushMode() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimScopedConversation.FlushModeSetConversationFlushMode">
            <summary>设置 ScopedConversation.set_FlushMode(ConversationFlushMode value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimScopedConversation.GetSessionISessionFactoryIInterceptor">
            <summary>设置 ScopedConversation.GetSession(ISessionFactory factory, IInterceptor interceptor) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimScopedConversation.IsCanceledGet">
            <summary>设置 ScopedConversation.get_IsCanceled() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimScopedConversation.Restart">
            <summary>设置 ScopedConversation.Restart() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimScopedConversation.TriggerCanceledConversationCanceledEventArgs">
            <summary>设置 ScopedConversation.TriggerCanceled(ConversationCanceledEventArgs args) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.ShimScopedConversation.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimScopedConversation.AllInstances.AssertNotCanceled">
            <summary>设置 ScopedConversation.AssertNotCanceled() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimScopedConversation.AllInstances.Cancel">
            <summary>设置 ScopedConversation.Cancel() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimScopedConversation.AllInstances.CanceledAddEventHandlerOfConversationCanceledEventArgs">
            <summary>设置 ScopedConversation.add_Canceled(EventHandler`1&lt;ConversationCanceledEventArgs&gt; value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimScopedConversation.AllInstances.CanceledRemoveEventHandlerOfConversationCanceledEventArgs">
            <summary>设置 ScopedConversation.remove_Canceled(EventHandler`1&lt;ConversationCanceledEventArgs&gt; value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimScopedConversation.AllInstances.ClearSessions">
            <summary>设置 ScopedConversation.ClearSessions() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimScopedConversation.AllInstances.CreateSessionISessionFactoryIInterceptor">
            <summary>设置 ScopedConversation.CreateSession(ISessionFactory factory, IInterceptor interceptor) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimScopedConversation.AllInstances.Dispose">
            <summary>设置 ScopedConversation.Dispose() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimScopedConversation.AllInstances.DoCancelBooleanException">
            <summary>设置 ScopedConversation.DoCancel(Boolean userCanceled, Exception exceptionCaught) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimScopedConversation.AllInstances.ExecuteAction">
            <summary>设置 ScopedConversation.Execute(Action action) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimScopedConversation.AllInstances.ExecuteActionBoolean">
            <summary>设置 ScopedConversation.Execute(Action action, Boolean silently) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimScopedConversation.AllInstances.ExecuteSilentlyAction">
            <summary>设置 ScopedConversation.ExecuteSilently(Action action) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimScopedConversation.AllInstances.Flush">
            <summary>设置 ScopedConversation.Flush() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimScopedConversation.AllInstances.FlushModeGet">
            <summary>设置 ScopedConversation.get_FlushMode() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimScopedConversation.AllInstances.FlushModeSetConversationFlushMode">
            <summary>设置 ScopedConversation.set_FlushMode(ConversationFlushMode value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimScopedConversation.AllInstances.GetSessionISessionFactoryIInterceptor">
            <summary>设置 ScopedConversation.GetSession(ISessionFactory factory, IInterceptor interceptor) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimScopedConversation.AllInstances.IsCanceledGet">
            <summary>设置 ScopedConversation.get_IsCanceled() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimScopedConversation.AllInstances.Restart">
            <summary>设置 ScopedConversation.Restart() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimScopedConversation.AllInstances.TriggerCanceledConversationCanceledEventArgs">
            <summary>设置 ScopedConversation.TriggerCanceled(ConversationCanceledEventArgs args) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.ShimSessionScope">
            <summary>Castle.ActiveRecord.SessionScope 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimSessionScope.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimSessionScope.#ctor(Castle.ActiveRecord.SessionScope)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimSessionScope.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimSessionScope.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimSessionScope.Bind(Castle.ActiveRecord.ISessionScope)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimSessionScope.Bind(System.IDisposable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimSessionScope.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimSessionScope.Constructor">
            <summary>设置 SessionScope.SessionScope() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimSessionScope.ConstructorFlushAction">
            <summary>设置 SessionScope.SessionScope(FlushAction flushAction) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimSessionScope.ConstructorFlushActionSessionScopeType">
            <summary>设置 SessionScope.SessionScope(FlushAction flushAction, SessionScopeType type) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimSessionScope.CurrentGet">
            <summary>设置 SessionScope.get_Current() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimSessionScope.DisposeBoolean">
            <summary>设置 SessionScope.Dispose(Boolean discardChanges) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimSessionScope.FailSessionISession">
            <summary>设置 SessionScope.FailSession(ISession session) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimSessionScope.HasSessionErrorGet">
            <summary>设置 SessionScope.get_HasSessionError() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimSessionScope.HasSessionErrorSetBoolean">
            <summary>设置 SessionScope.set_HasSessionError(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimSessionScope.PerformDisposalICollectionOfISession">
            <summary>设置 SessionScope.PerformDisposal(ICollection`1&lt;ISession&gt; sessions) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.ShimSessionScope.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimSessionScope.AllInstances.DisposeBoolean">
            <summary>设置 SessionScope.Dispose(Boolean discardChanges) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimSessionScope.AllInstances.FailSessionISession">
            <summary>设置 SessionScope.FailSession(ISession session) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimSessionScope.AllInstances.HasSessionErrorGet">
            <summary>设置 SessionScope.get_HasSessionError() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimSessionScope.AllInstances.HasSessionErrorSetBoolean">
            <summary>设置 SessionScope.set_HasSessionError(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimSessionScope.AllInstances.PerformDisposalICollectionOfISession">
            <summary>设置 SessionScope.PerformDisposal(ICollection`1&lt;ISession&gt; sessions) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.ShimSqlNamedQueryAttribute">
            <summary>Castle.ActiveRecord.SqlNamedQueryAttribute 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimSqlNamedQueryAttribute.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimSqlNamedQueryAttribute.#ctor(Castle.ActiveRecord.SqlNamedQueryAttribute)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimSqlNamedQueryAttribute.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimSqlNamedQueryAttribute.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimSqlNamedQueryAttribute.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimSqlNamedQueryAttribute.ConstructorStringString">
            <summary>设置 SqlNamedQueryAttribute.SqlNamedQueryAttribute(String name, String query) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimSqlNamedQueryAttribute.NameGet">
            <summary>设置 SqlNamedQueryAttribute.get_Name() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimSqlNamedQueryAttribute.QueryGet">
            <summary>设置 SqlNamedQueryAttribute.get_Query() 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.ShimSqlNamedQueryAttribute.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimSqlNamedQueryAttribute.AllInstances.NameGet">
            <summary>设置 SqlNamedQueryAttribute.get_Name() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimSqlNamedQueryAttribute.AllInstances.QueryGet">
            <summary>设置 SqlNamedQueryAttribute.get_Query() 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.ShimStatelessSessionScope">
            <summary>Castle.ActiveRecord.StatelessSessionScope 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimStatelessSessionScope.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimStatelessSessionScope.#ctor(Castle.ActiveRecord.StatelessSessionScope)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimStatelessSessionScope.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimStatelessSessionScope.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimStatelessSessionScope.Bind(Castle.ActiveRecord.ISessionScope)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimStatelessSessionScope.Bind(System.IDisposable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimStatelessSessionScope.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimStatelessSessionScope.Constructor">
            <summary>设置 StatelessSessionScope.StatelessSessionScope() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimStatelessSessionScope.OpenSessionISessionFactoryIInterceptor">
            <summary>设置 StatelessSessionScope.OpenSession(ISessionFactory sessionFactory, IInterceptor interceptor) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.ShimStatelessSessionScope.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimStatelessSessionScope.AllInstances.OpenSessionISessionFactoryIInterceptor">
            <summary>设置 StatelessSessionScope.OpenSession(ISessionFactory sessionFactory, IInterceptor interceptor) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.ShimTimestampAttribute">
            <summary>Castle.ActiveRecord.TimestampAttribute 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimTimestampAttribute.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimTimestampAttribute.#ctor(Castle.ActiveRecord.TimestampAttribute)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimTimestampAttribute.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimTimestampAttribute.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimTimestampAttribute.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimTimestampAttribute.ColumnGet">
            <summary>设置 TimestampAttribute.get_Column() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimTimestampAttribute.ColumnSetString">
            <summary>设置 TimestampAttribute.set_Column(String value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimTimestampAttribute.Constructor">
            <summary>设置 TimestampAttribute.TimestampAttribute() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimTimestampAttribute.ConstructorString">
            <summary>设置 TimestampAttribute.TimestampAttribute(String column) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.ShimTimestampAttribute.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimTimestampAttribute.AllInstances.ColumnGet">
            <summary>设置 TimestampAttribute.get_Column() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimTimestampAttribute.AllInstances.ColumnSetString">
            <summary>设置 TimestampAttribute.set_Column(String value) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.ShimTransactionScope">
            <summary>Castle.ActiveRecord.TransactionScope 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimTransactionScope.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimTransactionScope.#ctor(Castle.ActiveRecord.TransactionScope)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimTransactionScope.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimTransactionScope.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimTransactionScope.Bind(Castle.ActiveRecord.ISessionScope)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimTransactionScope.Bind(System.IDisposable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimTransactionScope.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimTransactionScope.Constructor">
            <summary>设置 TransactionScope.TransactionScope() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimTransactionScope.ConstructorOnDispose">
            <summary>设置 TransactionScope.TransactionScope(OnDispose onDisposeBehavior) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimTransactionScope.ConstructorTransactionMode">
            <summary>设置 TransactionScope.TransactionScope(TransactionMode mode) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimTransactionScope.ConstructorTransactionModeIsolationLevelOnDispose">
            <summary>设置 TransactionScope.TransactionScope(TransactionMode mode, IsolationLevel isolationLevel, OnDispose onDisposeBehavior) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimTransactionScope.ConstructorTransactionModeOnDispose">
            <summary>设置 TransactionScope.TransactionScope(TransactionMode mode, OnDispose onDisposeBehavior) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimTransactionScope.DiscardSessionsICollectionOfISession">
            <summary>设置 TransactionScope.DiscardSessions(ICollection`1&lt;ISession&gt; sessions) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimTransactionScope.EnsureHasTransactionISession">
            <summary>设置 TransactionScope.EnsureHasTransaction(ISession session) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimTransactionScope.FailSessionISession">
            <summary>设置 TransactionScope.FailSession(ISession session) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimTransactionScope.Flush">
            <summary>设置 TransactionScope.Flush() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimTransactionScope.GetSessionObject">
            <summary>设置 TransactionScope.GetSession(Object key) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimTransactionScope.InitializeISession">
            <summary>设置 TransactionScope.Initialize(ISession session) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimTransactionScope.IsKeyKnownObject">
            <summary>设置 TransactionScope.IsKeyKnown(Object key) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimTransactionScope.OnTransactionCompletedAddEventHandler">
            <summary>设置 TransactionScope.add_OnTransactionCompleted(EventHandler value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimTransactionScope.OnTransactionCompletedRemoveEventHandler">
            <summary>设置 TransactionScope.remove_OnTransactionCompleted(EventHandler value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimTransactionScope.OpenSessionISessionFactoryIInterceptor">
            <summary>设置 TransactionScope.OpenSession(ISessionFactory sessionFactory, IInterceptor interceptor) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimTransactionScope.PerformDisposalICollectionOfISession">
            <summary>设置 TransactionScope.PerformDisposal(ICollection`1&lt;ISession&gt; sessions) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimTransactionScope.RaiseOnCompleted">
            <summary>设置 TransactionScope.RaiseOnCompleted() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimTransactionScope.RegisterSessionObjectISession">
            <summary>设置 TransactionScope.RegisterSession(Object key, ISession session) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimTransactionScope.StaticConstructor">
            <summary>设置 TransactionScope.TransactionScope() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimTransactionScope.VoteCommit">
            <summary>设置 TransactionScope.VoteCommit() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimTransactionScope.VoteRollBack">
            <summary>设置 TransactionScope.VoteRollBack() 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.ShimTransactionScope.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimTransactionScope.AllInstances.DiscardSessionsICollectionOfISession">
            <summary>设置 TransactionScope.DiscardSessions(ICollection`1&lt;ISession&gt; sessions) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimTransactionScope.AllInstances.EnsureHasTransactionISession">
            <summary>设置 TransactionScope.EnsureHasTransaction(ISession session) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimTransactionScope.AllInstances.FailSessionISession">
            <summary>设置 TransactionScope.FailSession(ISession session) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimTransactionScope.AllInstances.Flush">
            <summary>设置 TransactionScope.Flush() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimTransactionScope.AllInstances.GetSessionObject">
            <summary>设置 TransactionScope.GetSession(Object key) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimTransactionScope.AllInstances.InitializeISession">
            <summary>设置 TransactionScope.Initialize(ISession session) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimTransactionScope.AllInstances.IsKeyKnownObject">
            <summary>设置 TransactionScope.IsKeyKnown(Object key) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimTransactionScope.AllInstances.OnTransactionCompletedAddEventHandler">
            <summary>设置 TransactionScope.add_OnTransactionCompleted(EventHandler value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimTransactionScope.AllInstances.OnTransactionCompletedRemoveEventHandler">
            <summary>设置 TransactionScope.remove_OnTransactionCompleted(EventHandler value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimTransactionScope.AllInstances.OpenSessionISessionFactoryIInterceptor">
            <summary>设置 TransactionScope.OpenSession(ISessionFactory sessionFactory, IInterceptor interceptor) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimTransactionScope.AllInstances.PerformDisposalICollectionOfISession">
            <summary>设置 TransactionScope.PerformDisposal(ICollection`1&lt;ISession&gt; sessions) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimTransactionScope.AllInstances.RaiseOnCompleted">
            <summary>设置 TransactionScope.RaiseOnCompleted() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimTransactionScope.AllInstances.RegisterSessionObjectISession">
            <summary>设置 TransactionScope.RegisterSession(Object key, ISession session) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimTransactionScope.AllInstances.VoteCommit">
            <summary>设置 TransactionScope.VoteCommit() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimTransactionScope.AllInstances.VoteRollBack">
            <summary>设置 TransactionScope.VoteRollBack() 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.ShimValidateIsUniqueAttribute">
            <summary>Castle.ActiveRecord.ValidateIsUniqueAttribute 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimValidateIsUniqueAttribute.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimValidateIsUniqueAttribute.#ctor(Castle.ActiveRecord.ValidateIsUniqueAttribute)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimValidateIsUniqueAttribute.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimValidateIsUniqueAttribute.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimValidateIsUniqueAttribute.Bind(Castle.Components.Validator.IValidatorBuilder)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimValidateIsUniqueAttribute.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimValidateIsUniqueAttribute.Build">
            <summary>设置 ValidateIsUniqueAttribute.Build() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimValidateIsUniqueAttribute.Constructor">
            <summary>设置 ValidateIsUniqueAttribute.ValidateIsUniqueAttribute() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimValidateIsUniqueAttribute.ConstructorString">
            <summary>设置 ValidateIsUniqueAttribute.ValidateIsUniqueAttribute(String errorMessage) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.ShimValidateIsUniqueAttribute.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimValidateIsUniqueAttribute.AllInstances.Build">
            <summary>设置 ValidateIsUniqueAttribute.Build() 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.ShimVersionAttribute">
            <summary>Castle.ActiveRecord.VersionAttribute 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimVersionAttribute.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimVersionAttribute.#ctor(Castle.ActiveRecord.VersionAttribute)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimVersionAttribute.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimVersionAttribute.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimVersionAttribute.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimVersionAttribute.ColumnGet">
            <summary>设置 VersionAttribute.get_Column() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimVersionAttribute.ColumnSetString">
            <summary>设置 VersionAttribute.set_Column(String value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimVersionAttribute.Constructor">
            <summary>设置 VersionAttribute.VersionAttribute() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimVersionAttribute.ConstructorString">
            <summary>设置 VersionAttribute.VersionAttribute(String column) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimVersionAttribute.TypeGet">
            <summary>设置 VersionAttribute.get_Type() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimVersionAttribute.TypeSetString">
            <summary>设置 VersionAttribute.set_Type(String value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimVersionAttribute.UnsavedValueGet">
            <summary>设置 VersionAttribute.get_UnsavedValue() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimVersionAttribute.UnsavedValueSetString">
            <summary>设置 VersionAttribute.set_UnsavedValue(String value) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.ShimVersionAttribute.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimVersionAttribute.AllInstances.ColumnGet">
            <summary>设置 VersionAttribute.get_Column() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimVersionAttribute.AllInstances.ColumnSetString">
            <summary>设置 VersionAttribute.set_Column(String value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimVersionAttribute.AllInstances.TypeGet">
            <summary>设置 VersionAttribute.get_Type() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimVersionAttribute.AllInstances.TypeSetString">
            <summary>设置 VersionAttribute.set_Type(String value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimVersionAttribute.AllInstances.UnsavedValueGet">
            <summary>设置 VersionAttribute.get_UnsavedValue() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimVersionAttribute.AllInstances.UnsavedValueSetString">
            <summary>设置 VersionAttribute.set_UnsavedValue(String value) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.ShimWithAccessAttribute">
            <summary>Castle.ActiveRecord.WithAccessAttribute 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimWithAccessAttribute.#ctor(Castle.ActiveRecord.WithAccessAttribute)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimWithAccessAttribute.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimWithAccessAttribute.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimWithAccessAttribute.AccessGet">
            <summary>设置 WithAccessAttribute.get_Access() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimWithAccessAttribute.AccessSetPropertyAccess">
            <summary>设置 WithAccessAttribute.set_Access(PropertyAccess value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimWithAccessAttribute.AccessStringGet">
            <summary>设置 WithAccessAttribute.get_AccessString() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimWithAccessAttribute.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimWithAccessAttribute.Constructor">
            <summary>设置 WithAccessAttribute.WithAccessAttribute() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimWithAccessAttribute.CustomAccessGet">
            <summary>设置 WithAccessAttribute.get_CustomAccess() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimWithAccessAttribute.CustomAccessSetString">
            <summary>设置 WithAccessAttribute.set_CustomAccess(String value) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.ShimWithAccessAttribute.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimWithAccessAttribute.AllInstances.AccessGet">
            <summary>设置 WithAccessAttribute.get_Access() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimWithAccessAttribute.AllInstances.AccessSetPropertyAccess">
            <summary>设置 WithAccessAttribute.set_Access(PropertyAccess value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimWithAccessAttribute.AllInstances.AccessStringGet">
            <summary>设置 WithAccessAttribute.get_AccessString() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimWithAccessAttribute.AllInstances.CustomAccessGet">
            <summary>设置 WithAccessAttribute.get_CustomAccess() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimWithAccessAttribute.AllInstances.CustomAccessSetString">
            <summary>设置 WithAccessAttribute.set_CustomAccess(String value) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.ShimWithAccessOptionalTableAttribute">
            <summary>Castle.ActiveRecord.WithAccessOptionalTableAttribute 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimWithAccessOptionalTableAttribute.#ctor(Castle.ActiveRecord.WithAccessOptionalTableAttribute)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimWithAccessOptionalTableAttribute.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.ShimWithAccessOptionalTableAttribute.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimWithAccessOptionalTableAttribute.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimWithAccessOptionalTableAttribute.Constructor">
            <summary>设置 WithAccessOptionalTableAttribute.WithAccessOptionalTableAttribute() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimWithAccessOptionalTableAttribute.OptimisticLockGet">
            <summary>设置 WithAccessOptionalTableAttribute.get_OptimisticLock() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimWithAccessOptionalTableAttribute.OptimisticLockSetBoolean">
            <summary>设置 WithAccessOptionalTableAttribute.set_OptimisticLock(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimWithAccessOptionalTableAttribute.TableGet">
            <summary>设置 WithAccessOptionalTableAttribute.get_Table() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimWithAccessOptionalTableAttribute.TableSetString">
            <summary>设置 WithAccessOptionalTableAttribute.set_Table(String value) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.ShimWithAccessOptionalTableAttribute.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimWithAccessOptionalTableAttribute.AllInstances.OptimisticLockGet">
            <summary>设置 WithAccessOptionalTableAttribute.get_OptimisticLock() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimWithAccessOptionalTableAttribute.AllInstances.OptimisticLockSetBoolean">
            <summary>设置 WithAccessOptionalTableAttribute.set_OptimisticLock(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimWithAccessOptionalTableAttribute.AllInstances.TableGet">
            <summary>设置 WithAccessOptionalTableAttribute.get_Table() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.ShimWithAccessOptionalTableAttribute.AllInstances.TableSetString">
            <summary>设置 WithAccessOptionalTableAttribute.set_Table(String value) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.StubActiveRecordAttribute">
            <summary>Castle.ActiveRecord.ActiveRecordAttribute 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubActiveRecordAttribute.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubActiveRecordAttribute.#ctor(System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubActiveRecordAttribute.#ctor(System.String,System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubActiveRecordAttribute.Equals(System.Object)">
            <summary>设置 Attribute.Equals(Object obj) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubActiveRecordAttribute.EqualsObject">
            <summary>设置 Attribute.Equals(Object obj) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubActiveRecordAttribute.GetHashCode">
            <summary>设置 Attribute.GetHashCode() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubActiveRecordAttribute.GetHashCode01">
            <summary>设置 Attribute.GetHashCode() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubActiveRecordAttribute.InitializeStub">
            <summary>初始化 type StubActiveRecordAttribute 的新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubActiveRecordAttribute.IsDefaultAttribute">
            <summary>设置 Attribute.IsDefaultAttribute() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubActiveRecordAttribute.IsDefaultAttribute01">
            <summary>设置 Attribute.IsDefaultAttribute() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubActiveRecordAttribute.Match(System.Object)">
            <summary>设置 Attribute.Match(Object obj) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubActiveRecordAttribute.MatchObject">
            <summary>设置 Attribute.Match(Object obj) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubActiveRecordAttribute.TypeIdGet">
            <summary>设置 Attribute.get_TypeId() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubActiveRecordAttribute.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubActiveRecordAttribute.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubActiveRecordAttribute.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubActiveRecordAttribute.TypeId">
            <summary>设置 Attribute.get_TypeId() 的 stub</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.StubActiveRecordBase">
            <summary>Castle.ActiveRecord.ActiveRecordBase 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubActiveRecordBase.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubActiveRecordBase.BeforeDelete(System.Collections.IDictionary)">
            <summary>设置 ActiveRecordHooksBase.BeforeDelete(IDictionary adapter) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubActiveRecordBase.BeforeDeleteIDictionary">
            <summary>设置 ActiveRecordHooksBase.BeforeDelete(IDictionary adapter) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubActiveRecordBase.BeforeLoad(System.Object,System.Collections.IDictionary)">
            <summary>设置 ActiveRecordHooksBase.BeforeLoad(Object id, IDictionary adapter) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubActiveRecordBase.BeforeLoadObjectIDictionary">
            <summary>设置 ActiveRecordHooksBase.BeforeLoad(Object id, IDictionary adapter) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubActiveRecordBase.BeforeSave(System.Collections.IDictionary)">
            <summary>设置 ActiveRecordHooksBase.BeforeSave(IDictionary state) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubActiveRecordBase.BeforeSaveIDictionary">
            <summary>设置 ActiveRecordHooksBase.BeforeSave(IDictionary state) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubActiveRecordBase.FindDirty(System.Object,System.Collections.IDictionary,System.Collections.IDictionary,NHibernate.Type.IType[])">
            <summary>设置 ActiveRecordHooksBase.FindDirty(Object id, IDictionary previousState, IDictionary currentState, IType[] types) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubActiveRecordBase.FindDirtyObjectIDictionaryIDictionaryITypeArray">
            <summary>设置 ActiveRecordHooksBase.FindDirty(Object id, IDictionary previousState, IDictionary currentState, IType[] types) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubActiveRecordBase.InitializeStub">
            <summary>初始化 type StubActiveRecordBase 的新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubActiveRecordBase.IsUnsaved">
            <summary>设置 ActiveRecordHooksBase.IsUnsaved() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubActiveRecordBase.IsUnsaved01">
            <summary>设置 ActiveRecordHooksBase.IsUnsaved() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubActiveRecordBase.OnDelete">
            <summary>设置 ActiveRecordHooksBase.OnDelete() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubActiveRecordBase.OnDelete01">
            <summary>设置 ActiveRecordHooksBase.OnDelete() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubActiveRecordBase.OnFlushDirty(System.Object,System.Collections.IDictionary,System.Collections.IDictionary,NHibernate.Type.IType[])">
            <summary>设置 ActiveRecordHooksBase.OnFlushDirty(Object id, IDictionary previousState, IDictionary currentState, IType[] types) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubActiveRecordBase.OnFlushDirtyObjectIDictionaryIDictionaryITypeArray">
            <summary>设置 ActiveRecordHooksBase.OnFlushDirty(Object id, IDictionary previousState, IDictionary currentState, IType[] types) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubActiveRecordBase.OnLoad(System.Object)">
            <summary>设置 ActiveRecordHooksBase.OnLoad(Object id) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubActiveRecordBase.OnLoadObject">
            <summary>设置 ActiveRecordHooksBase.OnLoad(Object id) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubActiveRecordBase.OnSave">
            <summary>设置 ActiveRecordHooksBase.OnSave() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubActiveRecordBase.OnSave01">
            <summary>设置 ActiveRecordHooksBase.OnSave() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubActiveRecordBase.OnUpdate">
            <summary>设置 ActiveRecordHooksBase.OnUpdate() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubActiveRecordBase.OnUpdate01">
            <summary>设置 ActiveRecordHooksBase.OnUpdate() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubActiveRecordBase.PostFlush">
            <summary>设置 ActiveRecordHooksBase.PostFlush() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubActiveRecordBase.PostFlush01">
            <summary>设置 ActiveRecordHooksBase.PostFlush() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubActiveRecordBase.PreFlush">
            <summary>设置 ActiveRecordHooksBase.PreFlush() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubActiveRecordBase.PreFlush01">
            <summary>设置 ActiveRecordHooksBase.PreFlush() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubActiveRecordBase.ToString">
            <summary>设置 ActiveRecordBase.ToString() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubActiveRecordBase.ToString01">
            <summary>设置 ActiveRecordBase.ToString() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubActiveRecordBase.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubActiveRecordBase.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubActiveRecordBase.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.StubActiveRecordBase`1">
            <summary>Castle.ActiveRecord.ActiveRecordBase`1 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubActiveRecordBase`1.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubActiveRecordBase`1.BeforeDelete(System.Collections.IDictionary)">
            <summary>设置 ActiveRecordHooksBase.BeforeDelete(IDictionary adapter) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubActiveRecordBase`1.BeforeDeleteIDictionary">
            <summary>设置 ActiveRecordHooksBase.BeforeDelete(IDictionary adapter) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubActiveRecordBase`1.BeforeLoad(System.Object,System.Collections.IDictionary)">
            <summary>设置 ActiveRecordHooksBase.BeforeLoad(Object id, IDictionary adapter) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubActiveRecordBase`1.BeforeLoadObjectIDictionary">
            <summary>设置 ActiveRecordHooksBase.BeforeLoad(Object id, IDictionary adapter) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubActiveRecordBase`1.BeforeSave(System.Collections.IDictionary)">
            <summary>设置 ActiveRecordHooksBase.BeforeSave(IDictionary state) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubActiveRecordBase`1.BeforeSaveIDictionary">
            <summary>设置 ActiveRecordHooksBase.BeforeSave(IDictionary state) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubActiveRecordBase`1.FindDirty(System.Object,System.Collections.IDictionary,System.Collections.IDictionary,NHibernate.Type.IType[])">
            <summary>设置 ActiveRecordHooksBase.FindDirty(Object id, IDictionary previousState, IDictionary currentState, IType[] types) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubActiveRecordBase`1.FindDirtyObjectIDictionaryIDictionaryITypeArray">
            <summary>设置 ActiveRecordHooksBase.FindDirty(Object id, IDictionary previousState, IDictionary currentState, IType[] types) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubActiveRecordBase`1.InitializeStub">
            <summary>初始化 type StubActiveRecordBase 的新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubActiveRecordBase`1.IsUnsaved">
            <summary>设置 ActiveRecordHooksBase.IsUnsaved() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubActiveRecordBase`1.IsUnsaved01">
            <summary>设置 ActiveRecordHooksBase.IsUnsaved() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubActiveRecordBase`1.OnDelete">
            <summary>设置 ActiveRecordHooksBase.OnDelete() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubActiveRecordBase`1.OnDelete01">
            <summary>设置 ActiveRecordHooksBase.OnDelete() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubActiveRecordBase`1.OnFlushDirty(System.Object,System.Collections.IDictionary,System.Collections.IDictionary,NHibernate.Type.IType[])">
            <summary>设置 ActiveRecordHooksBase.OnFlushDirty(Object id, IDictionary previousState, IDictionary currentState, IType[] types) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubActiveRecordBase`1.OnFlushDirtyObjectIDictionaryIDictionaryITypeArray">
            <summary>设置 ActiveRecordHooksBase.OnFlushDirty(Object id, IDictionary previousState, IDictionary currentState, IType[] types) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubActiveRecordBase`1.OnLoad(System.Object)">
            <summary>设置 ActiveRecordHooksBase.OnLoad(Object id) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubActiveRecordBase`1.OnLoadObject">
            <summary>设置 ActiveRecordHooksBase.OnLoad(Object id) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubActiveRecordBase`1.OnSave">
            <summary>设置 ActiveRecordHooksBase.OnSave() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubActiveRecordBase`1.OnSave01">
            <summary>设置 ActiveRecordHooksBase.OnSave() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubActiveRecordBase`1.OnUpdate">
            <summary>设置 ActiveRecordHooksBase.OnUpdate() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubActiveRecordBase`1.OnUpdate01">
            <summary>设置 ActiveRecordHooksBase.OnUpdate() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubActiveRecordBase`1.PostFlush">
            <summary>设置 ActiveRecordHooksBase.PostFlush() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubActiveRecordBase`1.PostFlush01">
            <summary>设置 ActiveRecordHooksBase.PostFlush() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubActiveRecordBase`1.PreFlush">
            <summary>设置 ActiveRecordHooksBase.PreFlush() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubActiveRecordBase`1.PreFlush01">
            <summary>设置 ActiveRecordHooksBase.PreFlush() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubActiveRecordBase`1.ToString">
            <summary>设置 ActiveRecordBase.ToString() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubActiveRecordBase`1.ToString01">
            <summary>设置 ActiveRecordBase.ToString() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubActiveRecordBase`1.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubActiveRecordBase`1.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubActiveRecordBase`1.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.StubActiveRecordBaseQuery">
            <summary>Castle.ActiveRecord.ActiveRecordBaseQuery 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubActiveRecordBaseQuery.#ctor(System.Type)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubActiveRecordBaseQuery.Clone">
            <summary>设置 ActiveRecordBaseQuery.Clone() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubActiveRecordBaseQuery.Clone01">
            <summary>设置 ActiveRecordBaseQuery.Clone() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubActiveRecordBaseQuery.CreateQuery(NHibernate.ISession)">
            <summary>设置 ActiveRecordBaseQuery.CreateQuery(ISession session) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubActiveRecordBaseQuery.CreateQueryISession">
            <summary>设置 ActiveRecordBaseQuery.CreateQuery(ISession session) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubActiveRecordBaseQuery.InitializeStub">
            <summary>初始化 type StubActiveRecordBaseQuery 的新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubActiveRecordBaseQuery.InternalEnumerate(NHibernate.ISession)">
            <summary>设置 ActiveRecordBaseQuery.InternalEnumerate(ISession session) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubActiveRecordBaseQuery.InternalEnumerateISession">
            <summary>设置 ActiveRecordBaseQuery.InternalEnumerate(ISession session) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubActiveRecordBaseQuery.InternalExecute(NHibernate.ISession)">
            <summary>设置 ActiveRecordBaseQuery.InternalExecute(ISession session) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubActiveRecordBaseQuery.InternalExecuteISession">
            <summary>设置 ActiveRecordBaseQuery.InternalExecute(ISession session) 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubActiveRecordBaseQuery.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubActiveRecordBaseQuery.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubActiveRecordBaseQuery.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.StubActiveRecordHooksBase">
            <summary>Castle.ActiveRecord.ActiveRecordHooksBase 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubActiveRecordHooksBase.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubActiveRecordHooksBase.BeforeDelete(System.Collections.IDictionary)">
            <summary>设置 ActiveRecordHooksBase.BeforeDelete(IDictionary adapter) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubActiveRecordHooksBase.BeforeDeleteIDictionary">
            <summary>设置 ActiveRecordHooksBase.BeforeDelete(IDictionary adapter) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubActiveRecordHooksBase.BeforeLoad(System.Object,System.Collections.IDictionary)">
            <summary>设置 ActiveRecordHooksBase.BeforeLoad(Object id, IDictionary adapter) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubActiveRecordHooksBase.BeforeLoadObjectIDictionary">
            <summary>设置 ActiveRecordHooksBase.BeforeLoad(Object id, IDictionary adapter) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubActiveRecordHooksBase.BeforeSave(System.Collections.IDictionary)">
            <summary>设置 ActiveRecordHooksBase.BeforeSave(IDictionary state) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubActiveRecordHooksBase.BeforeSaveIDictionary">
            <summary>设置 ActiveRecordHooksBase.BeforeSave(IDictionary state) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubActiveRecordHooksBase.FindDirty(System.Object,System.Collections.IDictionary,System.Collections.IDictionary,NHibernate.Type.IType[])">
            <summary>设置 ActiveRecordHooksBase.FindDirty(Object id, IDictionary previousState, IDictionary currentState, IType[] types) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubActiveRecordHooksBase.FindDirtyObjectIDictionaryIDictionaryITypeArray">
            <summary>设置 ActiveRecordHooksBase.FindDirty(Object id, IDictionary previousState, IDictionary currentState, IType[] types) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubActiveRecordHooksBase.InitializeStub">
            <summary>初始化 type StubActiveRecordHooksBase 的新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubActiveRecordHooksBase.IsUnsaved">
            <summary>设置 ActiveRecordHooksBase.IsUnsaved() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubActiveRecordHooksBase.IsUnsaved01">
            <summary>设置 ActiveRecordHooksBase.IsUnsaved() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubActiveRecordHooksBase.OnDelete">
            <summary>设置 ActiveRecordHooksBase.OnDelete() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubActiveRecordHooksBase.OnDelete01">
            <summary>设置 ActiveRecordHooksBase.OnDelete() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubActiveRecordHooksBase.OnFlushDirty(System.Object,System.Collections.IDictionary,System.Collections.IDictionary,NHibernate.Type.IType[])">
            <summary>设置 ActiveRecordHooksBase.OnFlushDirty(Object id, IDictionary previousState, IDictionary currentState, IType[] types) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubActiveRecordHooksBase.OnFlushDirtyObjectIDictionaryIDictionaryITypeArray">
            <summary>设置 ActiveRecordHooksBase.OnFlushDirty(Object id, IDictionary previousState, IDictionary currentState, IType[] types) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubActiveRecordHooksBase.OnLoad(System.Object)">
            <summary>设置 ActiveRecordHooksBase.OnLoad(Object id) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubActiveRecordHooksBase.OnLoadObject">
            <summary>设置 ActiveRecordHooksBase.OnLoad(Object id) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubActiveRecordHooksBase.OnSave">
            <summary>设置 ActiveRecordHooksBase.OnSave() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubActiveRecordHooksBase.OnSave01">
            <summary>设置 ActiveRecordHooksBase.OnSave() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubActiveRecordHooksBase.OnUpdate">
            <summary>设置 ActiveRecordHooksBase.OnUpdate() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubActiveRecordHooksBase.OnUpdate01">
            <summary>设置 ActiveRecordHooksBase.OnUpdate() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubActiveRecordHooksBase.PostFlush">
            <summary>设置 ActiveRecordHooksBase.PostFlush() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubActiveRecordHooksBase.PostFlush01">
            <summary>设置 ActiveRecordHooksBase.PostFlush() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubActiveRecordHooksBase.PreFlush">
            <summary>设置 ActiveRecordHooksBase.PreFlush() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubActiveRecordHooksBase.PreFlush01">
            <summary>设置 ActiveRecordHooksBase.PreFlush() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubActiveRecordHooksBase.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubActiveRecordHooksBase.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubActiveRecordHooksBase.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.StubActiveRecordHooksValidationBase">
            <summary>Castle.ActiveRecord.ActiveRecordHooksValidationBase 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubActiveRecordHooksValidationBase.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubActiveRecordHooksValidationBase.ActualValidatorGet">
            <summary>设置 ActiveRecordHooksValidationBase.get_ActualValidator() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubActiveRecordHooksValidationBase.BeforeDelete(System.Collections.IDictionary)">
            <summary>设置 ActiveRecordHooksBase.BeforeDelete(IDictionary adapter) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubActiveRecordHooksValidationBase.BeforeDeleteIDictionary">
            <summary>设置 ActiveRecordHooksBase.BeforeDelete(IDictionary adapter) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubActiveRecordHooksValidationBase.BeforeLoad(System.Object,System.Collections.IDictionary)">
            <summary>设置 ActiveRecordHooksBase.BeforeLoad(Object id, IDictionary adapter) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubActiveRecordHooksValidationBase.BeforeLoadObjectIDictionary">
            <summary>设置 ActiveRecordHooksBase.BeforeLoad(Object id, IDictionary adapter) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubActiveRecordHooksValidationBase.BeforeSave(System.Collections.IDictionary)">
            <summary>设置 ActiveRecordHooksValidationBase.BeforeSave(IDictionary state) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubActiveRecordHooksValidationBase.BeforeSaveIDictionary">
            <summary>设置 ActiveRecordHooksValidationBase.BeforeSave(IDictionary state) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubActiveRecordHooksValidationBase.FindDirty(System.Object,System.Collections.IDictionary,System.Collections.IDictionary,NHibernate.Type.IType[])">
            <summary>设置 ActiveRecordHooksBase.FindDirty(Object id, IDictionary previousState, IDictionary currentState, IType[] types) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubActiveRecordHooksValidationBase.FindDirtyObjectIDictionaryIDictionaryITypeArray">
            <summary>设置 ActiveRecordHooksBase.FindDirty(Object id, IDictionary previousState, IDictionary currentState, IType[] types) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubActiveRecordHooksValidationBase.InitializeStub">
            <summary>初始化 type StubActiveRecordHooksValidationBase 的新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubActiveRecordHooksValidationBase.IsUnsaved">
            <summary>设置 ActiveRecordHooksBase.IsUnsaved() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubActiveRecordHooksValidationBase.IsUnsaved01">
            <summary>设置 ActiveRecordHooksBase.IsUnsaved() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubActiveRecordHooksValidationBase.IsValid">
            <summary>设置 ActiveRecordHooksValidationBase.IsValid() 的 存根</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubActiveRecordHooksValidationBase.IsValid(Castle.Components.Validator.RunWhen)">
            <summary>设置 ActiveRecordHooksValidationBase.IsValid(RunWhen runWhen) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubActiveRecordHooksValidationBase.IsValid01">
            <summary>设置 ActiveRecordHooksValidationBase.IsValid() 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubActiveRecordHooksValidationBase.IsValidRunWhen">
            <summary>设置 ActiveRecordHooksValidationBase.IsValid(RunWhen runWhen) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubActiveRecordHooksValidationBase.OnDelete">
            <summary>设置 ActiveRecordHooksBase.OnDelete() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubActiveRecordHooksValidationBase.OnDelete01">
            <summary>设置 ActiveRecordHooksBase.OnDelete() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubActiveRecordHooksValidationBase.OnFlushDirty(System.Object,System.Collections.IDictionary,System.Collections.IDictionary,NHibernate.Type.IType[])">
            <summary>设置 ActiveRecordHooksValidationBase.OnFlushDirty(Object id, IDictionary previousState, IDictionary currentState, IType[] types) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubActiveRecordHooksValidationBase.OnFlushDirtyObjectIDictionaryIDictionaryITypeArray">
            <summary>设置 ActiveRecordHooksValidationBase.OnFlushDirty(Object id, IDictionary previousState, IDictionary currentState, IType[] types) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubActiveRecordHooksValidationBase.OnLoad(System.Object)">
            <summary>设置 ActiveRecordHooksBase.OnLoad(Object id) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubActiveRecordHooksValidationBase.OnLoadObject">
            <summary>设置 ActiveRecordHooksBase.OnLoad(Object id) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubActiveRecordHooksValidationBase.OnNotValid">
            <summary>设置 ActiveRecordHooksValidationBase.OnNotValid() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubActiveRecordHooksValidationBase.OnNotValid01">
            <summary>设置 ActiveRecordHooksValidationBase.OnNotValid() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubActiveRecordHooksValidationBase.OnSave">
            <summary>设置 ActiveRecordHooksBase.OnSave() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubActiveRecordHooksValidationBase.OnSave01">
            <summary>设置 ActiveRecordHooksBase.OnSave() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubActiveRecordHooksValidationBase.OnUpdate">
            <summary>设置 ActiveRecordHooksBase.OnUpdate() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubActiveRecordHooksValidationBase.OnUpdate01">
            <summary>设置 ActiveRecordHooksBase.OnUpdate() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubActiveRecordHooksValidationBase.PostFlush">
            <summary>设置 ActiveRecordHooksBase.PostFlush() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubActiveRecordHooksValidationBase.PostFlush01">
            <summary>设置 ActiveRecordHooksBase.PostFlush() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubActiveRecordHooksValidationBase.PreFlush">
            <summary>设置 ActiveRecordHooksBase.PreFlush() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubActiveRecordHooksValidationBase.PreFlush01">
            <summary>设置 ActiveRecordHooksBase.PreFlush() 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubActiveRecordHooksValidationBase.PropertiesValidationErrorMessagesGet">
            <summary>设置 ActiveRecordHooksValidationBase.get_PropertiesValidationErrorMessages() 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubActiveRecordHooksValidationBase.ValidationErrorMessagesGet">
            <summary>设置 ActiveRecordHooksValidationBase.get_ValidationErrorMessages() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubActiveRecordHooksValidationBase.ActualValidator">
            <summary>设置 ActiveRecordHooksValidationBase.get_ActualValidator() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubActiveRecordHooksValidationBase.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubActiveRecordHooksValidationBase.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubActiveRecordHooksValidationBase.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubActiveRecordHooksValidationBase.PropertiesValidationErrorMessages">
            <summary>设置 ActiveRecordHooksValidationBase.get_PropertiesValidationErrorMessages() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubActiveRecordHooksValidationBase.ValidationErrorMessages">
            <summary>设置 ActiveRecordHooksValidationBase.get_ValidationErrorMessages() 的 stub</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.StubActiveRecordMediator">
            <summary>Castle.ActiveRecord.ActiveRecordMediator 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubActiveRecordMediator.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubActiveRecordMediator.InitializeStub">
            <summary>初始化 type StubActiveRecordMediator 的新实例</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubActiveRecordMediator.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubActiveRecordMediator.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubActiveRecordMediator.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.StubActiveRecordMediator`1">
            <summary>Castle.ActiveRecord.ActiveRecordMediator`1 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubActiveRecordMediator`1.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubActiveRecordMediator`1.InitializeStub">
            <summary>初始化 type StubActiveRecordMediator 的新实例</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubActiveRecordMediator`1.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubActiveRecordMediator`1.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubActiveRecordMediator`1.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.StubActiveRecordSkipAttribute">
            <summary>Castle.ActiveRecord.ActiveRecordSkipAttribute 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubActiveRecordSkipAttribute.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubActiveRecordSkipAttribute.Equals(System.Object)">
            <summary>设置 Attribute.Equals(Object obj) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubActiveRecordSkipAttribute.EqualsObject">
            <summary>设置 Attribute.Equals(Object obj) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubActiveRecordSkipAttribute.GetHashCode">
            <summary>设置 Attribute.GetHashCode() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubActiveRecordSkipAttribute.GetHashCode01">
            <summary>设置 Attribute.GetHashCode() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubActiveRecordSkipAttribute.InitializeStub">
            <summary>初始化 type StubActiveRecordSkipAttribute 的新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubActiveRecordSkipAttribute.IsDefaultAttribute">
            <summary>设置 Attribute.IsDefaultAttribute() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubActiveRecordSkipAttribute.IsDefaultAttribute01">
            <summary>设置 Attribute.IsDefaultAttribute() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubActiveRecordSkipAttribute.Match(System.Object)">
            <summary>设置 Attribute.Match(Object obj) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubActiveRecordSkipAttribute.MatchObject">
            <summary>设置 Attribute.Match(Object obj) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubActiveRecordSkipAttribute.TypeIdGet">
            <summary>设置 Attribute.get_TypeId() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubActiveRecordSkipAttribute.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubActiveRecordSkipAttribute.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubActiveRecordSkipAttribute.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubActiveRecordSkipAttribute.TypeId">
            <summary>设置 Attribute.get_TypeId() 的 stub</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.StubActiveRecordValidationBase">
            <summary>Castle.ActiveRecord.ActiveRecordValidationBase 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubActiveRecordValidationBase.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubActiveRecordValidationBase.ActualValidatorGet">
            <summary>设置 ActiveRecordValidationBase.get_ActualValidator() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubActiveRecordValidationBase.BeforeDelete(System.Collections.IDictionary)">
            <summary>设置 ActiveRecordHooksBase.BeforeDelete(IDictionary adapter) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubActiveRecordValidationBase.BeforeDeleteIDictionary">
            <summary>设置 ActiveRecordHooksBase.BeforeDelete(IDictionary adapter) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubActiveRecordValidationBase.BeforeLoad(System.Object,System.Collections.IDictionary)">
            <summary>设置 ActiveRecordHooksBase.BeforeLoad(Object id, IDictionary adapter) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubActiveRecordValidationBase.BeforeLoadObjectIDictionary">
            <summary>设置 ActiveRecordHooksBase.BeforeLoad(Object id, IDictionary adapter) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubActiveRecordValidationBase.BeforeSave(System.Collections.IDictionary)">
            <summary>设置 ActiveRecordValidationBase.BeforeSave(IDictionary state) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubActiveRecordValidationBase.BeforeSaveIDictionary">
            <summary>设置 ActiveRecordValidationBase.BeforeSave(IDictionary state) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubActiveRecordValidationBase.FindDirty(System.Object,System.Collections.IDictionary,System.Collections.IDictionary,NHibernate.Type.IType[])">
            <summary>设置 ActiveRecordHooksBase.FindDirty(Object id, IDictionary previousState, IDictionary currentState, IType[] types) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubActiveRecordValidationBase.FindDirtyObjectIDictionaryIDictionaryITypeArray">
            <summary>设置 ActiveRecordHooksBase.FindDirty(Object id, IDictionary previousState, IDictionary currentState, IType[] types) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubActiveRecordValidationBase.InitializeStub">
            <summary>初始化 type StubActiveRecordValidationBase 的新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubActiveRecordValidationBase.IsUnsaved">
            <summary>设置 ActiveRecordHooksBase.IsUnsaved() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubActiveRecordValidationBase.IsUnsaved01">
            <summary>设置 ActiveRecordHooksBase.IsUnsaved() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubActiveRecordValidationBase.IsValid">
            <summary>设置 ActiveRecordValidationBase.IsValid() 的 存根</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubActiveRecordValidationBase.IsValid(Castle.Components.Validator.RunWhen)">
            <summary>设置 ActiveRecordValidationBase.IsValid(RunWhen runWhen) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubActiveRecordValidationBase.IsValid01">
            <summary>设置 ActiveRecordValidationBase.IsValid() 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubActiveRecordValidationBase.IsValidRunWhen">
            <summary>设置 ActiveRecordValidationBase.IsValid(RunWhen runWhen) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubActiveRecordValidationBase.OnDelete">
            <summary>设置 ActiveRecordHooksBase.OnDelete() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubActiveRecordValidationBase.OnDelete01">
            <summary>设置 ActiveRecordHooksBase.OnDelete() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubActiveRecordValidationBase.OnFlushDirty(System.Object,System.Collections.IDictionary,System.Collections.IDictionary,NHibernate.Type.IType[])">
            <summary>设置 ActiveRecordValidationBase.OnFlushDirty(Object id, IDictionary previousState, IDictionary currentState, IType[] types) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubActiveRecordValidationBase.OnFlushDirtyObjectIDictionaryIDictionaryITypeArray">
            <summary>设置 ActiveRecordValidationBase.OnFlushDirty(Object id, IDictionary previousState, IDictionary currentState, IType[] types) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubActiveRecordValidationBase.OnLoad(System.Object)">
            <summary>设置 ActiveRecordHooksBase.OnLoad(Object id) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubActiveRecordValidationBase.OnLoadObject">
            <summary>设置 ActiveRecordHooksBase.OnLoad(Object id) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubActiveRecordValidationBase.OnNotValid">
            <summary>设置 ActiveRecordValidationBase.OnNotValid() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubActiveRecordValidationBase.OnNotValid01">
            <summary>设置 ActiveRecordValidationBase.OnNotValid() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubActiveRecordValidationBase.OnSave">
            <summary>设置 ActiveRecordHooksBase.OnSave() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubActiveRecordValidationBase.OnSave01">
            <summary>设置 ActiveRecordHooksBase.OnSave() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubActiveRecordValidationBase.OnUpdate">
            <summary>设置 ActiveRecordHooksBase.OnUpdate() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubActiveRecordValidationBase.OnUpdate01">
            <summary>设置 ActiveRecordHooksBase.OnUpdate() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubActiveRecordValidationBase.PostFlush">
            <summary>设置 ActiveRecordHooksBase.PostFlush() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubActiveRecordValidationBase.PostFlush01">
            <summary>设置 ActiveRecordHooksBase.PostFlush() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubActiveRecordValidationBase.PreFlush">
            <summary>设置 ActiveRecordHooksBase.PreFlush() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubActiveRecordValidationBase.PreFlush01">
            <summary>设置 ActiveRecordHooksBase.PreFlush() 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubActiveRecordValidationBase.PropertiesValidationErrorMessagesGet">
            <summary>设置 ActiveRecordValidationBase.get_PropertiesValidationErrorMessages() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubActiveRecordValidationBase.ToString">
            <summary>设置 ActiveRecordBase.ToString() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubActiveRecordValidationBase.ToString01">
            <summary>设置 ActiveRecordBase.ToString() 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubActiveRecordValidationBase.ValidationErrorMessagesGet">
            <summary>设置 ActiveRecordValidationBase.get_ValidationErrorMessages() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubActiveRecordValidationBase.ActualValidator">
            <summary>设置 ActiveRecordValidationBase.get_ActualValidator() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubActiveRecordValidationBase.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubActiveRecordValidationBase.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubActiveRecordValidationBase.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubActiveRecordValidationBase.PropertiesValidationErrorMessages">
            <summary>设置 ActiveRecordValidationBase.get_PropertiesValidationErrorMessages() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubActiveRecordValidationBase.ValidationErrorMessages">
            <summary>设置 ActiveRecordValidationBase.get_ValidationErrorMessages() 的 stub</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.StubActiveRecordValidationBase`1">
            <summary>Castle.ActiveRecord.ActiveRecordValidationBase`1 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubActiveRecordValidationBase`1.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubActiveRecordValidationBase`1.ActualValidatorGet">
            <summary>设置 ActiveRecordValidationBase`1.get_ActualValidator() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubActiveRecordValidationBase`1.BeforeDelete(System.Collections.IDictionary)">
            <summary>设置 ActiveRecordHooksBase.BeforeDelete(IDictionary adapter) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubActiveRecordValidationBase`1.BeforeDeleteIDictionary">
            <summary>设置 ActiveRecordHooksBase.BeforeDelete(IDictionary adapter) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubActiveRecordValidationBase`1.BeforeLoad(System.Object,System.Collections.IDictionary)">
            <summary>设置 ActiveRecordHooksBase.BeforeLoad(Object id, IDictionary adapter) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubActiveRecordValidationBase`1.BeforeLoadObjectIDictionary">
            <summary>设置 ActiveRecordHooksBase.BeforeLoad(Object id, IDictionary adapter) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubActiveRecordValidationBase`1.BeforeSave(System.Collections.IDictionary)">
            <summary>设置 ActiveRecordValidationBase`1.BeforeSave(IDictionary state) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubActiveRecordValidationBase`1.BeforeSaveIDictionary">
            <summary>设置 ActiveRecordValidationBase`1.BeforeSave(IDictionary state) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubActiveRecordValidationBase`1.FindDirty(System.Object,System.Collections.IDictionary,System.Collections.IDictionary,NHibernate.Type.IType[])">
            <summary>设置 ActiveRecordHooksBase.FindDirty(Object id, IDictionary previousState, IDictionary currentState, IType[] types) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubActiveRecordValidationBase`1.FindDirtyObjectIDictionaryIDictionaryITypeArray">
            <summary>设置 ActiveRecordHooksBase.FindDirty(Object id, IDictionary previousState, IDictionary currentState, IType[] types) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubActiveRecordValidationBase`1.InitializeStub">
            <summary>初始化 type StubActiveRecordValidationBase 的新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubActiveRecordValidationBase`1.IsUnsaved">
            <summary>设置 ActiveRecordHooksBase.IsUnsaved() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubActiveRecordValidationBase`1.IsUnsaved01">
            <summary>设置 ActiveRecordHooksBase.IsUnsaved() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubActiveRecordValidationBase`1.IsValid">
            <summary>设置 ActiveRecordValidationBase`1.IsValid() 的 存根</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubActiveRecordValidationBase`1.IsValid(Castle.Components.Validator.RunWhen)">
            <summary>设置 ActiveRecordValidationBase`1.IsValid(RunWhen runWhen) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubActiveRecordValidationBase`1.IsValid01">
            <summary>设置 ActiveRecordValidationBase`1.IsValid() 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubActiveRecordValidationBase`1.IsValidRunWhen">
            <summary>设置 ActiveRecordValidationBase`1.IsValid(RunWhen runWhen) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubActiveRecordValidationBase`1.OnDelete">
            <summary>设置 ActiveRecordHooksBase.OnDelete() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubActiveRecordValidationBase`1.OnDelete01">
            <summary>设置 ActiveRecordHooksBase.OnDelete() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubActiveRecordValidationBase`1.OnFlushDirty(System.Object,System.Collections.IDictionary,System.Collections.IDictionary,NHibernate.Type.IType[])">
            <summary>设置 ActiveRecordValidationBase`1.OnFlushDirty(Object id, IDictionary previousState, IDictionary currentState, IType[] types) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubActiveRecordValidationBase`1.OnFlushDirtyObjectIDictionaryIDictionaryITypeArray">
            <summary>设置 ActiveRecordValidationBase`1.OnFlushDirty(Object id, IDictionary previousState, IDictionary currentState, IType[] types) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubActiveRecordValidationBase`1.OnLoad(System.Object)">
            <summary>设置 ActiveRecordHooksBase.OnLoad(Object id) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubActiveRecordValidationBase`1.OnLoadObject">
            <summary>设置 ActiveRecordHooksBase.OnLoad(Object id) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubActiveRecordValidationBase`1.OnNotValid">
            <summary>设置 ActiveRecordValidationBase`1.OnNotValid() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubActiveRecordValidationBase`1.OnNotValid01">
            <summary>设置 ActiveRecordValidationBase`1.OnNotValid() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubActiveRecordValidationBase`1.OnSave">
            <summary>设置 ActiveRecordHooksBase.OnSave() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubActiveRecordValidationBase`1.OnSave01">
            <summary>设置 ActiveRecordHooksBase.OnSave() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubActiveRecordValidationBase`1.OnUpdate">
            <summary>设置 ActiveRecordHooksBase.OnUpdate() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubActiveRecordValidationBase`1.OnUpdate01">
            <summary>设置 ActiveRecordHooksBase.OnUpdate() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubActiveRecordValidationBase`1.PostFlush">
            <summary>设置 ActiveRecordHooksBase.PostFlush() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubActiveRecordValidationBase`1.PostFlush01">
            <summary>设置 ActiveRecordHooksBase.PostFlush() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubActiveRecordValidationBase`1.PreFlush">
            <summary>设置 ActiveRecordHooksBase.PreFlush() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubActiveRecordValidationBase`1.PreFlush01">
            <summary>设置 ActiveRecordHooksBase.PreFlush() 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubActiveRecordValidationBase`1.PropertiesValidationErrorMessagesGet">
            <summary>设置 ActiveRecordValidationBase`1.get_PropertiesValidationErrorMessages() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubActiveRecordValidationBase`1.ToString">
            <summary>设置 ActiveRecordBase.ToString() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubActiveRecordValidationBase`1.ToString01">
            <summary>设置 ActiveRecordBase.ToString() 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubActiveRecordValidationBase`1.ValidationErrorMessagesGet">
            <summary>设置 ActiveRecordValidationBase`1.get_ValidationErrorMessages() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubActiveRecordValidationBase`1.ActualValidator">
            <summary>设置 ActiveRecordValidationBase`1.get_ActualValidator() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubActiveRecordValidationBase`1.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubActiveRecordValidationBase`1.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubActiveRecordValidationBase`1.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubActiveRecordValidationBase`1.PropertiesValidationErrorMessages">
            <summary>设置 ActiveRecordValidationBase`1.get_PropertiesValidationErrorMessages() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubActiveRecordValidationBase`1.ValidationErrorMessages">
            <summary>设置 ActiveRecordValidationBase`1.get_ValidationErrorMessages() 的 stub</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.StubActiveRecordValidationException">
            <summary>Castle.ActiveRecord.ActiveRecordValidationException 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubActiveRecordValidationException.#ctor(System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubActiveRecordValidationException.#ctor(System.String,System.Exception)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubActiveRecordValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubActiveRecordValidationException.#ctor(System.String,System.String[],System.Collections.IDictionary)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubActiveRecordValidationException.#ctor(System.String,System.Exception,System.String[],System.Collections.IDictionary)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubActiveRecordValidationException.AttachBackingFieldToHelpLink">
            <summary>附加委托以将 StubActiveRecordValidationException.HelpLink 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubActiveRecordValidationException.AttachBackingFieldToSource">
            <summary>附加委托以将 StubActiveRecordValidationException.Source 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubActiveRecordValidationException.DataGet">
            <summary>设置 Exception.get_Data() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubActiveRecordValidationException.GetBaseException">
            <summary>设置 Exception.GetBaseException() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubActiveRecordValidationException.GetBaseException01">
            <summary>设置 Exception.GetBaseException() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubActiveRecordValidationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>设置 ValidationException.GetObjectData(SerializationInfo info, StreamingContext context) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubActiveRecordValidationException.GetObjectDataSerializationInfoStreamingContext">
            <summary>设置 ValidationException.GetObjectData(SerializationInfo info, StreamingContext context) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubActiveRecordValidationException.HelpLinkGet">
            <summary>设置 Exception.get_HelpLink() 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubActiveRecordValidationException.HelpLinkSetString">
            <summary>设置 Exception.set_HelpLink(String value) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubActiveRecordValidationException.InitializeStub">
            <summary>初始化 type StubActiveRecordValidationException 的新实例</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubActiveRecordValidationException.MessageGet">
            <summary>设置 Exception.get_Message() 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubActiveRecordValidationException.SourceGet">
            <summary>设置 Exception.get_Source() 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubActiveRecordValidationException.SourceSetString">
            <summary>设置 Exception.set_Source(String value) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubActiveRecordValidationException.StackTraceGet">
            <summary>设置 Exception.get_StackTrace() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubActiveRecordValidationException.ToString">
            <summary>设置 Exception.ToString() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubActiveRecordValidationException.ToString01">
            <summary>设置 Exception.ToString() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubActiveRecordValidationException.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubActiveRecordValidationException.Data">
            <summary>设置 Exception.get_Data() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubActiveRecordValidationException.HelpLink">
            <summary>设置 Exception.get_HelpLink() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubActiveRecordValidationException.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubActiveRecordValidationException.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubActiveRecordValidationException.Message">
            <summary>设置 Exception.get_Message() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubActiveRecordValidationException.Source">
            <summary>设置 Exception.get_Source() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubActiveRecordValidationException.StackTrace">
            <summary>设置 Exception.get_StackTrace() 的 stub</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.StubActiveRecordValidator">
            <summary>Castle.ActiveRecord.ActiveRecordValidator 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubActiveRecordValidator.#ctor(System.Object)">
            <summary>初始化新实例</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubActiveRecordValidator.ARObjectInstanceGet">
            <summary>设置 ActiveRecordValidator.get_ARObjectInstance() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubActiveRecordValidator.InitializeStub">
            <summary>初始化 type StubActiveRecordValidator 的新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubActiveRecordValidator.IsValid">
            <summary>设置 ActiveRecordValidator.IsValid() 的 存根</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubActiveRecordValidator.IsValid(Castle.Components.Validator.RunWhen)">
            <summary>设置 ActiveRecordValidator.IsValid(RunWhen runWhen) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubActiveRecordValidator.IsValid01">
            <summary>设置 ActiveRecordValidator.IsValid() 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubActiveRecordValidator.IsValidRunWhen">
            <summary>设置 ActiveRecordValidator.IsValid(RunWhen runWhen) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubActiveRecordValidator.PropertiesValidationErrorMessagesGet">
            <summary>设置 ActiveRecordValidator.get_PropertiesValidationErrorMessages() 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubActiveRecordValidator.RunnerGet">
            <summary>设置 ActiveRecordValidator.get_Runner() 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubActiveRecordValidator.ValidationErrorMessagesGet">
            <summary>设置 ActiveRecordValidator.get_ValidationErrorMessages() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubActiveRecordValidator.ARObjectInstance">
            <summary>设置 ActiveRecordValidator.get_ARObjectInstance() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubActiveRecordValidator.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubActiveRecordValidator.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubActiveRecordValidator.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubActiveRecordValidator.PropertiesValidationErrorMessages">
            <summary>设置 ActiveRecordValidator.get_PropertiesValidationErrorMessages() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubActiveRecordValidator.Runner">
            <summary>设置 ActiveRecordValidator.get_Runner() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubActiveRecordValidator.ValidationErrorMessages">
            <summary>设置 ActiveRecordValidator.get_ValidationErrorMessages() 的 stub</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.StubAny">
            <summary>Castle.ActiveRecord.Any 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubAny.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubAny.InitializeStub">
            <summary>初始化 type StubAny 的新实例</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubAny.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubAny.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubAny.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.StubAnyAttribute">
            <summary>Castle.ActiveRecord.AnyAttribute 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubAnyAttribute.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubAnyAttribute.#ctor(System.Type)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubAnyAttribute.Equals(System.Object)">
            <summary>设置 Attribute.Equals(Object obj) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubAnyAttribute.EqualsObject">
            <summary>设置 Attribute.Equals(Object obj) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubAnyAttribute.GetHashCode">
            <summary>设置 Attribute.GetHashCode() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubAnyAttribute.GetHashCode01">
            <summary>设置 Attribute.GetHashCode() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubAnyAttribute.InitializeStub">
            <summary>初始化 type StubAnyAttribute 的新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubAnyAttribute.IsDefaultAttribute">
            <summary>设置 Attribute.IsDefaultAttribute() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubAnyAttribute.IsDefaultAttribute01">
            <summary>设置 Attribute.IsDefaultAttribute() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubAnyAttribute.Match(System.Object)">
            <summary>设置 Attribute.Match(Object obj) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubAnyAttribute.MatchObject">
            <summary>设置 Attribute.Match(Object obj) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubAnyAttribute.TypeIdGet">
            <summary>设置 Attribute.get_TypeId() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubAnyAttribute.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubAnyAttribute.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubAnyAttribute.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubAnyAttribute.TypeId">
            <summary>设置 Attribute.get_TypeId() 的 stub</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.StubBaseAttribute">
            <summary>Castle.ActiveRecord.BaseAttribute 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubBaseAttribute.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubBaseAttribute.Equals(System.Object)">
            <summary>设置 Attribute.Equals(Object obj) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubBaseAttribute.EqualsObject">
            <summary>设置 Attribute.Equals(Object obj) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubBaseAttribute.GetHashCode">
            <summary>设置 Attribute.GetHashCode() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubBaseAttribute.GetHashCode01">
            <summary>设置 Attribute.GetHashCode() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubBaseAttribute.InitializeStub">
            <summary>初始化 type StubBaseAttribute 的新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubBaseAttribute.IsDefaultAttribute">
            <summary>设置 Attribute.IsDefaultAttribute() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubBaseAttribute.IsDefaultAttribute01">
            <summary>设置 Attribute.IsDefaultAttribute() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubBaseAttribute.Match(System.Object)">
            <summary>设置 Attribute.Match(Object obj) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubBaseAttribute.MatchObject">
            <summary>设置 Attribute.Match(Object obj) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubBaseAttribute.TypeIdGet">
            <summary>设置 Attribute.get_TypeId() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubBaseAttribute.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubBaseAttribute.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubBaseAttribute.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubBaseAttribute.TypeId">
            <summary>设置 Attribute.get_TypeId() 的 stub</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.StubBelongsToAttribute">
            <summary>Castle.ActiveRecord.BelongsToAttribute 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubBelongsToAttribute.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubBelongsToAttribute.#ctor(System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubBelongsToAttribute.Equals(System.Object)">
            <summary>设置 Attribute.Equals(Object obj) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubBelongsToAttribute.EqualsObject">
            <summary>设置 Attribute.Equals(Object obj) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubBelongsToAttribute.GetHashCode">
            <summary>设置 Attribute.GetHashCode() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubBelongsToAttribute.GetHashCode01">
            <summary>设置 Attribute.GetHashCode() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubBelongsToAttribute.InitializeStub">
            <summary>初始化 type StubBelongsToAttribute 的新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubBelongsToAttribute.IsDefaultAttribute">
            <summary>设置 Attribute.IsDefaultAttribute() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubBelongsToAttribute.IsDefaultAttribute01">
            <summary>设置 Attribute.IsDefaultAttribute() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubBelongsToAttribute.Match(System.Object)">
            <summary>设置 Attribute.Match(Object obj) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubBelongsToAttribute.MatchObject">
            <summary>设置 Attribute.Match(Object obj) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubBelongsToAttribute.TypeIdGet">
            <summary>设置 Attribute.get_TypeId() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubBelongsToAttribute.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubBelongsToAttribute.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubBelongsToAttribute.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubBelongsToAttribute.TypeId">
            <summary>设置 Attribute.get_TypeId() 的 stub</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.StubCollectionIDAttribute">
            <summary>Castle.ActiveRecord.CollectionIDAttribute 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubCollectionIDAttribute.#ctor(Castle.ActiveRecord.CollectionIDType,System.String,System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubCollectionIDAttribute.Equals(System.Object)">
            <summary>设置 Attribute.Equals(Object obj) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubCollectionIDAttribute.EqualsObject">
            <summary>设置 Attribute.Equals(Object obj) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubCollectionIDAttribute.GetHashCode">
            <summary>设置 Attribute.GetHashCode() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubCollectionIDAttribute.GetHashCode01">
            <summary>设置 Attribute.GetHashCode() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubCollectionIDAttribute.InitializeStub">
            <summary>初始化 type StubCollectionIDAttribute 的新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubCollectionIDAttribute.IsDefaultAttribute">
            <summary>设置 Attribute.IsDefaultAttribute() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubCollectionIDAttribute.IsDefaultAttribute01">
            <summary>设置 Attribute.IsDefaultAttribute() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubCollectionIDAttribute.Match(System.Object)">
            <summary>设置 Attribute.Match(Object obj) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubCollectionIDAttribute.MatchObject">
            <summary>设置 Attribute.Match(Object obj) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubCollectionIDAttribute.TypeIdGet">
            <summary>设置 Attribute.get_TypeId() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubCollectionIDAttribute.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubCollectionIDAttribute.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubCollectionIDAttribute.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubCollectionIDAttribute.TypeId">
            <summary>设置 Attribute.get_TypeId() 的 stub</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.StubCompositeKeyAttribute">
            <summary>Castle.ActiveRecord.CompositeKeyAttribute 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubCompositeKeyAttribute.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubCompositeKeyAttribute.Equals(System.Object)">
            <summary>设置 Attribute.Equals(Object obj) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubCompositeKeyAttribute.EqualsObject">
            <summary>设置 Attribute.Equals(Object obj) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubCompositeKeyAttribute.GetHashCode">
            <summary>设置 Attribute.GetHashCode() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubCompositeKeyAttribute.GetHashCode01">
            <summary>设置 Attribute.GetHashCode() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubCompositeKeyAttribute.InitializeStub">
            <summary>初始化 type StubCompositeKeyAttribute 的新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubCompositeKeyAttribute.IsDefaultAttribute">
            <summary>设置 Attribute.IsDefaultAttribute() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubCompositeKeyAttribute.IsDefaultAttribute01">
            <summary>设置 Attribute.IsDefaultAttribute() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubCompositeKeyAttribute.Match(System.Object)">
            <summary>设置 Attribute.Match(Object obj) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubCompositeKeyAttribute.MatchObject">
            <summary>设置 Attribute.Match(Object obj) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubCompositeKeyAttribute.TypeIdGet">
            <summary>设置 Attribute.get_TypeId() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubCompositeKeyAttribute.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubCompositeKeyAttribute.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubCompositeKeyAttribute.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubCompositeKeyAttribute.TypeId">
            <summary>设置 Attribute.get_TypeId() 的 stub</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.StubCompositeUserTypeAttribute">
            <summary>Castle.ActiveRecord.CompositeUserTypeAttribute 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubCompositeUserTypeAttribute.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubCompositeUserTypeAttribute.#ctor(System.String,System.String[])">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubCompositeUserTypeAttribute.#ctor(System.Type,System.String[])">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubCompositeUserTypeAttribute.Equals(System.Object)">
            <summary>设置 Attribute.Equals(Object obj) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubCompositeUserTypeAttribute.EqualsObject">
            <summary>设置 Attribute.Equals(Object obj) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubCompositeUserTypeAttribute.GetHashCode">
            <summary>设置 Attribute.GetHashCode() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubCompositeUserTypeAttribute.GetHashCode01">
            <summary>设置 Attribute.GetHashCode() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubCompositeUserTypeAttribute.InitializeStub">
            <summary>初始化 type StubCompositeUserTypeAttribute 的新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubCompositeUserTypeAttribute.IsDefaultAttribute">
            <summary>设置 Attribute.IsDefaultAttribute() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubCompositeUserTypeAttribute.IsDefaultAttribute01">
            <summary>设置 Attribute.IsDefaultAttribute() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubCompositeUserTypeAttribute.Match(System.Object)">
            <summary>设置 Attribute.Match(Object obj) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubCompositeUserTypeAttribute.MatchObject">
            <summary>设置 Attribute.Match(Object obj) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubCompositeUserTypeAttribute.TypeIdGet">
            <summary>设置 Attribute.get_TypeId() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubCompositeUserTypeAttribute.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubCompositeUserTypeAttribute.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubCompositeUserTypeAttribute.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubCompositeUserTypeAttribute.TypeId">
            <summary>设置 Attribute.get_TypeId() 的 stub</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.StubConversationCanceledEventArgs">
            <summary>Castle.ActiveRecord.ConversationCanceledEventArgs 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubConversationCanceledEventArgs.#ctor(System.Boolean,System.Exception)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubConversationCanceledEventArgs.InitializeStub">
            <summary>初始化 type StubConversationCanceledEventArgs 的新实例</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubConversationCanceledEventArgs.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubConversationCanceledEventArgs.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubConversationCanceledEventArgs.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.StubConversationalScope">
            <summary>Castle.ActiveRecord.ConversationalScope 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubConversationalScope.#ctor(Castle.ActiveRecord.IScopeConversation)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubConversationalScope.DiscardSessions(System.Collections.Generic.ICollection{NHibernate.ISession})">
            <summary>设置 AbstractScope.DiscardSessions(ICollection`1&lt;ISession&gt; sessions) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubConversationalScope.DiscardSessionsICollectionOfISession">
            <summary>设置 AbstractScope.DiscardSessions(ICollection`1&lt;ISession&gt; sessions) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubConversationalScope.FailSession(NHibernate.ISession)">
            <summary>设置 ConversationalScope.FailSession(ISession session) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubConversationalScope.FailSessionISession">
            <summary>设置 ConversationalScope.FailSession(ISession session) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubConversationalScope.Flush">
            <summary>设置 AbstractScope.Flush() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubConversationalScope.Flush01">
            <summary>设置 AbstractScope.Flush() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubConversationalScope.GetSession(System.Object)">
            <summary>设置 AbstractScope.GetSession(Object key) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubConversationalScope.GetSessionObject">
            <summary>设置 AbstractScope.GetSession(Object key) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubConversationalScope.Initialize(NHibernate.ISession)">
            <summary>设置 AbstractScope.Initialize(ISession session) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubConversationalScope.InitializeISession">
            <summary>设置 AbstractScope.Initialize(ISession session) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubConversationalScope.InitializeStub">
            <summary>初始化 type StubConversationalScope 的新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubConversationalScope.IsKeyKnown(System.Object)">
            <summary>设置 AbstractScope.IsKeyKnown(Object key) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubConversationalScope.IsKeyKnownObject">
            <summary>设置 AbstractScope.IsKeyKnown(Object key) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubConversationalScope.OpenSession(NHibernate.ISessionFactory,NHibernate.IInterceptor)">
            <summary>设置 ConversationalScope.OpenSession(ISessionFactory sessionFactory, IInterceptor interceptor) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubConversationalScope.OpenSessionISessionFactoryIInterceptor">
            <summary>设置 ConversationalScope.OpenSession(ISessionFactory sessionFactory, IInterceptor interceptor) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubConversationalScope.PerformDisposal(System.Collections.Generic.ICollection{NHibernate.ISession})">
            <summary>设置 AbstractScope.PerformDisposal(ICollection`1&lt;ISession&gt; sessions) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubConversationalScope.PerformDisposalICollectionOfISession">
            <summary>设置 AbstractScope.PerformDisposal(ICollection`1&lt;ISession&gt; sessions) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubConversationalScope.RegisterSession(System.Object,NHibernate.ISession)">
            <summary>设置 AbstractScope.RegisterSession(Object key, ISession session) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubConversationalScope.RegisterSessionObjectISession">
            <summary>设置 AbstractScope.RegisterSession(Object key, ISession session) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubConversationalScope.WantsToCreateTheSessionGet">
            <summary>设置 ConversationalScope.get_WantsToCreateTheSession() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubConversationalScope.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubConversationalScope.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubConversationalScope.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubConversationalScope.WantsToCreateTheSession">
            <summary>设置 ConversationalScope.get_WantsToCreateTheSession() 的 stub</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.StubEventListenerAttribute">
            <summary>Castle.ActiveRecord.EventListenerAttribute 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubEventListenerAttribute.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubEventListenerAttribute.Equals(System.Object)">
            <summary>设置 Attribute.Equals(Object obj) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubEventListenerAttribute.EqualsObject">
            <summary>设置 Attribute.Equals(Object obj) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubEventListenerAttribute.GetHashCode">
            <summary>设置 Attribute.GetHashCode() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubEventListenerAttribute.GetHashCode01">
            <summary>设置 Attribute.GetHashCode() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubEventListenerAttribute.InitializeStub">
            <summary>初始化 type StubEventListenerAttribute 的新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubEventListenerAttribute.IsDefaultAttribute">
            <summary>设置 Attribute.IsDefaultAttribute() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubEventListenerAttribute.IsDefaultAttribute01">
            <summary>设置 Attribute.IsDefaultAttribute() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubEventListenerAttribute.Match(System.Object)">
            <summary>设置 Attribute.Match(Object obj) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubEventListenerAttribute.MatchObject">
            <summary>设置 Attribute.Match(Object obj) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubEventListenerAttribute.TypeIdGet">
            <summary>设置 Attribute.get_TypeId() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubEventListenerAttribute.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubEventListenerAttribute.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubEventListenerAttribute.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubEventListenerAttribute.TypeId">
            <summary>设置 Attribute.get_TypeId() 的 stub</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.StubFieldAttribute">
            <summary>Castle.ActiveRecord.FieldAttribute 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubFieldAttribute.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubFieldAttribute.#ctor(System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubFieldAttribute.#ctor(System.String,System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubFieldAttribute.Equals(System.Object)">
            <summary>设置 Attribute.Equals(Object obj) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubFieldAttribute.EqualsObject">
            <summary>设置 Attribute.Equals(Object obj) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubFieldAttribute.GetHashCode">
            <summary>设置 Attribute.GetHashCode() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubFieldAttribute.GetHashCode01">
            <summary>设置 Attribute.GetHashCode() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubFieldAttribute.InitializeStub">
            <summary>初始化 type StubFieldAttribute 的新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubFieldAttribute.IsDefaultAttribute">
            <summary>设置 Attribute.IsDefaultAttribute() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubFieldAttribute.IsDefaultAttribute01">
            <summary>设置 Attribute.IsDefaultAttribute() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubFieldAttribute.Match(System.Object)">
            <summary>设置 Attribute.Match(Object obj) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubFieldAttribute.MatchObject">
            <summary>设置 Attribute.Match(Object obj) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubFieldAttribute.TypeIdGet">
            <summary>设置 Attribute.get_TypeId() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubFieldAttribute.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubFieldAttribute.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubFieldAttribute.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubFieldAttribute.TypeId">
            <summary>设置 Attribute.get_TypeId() 的 stub</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.StubHasAndBelongsToManyAttribute">
            <summary>Castle.ActiveRecord.HasAndBelongsToManyAttribute 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubHasAndBelongsToManyAttribute.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubHasAndBelongsToManyAttribute.#ctor(System.Type)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubHasAndBelongsToManyAttribute.#ctor(System.Type,Castle.ActiveRecord.RelationType)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubHasAndBelongsToManyAttribute.Equals(System.Object)">
            <summary>设置 Attribute.Equals(Object obj) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubHasAndBelongsToManyAttribute.EqualsObject">
            <summary>设置 Attribute.Equals(Object obj) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubHasAndBelongsToManyAttribute.GetHashCode">
            <summary>设置 Attribute.GetHashCode() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubHasAndBelongsToManyAttribute.GetHashCode01">
            <summary>设置 Attribute.GetHashCode() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubHasAndBelongsToManyAttribute.InitializeStub">
            <summary>初始化 type StubHasAndBelongsToManyAttribute 的新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubHasAndBelongsToManyAttribute.IsDefaultAttribute">
            <summary>设置 Attribute.IsDefaultAttribute() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubHasAndBelongsToManyAttribute.IsDefaultAttribute01">
            <summary>设置 Attribute.IsDefaultAttribute() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubHasAndBelongsToManyAttribute.Match(System.Object)">
            <summary>设置 Attribute.Match(Object obj) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubHasAndBelongsToManyAttribute.MatchObject">
            <summary>设置 Attribute.Match(Object obj) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubHasAndBelongsToManyAttribute.TypeIdGet">
            <summary>设置 Attribute.get_TypeId() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubHasAndBelongsToManyAttribute.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubHasAndBelongsToManyAttribute.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubHasAndBelongsToManyAttribute.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubHasAndBelongsToManyAttribute.TypeId">
            <summary>设置 Attribute.get_TypeId() 的 stub</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.StubHasManyAttribute">
            <summary>Castle.ActiveRecord.HasManyAttribute 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubHasManyAttribute.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubHasManyAttribute.#ctor(System.Type)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubHasManyAttribute.#ctor(System.Type,System.String,System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubHasManyAttribute.Equals(System.Object)">
            <summary>设置 Attribute.Equals(Object obj) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubHasManyAttribute.EqualsObject">
            <summary>设置 Attribute.Equals(Object obj) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubHasManyAttribute.GetHashCode">
            <summary>设置 Attribute.GetHashCode() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubHasManyAttribute.GetHashCode01">
            <summary>设置 Attribute.GetHashCode() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubHasManyAttribute.InitializeStub">
            <summary>初始化 type StubHasManyAttribute 的新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubHasManyAttribute.IsDefaultAttribute">
            <summary>设置 Attribute.IsDefaultAttribute() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubHasManyAttribute.IsDefaultAttribute01">
            <summary>设置 Attribute.IsDefaultAttribute() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubHasManyAttribute.Match(System.Object)">
            <summary>设置 Attribute.Match(Object obj) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubHasManyAttribute.MatchObject">
            <summary>设置 Attribute.Match(Object obj) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubHasManyAttribute.TypeIdGet">
            <summary>设置 Attribute.get_TypeId() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubHasManyAttribute.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubHasManyAttribute.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubHasManyAttribute.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubHasManyAttribute.TypeId">
            <summary>设置 Attribute.get_TypeId() 的 stub</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.StubHasManyToAnyAttribute">
            <summary>Castle.ActiveRecord.HasManyToAnyAttribute 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubHasManyToAnyAttribute.#ctor(System.Type,System.String,System.String,System.Type,System.String,System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubHasManyToAnyAttribute.Equals(System.Object)">
            <summary>设置 Attribute.Equals(Object obj) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubHasManyToAnyAttribute.EqualsObject">
            <summary>设置 Attribute.Equals(Object obj) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubHasManyToAnyAttribute.GetHashCode">
            <summary>设置 Attribute.GetHashCode() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubHasManyToAnyAttribute.GetHashCode01">
            <summary>设置 Attribute.GetHashCode() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubHasManyToAnyAttribute.InitializeStub">
            <summary>初始化 type StubHasManyToAnyAttribute 的新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubHasManyToAnyAttribute.IsDefaultAttribute">
            <summary>设置 Attribute.IsDefaultAttribute() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubHasManyToAnyAttribute.IsDefaultAttribute01">
            <summary>设置 Attribute.IsDefaultAttribute() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubHasManyToAnyAttribute.Match(System.Object)">
            <summary>设置 Attribute.Match(Object obj) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubHasManyToAnyAttribute.MatchObject">
            <summary>设置 Attribute.Match(Object obj) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubHasManyToAnyAttribute.TypeIdGet">
            <summary>设置 Attribute.get_TypeId() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubHasManyToAnyAttribute.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubHasManyToAnyAttribute.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubHasManyToAnyAttribute.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubHasManyToAnyAttribute.TypeId">
            <summary>设置 Attribute.get_TypeId() 的 stub</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.StubHiloAttribute">
            <summary>Castle.ActiveRecord.HiloAttribute 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubHiloAttribute.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubHiloAttribute.#ctor(System.String,System.String,System.Int32)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubHiloAttribute.Equals(System.Object)">
            <summary>设置 Attribute.Equals(Object obj) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubHiloAttribute.EqualsObject">
            <summary>设置 Attribute.Equals(Object obj) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubHiloAttribute.GetHashCode">
            <summary>设置 Attribute.GetHashCode() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubHiloAttribute.GetHashCode01">
            <summary>设置 Attribute.GetHashCode() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubHiloAttribute.InitializeStub">
            <summary>初始化 type StubHiloAttribute 的新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubHiloAttribute.IsDefaultAttribute">
            <summary>设置 Attribute.IsDefaultAttribute() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubHiloAttribute.IsDefaultAttribute01">
            <summary>设置 Attribute.IsDefaultAttribute() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubHiloAttribute.Match(System.Object)">
            <summary>设置 Attribute.Match(Object obj) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubHiloAttribute.MatchObject">
            <summary>设置 Attribute.Match(Object obj) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubHiloAttribute.TypeIdGet">
            <summary>设置 Attribute.get_TypeId() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubHiloAttribute.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubHiloAttribute.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubHiloAttribute.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubHiloAttribute.TypeId">
            <summary>设置 Attribute.get_TypeId() 的 stub</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.StubHqlNamedQueryAttribute">
            <summary>Castle.ActiveRecord.HqlNamedQueryAttribute 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubHqlNamedQueryAttribute.#ctor(System.String,System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubHqlNamedQueryAttribute.Equals(System.Object)">
            <summary>设置 Attribute.Equals(Object obj) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubHqlNamedQueryAttribute.EqualsObject">
            <summary>设置 Attribute.Equals(Object obj) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubHqlNamedQueryAttribute.GetHashCode">
            <summary>设置 Attribute.GetHashCode() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubHqlNamedQueryAttribute.GetHashCode01">
            <summary>设置 Attribute.GetHashCode() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubHqlNamedQueryAttribute.InitializeStub">
            <summary>初始化 type StubHqlNamedQueryAttribute 的新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubHqlNamedQueryAttribute.IsDefaultAttribute">
            <summary>设置 Attribute.IsDefaultAttribute() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubHqlNamedQueryAttribute.IsDefaultAttribute01">
            <summary>设置 Attribute.IsDefaultAttribute() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubHqlNamedQueryAttribute.Match(System.Object)">
            <summary>设置 Attribute.Match(Object obj) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubHqlNamedQueryAttribute.MatchObject">
            <summary>设置 Attribute.Match(Object obj) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubHqlNamedQueryAttribute.TypeIdGet">
            <summary>设置 Attribute.get_TypeId() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubHqlNamedQueryAttribute.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubHqlNamedQueryAttribute.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubHqlNamedQueryAttribute.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubHqlNamedQueryAttribute.TypeId">
            <summary>设置 Attribute.get_TypeId() 的 stub</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.StubIActiveRecordQuery">
            <summary>Castle.ActiveRecord.IActiveRecordQuery 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubIActiveRecordQuery.#ctor">
            <summary>初始化 type StubIActiveRecordQuery 的新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubIActiveRecordQuery.car::Castle#ActiveRecord#IActiveRecordQuery#Enumerate(NHibernate.ISession)">
            <summary>设置 IActiveRecordQuery.Enumerate(ISession session) 的 存根</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubIActiveRecordQuery.car::Castle#ActiveRecord#IActiveRecordQuery#Execute(NHibernate.ISession)">
            <summary>设置 IActiveRecordQuery.Execute(ISession session) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubIActiveRecordQuery.EnumerateISession">
            <summary>设置 IActiveRecordQuery.Enumerate(ISession session) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubIActiveRecordQuery.ExecuteISession">
            <summary>设置 IActiveRecordQuery.Execute(ISession session) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubIActiveRecordQuery.RootTypeGet">
            <summary>设置 IActiveRecordQuery.get_RootType() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubIActiveRecordQuery.car::Castle#ActiveRecord#IActiveRecordQuery#RootType">
            <summary>设置 IActiveRecordQuery.get_RootType() 的 stub</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.StubIActiveRecordQuery`1">
            <summary>Castle.ActiveRecord.IActiveRecordQuery`1 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubIActiveRecordQuery`1.#ctor">
            <summary>初始化 type StubIActiveRecordQuery 的新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubIActiveRecordQuery`1.car::Castle#ActiveRecord#IActiveRecordQuery#Enumerate(NHibernate.ISession)">
            <summary>设置 IActiveRecordQuery.Enumerate(ISession session) 的 存根</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubIActiveRecordQuery`1.car::Castle#ActiveRecord#IActiveRecordQuery#Execute(NHibernate.ISession)">
            <summary>设置 IActiveRecordQuery.Execute(ISession session) 的 存根</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubIActiveRecordQuery`1.car::Castle#ActiveRecord#IActiveRecordQuery{T}#Execute(NHibernate.ISession)">
            <summary>设置 IActiveRecordQuery`1.Execute(ISession session) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubIActiveRecordQuery`1.EnumerateISession">
            <summary>设置 IActiveRecordQuery.Enumerate(ISession session) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubIActiveRecordQuery`1.ExecuteISession">
            <summary>设置 IActiveRecordQuery`1.Execute(ISession session) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubIActiveRecordQuery`1.ExecuteISession01">
            <summary>设置 IActiveRecordQuery.Execute(ISession session) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubIActiveRecordQuery`1.RootTypeGet">
            <summary>设置 IActiveRecordQuery.get_RootType() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubIActiveRecordQuery`1.car::Castle#ActiveRecord#IActiveRecordQuery#RootType">
            <summary>设置 IActiveRecordQuery.get_RootType() 的 stub</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.StubIConversation">
            <summary>Castle.ActiveRecord.IConversation 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubIConversation.#ctor">
            <summary>初始化 type StubIConversation 的新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubIConversation.AttachBackingFieldToFlushMode">
            <summary>附加委托以将 StubIConversation.FlushMode 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubIConversation.Cancel">
            <summary>设置 IConversation.Cancel() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubIConversation.car::Castle#ActiveRecord#IConversation#Cancel">
            <summary>设置 IConversation.Cancel() 的 存根</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubIConversation.car::Castle#ActiveRecord#IConversation#Execute(System.Action)">
            <summary>设置 IConversation.Execute(Action action) 的 存根</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubIConversation.car::Castle#ActiveRecord#IConversation#ExecuteSilently(System.Action)">
            <summary>设置 IConversation.ExecuteSilently(Action action) 的 存根</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubIConversation.car::Castle#ActiveRecord#IConversation#Flush">
            <summary>设置 IConversation.Flush() 的 存根</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubIConversation.car::Castle#ActiveRecord#IConversation#Restart">
            <summary>设置 IConversation.Restart() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubIConversation.Dispose">
            <summary>设置 IDisposable.Dispose() 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubIConversation.ExecuteAction">
            <summary>设置 IConversation.Execute(Action action) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubIConversation.ExecuteSilentlyAction">
            <summary>设置 IConversation.ExecuteSilently(Action action) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubIConversation.Flush">
            <summary>设置 IConversation.Flush() 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubIConversation.FlushModeGet">
            <summary>设置 IConversation.get_FlushMode() 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubIConversation.FlushModeSetConversationFlushMode">
            <summary>设置 IConversation.set_FlushMode(ConversationFlushMode value) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubIConversation.IsCanceledGet">
            <summary>设置 IConversation.get_IsCanceled() 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubIConversation.Restart">
            <summary>设置 IConversation.Restart() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubIConversation.global::System#IDisposable#Dispose">
            <summary>设置 IDisposable.Dispose() 的 存根</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubIConversation.car::Castle#ActiveRecord#IConversation#FlushMode">
            <summary>设置 IConversation.get_FlushMode() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubIConversation.car::Castle#ActiveRecord#IConversation#IsCanceled">
            <summary>设置 IConversation.get_IsCanceled() 的 stub</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.StubIScopeConversation">
            <summary>Castle.ActiveRecord.IScopeConversation 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubIScopeConversation.#ctor">
            <summary>初始化 type StubIScopeConversation 的新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubIScopeConversation.AttachBackingFieldToFlushMode">
            <summary>附加委托以将 StubIScopeConversation.FlushMode 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubIScopeConversation.Cancel">
            <summary>设置 IConversation.Cancel() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubIScopeConversation.car::Castle#ActiveRecord#IConversation#Cancel">
            <summary>设置 IConversation.Cancel() 的 存根</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubIScopeConversation.car::Castle#ActiveRecord#IConversation#Execute(System.Action)">
            <summary>设置 IConversation.Execute(Action action) 的 存根</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubIScopeConversation.car::Castle#ActiveRecord#IConversation#ExecuteSilently(System.Action)">
            <summary>设置 IConversation.ExecuteSilently(Action action) 的 存根</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubIScopeConversation.car::Castle#ActiveRecord#IConversation#Flush">
            <summary>设置 IConversation.Flush() 的 存根</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubIScopeConversation.car::Castle#ActiveRecord#IConversation#Restart">
            <summary>设置 IConversation.Restart() 的 存根</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubIScopeConversation.car::Castle#ActiveRecord#IScopeConversation#GetSession(NHibernate.ISessionFactory,NHibernate.IInterceptor)">
            <summary>设置 IScopeConversation.GetSession(ISessionFactory factory, IInterceptor interceptor) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubIScopeConversation.Dispose">
            <summary>设置 IDisposable.Dispose() 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubIScopeConversation.ExecuteAction">
            <summary>设置 IConversation.Execute(Action action) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubIScopeConversation.ExecuteSilentlyAction">
            <summary>设置 IConversation.ExecuteSilently(Action action) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubIScopeConversation.Flush">
            <summary>设置 IConversation.Flush() 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubIScopeConversation.FlushModeGet">
            <summary>设置 IConversation.get_FlushMode() 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubIScopeConversation.FlushModeSetConversationFlushMode">
            <summary>设置 IConversation.set_FlushMode(ConversationFlushMode value) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubIScopeConversation.GetSessionISessionFactoryIInterceptor">
            <summary>设置 IScopeConversation.GetSession(ISessionFactory factory, IInterceptor interceptor) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubIScopeConversation.IsCanceledGet">
            <summary>设置 IConversation.get_IsCanceled() 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubIScopeConversation.Restart">
            <summary>设置 IConversation.Restart() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubIScopeConversation.global::System#IDisposable#Dispose">
            <summary>设置 IDisposable.Dispose() 的 存根</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubIScopeConversation.car::Castle#ActiveRecord#IConversation#FlushMode">
            <summary>设置 IConversation.get_FlushMode() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubIScopeConversation.car::Castle#ActiveRecord#IConversation#IsCanceled">
            <summary>设置 IConversation.get_IsCanceled() 的 stub</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.StubISessionScope">
            <summary>Castle.ActiveRecord.ISessionScope 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubISessionScope.#ctor">
            <summary>初始化 type StubISessionScope 的新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubISessionScope.car::Castle#ActiveRecord#ISessionScope#Evict(System.Object)">
            <summary>设置 ISessionScope.Evict(Object instance) 的 存根</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubISessionScope.car::Castle#ActiveRecord#ISessionScope#FailSession(NHibernate.ISession)">
            <summary>设置 ISessionScope.FailSession(ISession session) 的 存根</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubISessionScope.car::Castle#ActiveRecord#ISessionScope#Flush">
            <summary>设置 ISessionScope.Flush() 的 存根</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubISessionScope.car::Castle#ActiveRecord#ISessionScope#GetSession(System.Object)">
            <summary>设置 ISessionScope.GetSession(Object key) 的 存根</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubISessionScope.car::Castle#ActiveRecord#ISessionScope#IsKeyKnown(System.Object)">
            <summary>设置 ISessionScope.IsKeyKnown(Object key) 的 存根</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubISessionScope.car::Castle#ActiveRecord#ISessionScope#OpenSession(NHibernate.ISessionFactory,NHibernate.IInterceptor)">
            <summary>设置 ISessionScope.OpenSession(ISessionFactory sessionFactory, IInterceptor interceptor) 的 存根</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubISessionScope.car::Castle#ActiveRecord#ISessionScope#RegisterSession(System.Object,NHibernate.ISession)">
            <summary>设置 ISessionScope.RegisterSession(Object key, ISession session) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubISessionScope.Dispose">
            <summary>设置 IDisposable.Dispose() 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubISessionScope.EvictObject">
            <summary>设置 ISessionScope.Evict(Object instance) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubISessionScope.FailSessionISession">
            <summary>设置 ISessionScope.FailSession(ISession session) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubISessionScope.Flush">
            <summary>设置 ISessionScope.Flush() 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubISessionScope.FlushActionGet">
            <summary>设置 ISessionScope.get_FlushAction() 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubISessionScope.GetSessionObject">
            <summary>设置 ISessionScope.GetSession(Object key) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubISessionScope.IsKeyKnownObject">
            <summary>设置 ISessionScope.IsKeyKnown(Object key) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubISessionScope.OpenSessionISessionFactoryIInterceptor">
            <summary>设置 ISessionScope.OpenSession(ISessionFactory sessionFactory, IInterceptor interceptor) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubISessionScope.RegisterSessionObjectISession">
            <summary>设置 ISessionScope.RegisterSession(Object key, ISession session) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubISessionScope.ScopeTypeGet">
            <summary>设置 ISessionScope.get_ScopeType() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubISessionScope.global::System#IDisposable#Dispose">
            <summary>设置 IDisposable.Dispose() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubISessionScope.WantsToCreateTheSessionGet">
            <summary>设置 ISessionScope.get_WantsToCreateTheSession() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubISessionScope.car::Castle#ActiveRecord#ISessionScope#FlushAction">
            <summary>设置 ISessionScope.get_FlushAction() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubISessionScope.car::Castle#ActiveRecord#ISessionScope#ScopeType">
            <summary>设置 ISessionScope.get_ScopeType() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubISessionScope.car::Castle#ActiveRecord#ISessionScope#WantsToCreateTheSession">
            <summary>设置 ISessionScope.get_WantsToCreateTheSession() 的 stub</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.StubImportAttribute">
            <summary>Castle.ActiveRecord.ImportAttribute 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubImportAttribute.#ctor(System.Type,System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubImportAttribute.Equals(System.Object)">
            <summary>设置 Attribute.Equals(Object obj) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubImportAttribute.EqualsObject">
            <summary>设置 Attribute.Equals(Object obj) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubImportAttribute.GetHashCode">
            <summary>设置 Attribute.GetHashCode() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubImportAttribute.GetHashCode01">
            <summary>设置 Attribute.GetHashCode() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubImportAttribute.InitializeStub">
            <summary>初始化 type StubImportAttribute 的新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubImportAttribute.IsDefaultAttribute">
            <summary>设置 Attribute.IsDefaultAttribute() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubImportAttribute.IsDefaultAttribute01">
            <summary>设置 Attribute.IsDefaultAttribute() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubImportAttribute.Match(System.Object)">
            <summary>设置 Attribute.Match(Object obj) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubImportAttribute.MatchObject">
            <summary>设置 Attribute.Match(Object obj) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubImportAttribute.TypeIdGet">
            <summary>设置 Attribute.get_TypeId() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubImportAttribute.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubImportAttribute.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubImportAttribute.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubImportAttribute.TypeId">
            <summary>设置 Attribute.get_TypeId() 的 stub</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.StubJoinedBaseAttribute">
            <summary>Castle.ActiveRecord.JoinedBaseAttribute 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubJoinedBaseAttribute.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubJoinedBaseAttribute.Equals(System.Object)">
            <summary>设置 Attribute.Equals(Object obj) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubJoinedBaseAttribute.EqualsObject">
            <summary>设置 Attribute.Equals(Object obj) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubJoinedBaseAttribute.GetHashCode">
            <summary>设置 Attribute.GetHashCode() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubJoinedBaseAttribute.GetHashCode01">
            <summary>设置 Attribute.GetHashCode() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubJoinedBaseAttribute.InitializeStub">
            <summary>初始化 type StubJoinedBaseAttribute 的新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubJoinedBaseAttribute.IsDefaultAttribute">
            <summary>设置 Attribute.IsDefaultAttribute() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubJoinedBaseAttribute.IsDefaultAttribute01">
            <summary>设置 Attribute.IsDefaultAttribute() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubJoinedBaseAttribute.Match(System.Object)">
            <summary>设置 Attribute.Match(Object obj) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubJoinedBaseAttribute.MatchObject">
            <summary>设置 Attribute.Match(Object obj) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubJoinedBaseAttribute.TypeIdGet">
            <summary>设置 Attribute.get_TypeId() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubJoinedBaseAttribute.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubJoinedBaseAttribute.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubJoinedBaseAttribute.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubJoinedBaseAttribute.TypeId">
            <summary>设置 Attribute.get_TypeId() 的 stub</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.StubJoinedKeyAttribute">
            <summary>Castle.ActiveRecord.JoinedKeyAttribute 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubJoinedKeyAttribute.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubJoinedKeyAttribute.#ctor(System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubJoinedKeyAttribute.Equals(System.Object)">
            <summary>设置 Attribute.Equals(Object obj) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubJoinedKeyAttribute.EqualsObject">
            <summary>设置 Attribute.Equals(Object obj) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubJoinedKeyAttribute.GetHashCode">
            <summary>设置 Attribute.GetHashCode() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubJoinedKeyAttribute.GetHashCode01">
            <summary>设置 Attribute.GetHashCode() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubJoinedKeyAttribute.InitializeStub">
            <summary>初始化 type StubJoinedKeyAttribute 的新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubJoinedKeyAttribute.IsDefaultAttribute">
            <summary>设置 Attribute.IsDefaultAttribute() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubJoinedKeyAttribute.IsDefaultAttribute01">
            <summary>设置 Attribute.IsDefaultAttribute() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubJoinedKeyAttribute.Match(System.Object)">
            <summary>设置 Attribute.Match(Object obj) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubJoinedKeyAttribute.MatchObject">
            <summary>设置 Attribute.Match(Object obj) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubJoinedKeyAttribute.TypeIdGet">
            <summary>设置 Attribute.get_TypeId() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubJoinedKeyAttribute.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubJoinedKeyAttribute.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubJoinedKeyAttribute.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubJoinedKeyAttribute.TypeId">
            <summary>设置 Attribute.get_TypeId() 的 stub</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.StubJoinedTableAttribute">
            <summary>Castle.ActiveRecord.JoinedTableAttribute 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubJoinedTableAttribute.#ctor(System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubJoinedTableAttribute.Equals(System.Object)">
            <summary>设置 Attribute.Equals(Object obj) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubJoinedTableAttribute.EqualsObject">
            <summary>设置 Attribute.Equals(Object obj) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubJoinedTableAttribute.GetHashCode">
            <summary>设置 Attribute.GetHashCode() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubJoinedTableAttribute.GetHashCode01">
            <summary>设置 Attribute.GetHashCode() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubJoinedTableAttribute.InitializeStub">
            <summary>初始化 type StubJoinedTableAttribute 的新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubJoinedTableAttribute.IsDefaultAttribute">
            <summary>设置 Attribute.IsDefaultAttribute() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubJoinedTableAttribute.IsDefaultAttribute01">
            <summary>设置 Attribute.IsDefaultAttribute() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubJoinedTableAttribute.Match(System.Object)">
            <summary>设置 Attribute.Match(Object obj) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubJoinedTableAttribute.MatchObject">
            <summary>设置 Attribute.Match(Object obj) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubJoinedTableAttribute.TypeIdGet">
            <summary>设置 Attribute.get_TypeId() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubJoinedTableAttribute.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubJoinedTableAttribute.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubJoinedTableAttribute.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubJoinedTableAttribute.TypeId">
            <summary>设置 Attribute.get_TypeId() 的 stub</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.StubKeyPropertyAttribute">
            <summary>Castle.ActiveRecord.KeyPropertyAttribute 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubKeyPropertyAttribute.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubKeyPropertyAttribute.Equals(System.Object)">
            <summary>设置 Attribute.Equals(Object obj) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubKeyPropertyAttribute.EqualsObject">
            <summary>设置 Attribute.Equals(Object obj) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubKeyPropertyAttribute.GetHashCode">
            <summary>设置 Attribute.GetHashCode() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubKeyPropertyAttribute.GetHashCode01">
            <summary>设置 Attribute.GetHashCode() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubKeyPropertyAttribute.InitializeStub">
            <summary>初始化 type StubKeyPropertyAttribute 的新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubKeyPropertyAttribute.IsDefaultAttribute">
            <summary>设置 Attribute.IsDefaultAttribute() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubKeyPropertyAttribute.IsDefaultAttribute01">
            <summary>设置 Attribute.IsDefaultAttribute() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubKeyPropertyAttribute.Match(System.Object)">
            <summary>设置 Attribute.Match(Object obj) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubKeyPropertyAttribute.MatchObject">
            <summary>设置 Attribute.Match(Object obj) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubKeyPropertyAttribute.TypeIdGet">
            <summary>设置 Attribute.get_TypeId() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubKeyPropertyAttribute.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubKeyPropertyAttribute.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubKeyPropertyAttribute.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubKeyPropertyAttribute.TypeId">
            <summary>设置 Attribute.get_TypeId() 的 stub</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.StubNestedAttribute">
            <summary>Castle.ActiveRecord.NestedAttribute 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubNestedAttribute.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubNestedAttribute.#ctor(System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubNestedAttribute.Equals(System.Object)">
            <summary>设置 Attribute.Equals(Object obj) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubNestedAttribute.EqualsObject">
            <summary>设置 Attribute.Equals(Object obj) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubNestedAttribute.GetHashCode">
            <summary>设置 Attribute.GetHashCode() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubNestedAttribute.GetHashCode01">
            <summary>设置 Attribute.GetHashCode() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubNestedAttribute.InitializeStub">
            <summary>初始化 type StubNestedAttribute 的新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubNestedAttribute.IsDefaultAttribute">
            <summary>设置 Attribute.IsDefaultAttribute() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubNestedAttribute.IsDefaultAttribute01">
            <summary>设置 Attribute.IsDefaultAttribute() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubNestedAttribute.Match(System.Object)">
            <summary>设置 Attribute.Match(Object obj) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubNestedAttribute.MatchObject">
            <summary>设置 Attribute.Match(Object obj) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubNestedAttribute.TypeIdGet">
            <summary>设置 Attribute.get_TypeId() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubNestedAttribute.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubNestedAttribute.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubNestedAttribute.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubNestedAttribute.TypeId">
            <summary>设置 Attribute.get_TypeId() 的 stub</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.StubNestedParentReferenceAttribute">
            <summary>Castle.ActiveRecord.NestedParentReferenceAttribute 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubNestedParentReferenceAttribute.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubNestedParentReferenceAttribute.Equals(System.Object)">
            <summary>设置 Attribute.Equals(Object obj) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubNestedParentReferenceAttribute.EqualsObject">
            <summary>设置 Attribute.Equals(Object obj) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubNestedParentReferenceAttribute.GetHashCode">
            <summary>设置 Attribute.GetHashCode() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubNestedParentReferenceAttribute.GetHashCode01">
            <summary>设置 Attribute.GetHashCode() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubNestedParentReferenceAttribute.InitializeStub">
            <summary>初始化 type StubNestedParentReferenceAttribute 的新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubNestedParentReferenceAttribute.IsDefaultAttribute">
            <summary>设置 Attribute.IsDefaultAttribute() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubNestedParentReferenceAttribute.IsDefaultAttribute01">
            <summary>设置 Attribute.IsDefaultAttribute() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubNestedParentReferenceAttribute.Match(System.Object)">
            <summary>设置 Attribute.Match(Object obj) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubNestedParentReferenceAttribute.MatchObject">
            <summary>设置 Attribute.Match(Object obj) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubNestedParentReferenceAttribute.TypeIdGet">
            <summary>设置 Attribute.get_TypeId() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubNestedParentReferenceAttribute.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubNestedParentReferenceAttribute.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubNestedParentReferenceAttribute.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubNestedParentReferenceAttribute.TypeId">
            <summary>设置 Attribute.get_TypeId() 的 stub</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.StubNotFoundException">
            <summary>Castle.ActiveRecord.NotFoundException 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubNotFoundException.#ctor(System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubNotFoundException.#ctor(System.String,System.Exception)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubNotFoundException.AttachBackingFieldToHelpLink">
            <summary>附加委托以将 StubNotFoundException.HelpLink 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubNotFoundException.AttachBackingFieldToSource">
            <summary>附加委托以将 StubNotFoundException.Source 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubNotFoundException.DataGet">
            <summary>设置 Exception.get_Data() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubNotFoundException.GetBaseException">
            <summary>设置 Exception.GetBaseException() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubNotFoundException.GetBaseException01">
            <summary>设置 Exception.GetBaseException() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubNotFoundException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>设置 Exception.GetObjectData(SerializationInfo info, StreamingContext context) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubNotFoundException.GetObjectDataSerializationInfoStreamingContext">
            <summary>设置 Exception.GetObjectData(SerializationInfo info, StreamingContext context) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubNotFoundException.HelpLinkGet">
            <summary>设置 Exception.get_HelpLink() 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubNotFoundException.HelpLinkSetString">
            <summary>设置 Exception.set_HelpLink(String value) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubNotFoundException.InitializeStub">
            <summary>初始化 type StubNotFoundException 的新实例</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubNotFoundException.MessageGet">
            <summary>设置 Exception.get_Message() 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubNotFoundException.SourceGet">
            <summary>设置 Exception.get_Source() 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubNotFoundException.SourceSetString">
            <summary>设置 Exception.set_Source(String value) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubNotFoundException.StackTraceGet">
            <summary>设置 Exception.get_StackTrace() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubNotFoundException.ToString">
            <summary>设置 Exception.ToString() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubNotFoundException.ToString01">
            <summary>设置 Exception.ToString() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubNotFoundException.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubNotFoundException.Data">
            <summary>设置 Exception.get_Data() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubNotFoundException.HelpLink">
            <summary>设置 Exception.get_HelpLink() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubNotFoundException.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubNotFoundException.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubNotFoundException.Message">
            <summary>设置 Exception.get_Message() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubNotFoundException.Source">
            <summary>设置 Exception.get_Source() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubNotFoundException.StackTrace">
            <summary>设置 Exception.get_StackTrace() 的 stub</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.StubOneToOneAttribute">
            <summary>Castle.ActiveRecord.OneToOneAttribute 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubOneToOneAttribute.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubOneToOneAttribute.Equals(System.Object)">
            <summary>设置 Attribute.Equals(Object obj) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubOneToOneAttribute.EqualsObject">
            <summary>设置 Attribute.Equals(Object obj) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubOneToOneAttribute.GetHashCode">
            <summary>设置 Attribute.GetHashCode() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubOneToOneAttribute.GetHashCode01">
            <summary>设置 Attribute.GetHashCode() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubOneToOneAttribute.InitializeStub">
            <summary>初始化 type StubOneToOneAttribute 的新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubOneToOneAttribute.IsDefaultAttribute">
            <summary>设置 Attribute.IsDefaultAttribute() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubOneToOneAttribute.IsDefaultAttribute01">
            <summary>设置 Attribute.IsDefaultAttribute() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubOneToOneAttribute.Match(System.Object)">
            <summary>设置 Attribute.Match(Object obj) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubOneToOneAttribute.MatchObject">
            <summary>设置 Attribute.Match(Object obj) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubOneToOneAttribute.TypeIdGet">
            <summary>设置 Attribute.get_TypeId() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubOneToOneAttribute.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubOneToOneAttribute.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubOneToOneAttribute.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubOneToOneAttribute.TypeId">
            <summary>设置 Attribute.get_TypeId() 的 stub</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.StubPrimaryKeyAttribute">
            <summary>Castle.ActiveRecord.PrimaryKeyAttribute 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubPrimaryKeyAttribute.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubPrimaryKeyAttribute.#ctor(Castle.ActiveRecord.PrimaryKeyType)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubPrimaryKeyAttribute.#ctor(System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubPrimaryKeyAttribute.#ctor(System.Type)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubPrimaryKeyAttribute.#ctor(Castle.ActiveRecord.PrimaryKeyType,System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubPrimaryKeyAttribute.Equals(System.Object)">
            <summary>设置 Attribute.Equals(Object obj) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubPrimaryKeyAttribute.EqualsObject">
            <summary>设置 Attribute.Equals(Object obj) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubPrimaryKeyAttribute.GetHashCode">
            <summary>设置 Attribute.GetHashCode() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubPrimaryKeyAttribute.GetHashCode01">
            <summary>设置 Attribute.GetHashCode() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubPrimaryKeyAttribute.InitializeStub">
            <summary>初始化 type StubPrimaryKeyAttribute 的新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubPrimaryKeyAttribute.IsDefaultAttribute">
            <summary>设置 Attribute.IsDefaultAttribute() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubPrimaryKeyAttribute.IsDefaultAttribute01">
            <summary>设置 Attribute.IsDefaultAttribute() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubPrimaryKeyAttribute.Match(System.Object)">
            <summary>设置 Attribute.Match(Object obj) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubPrimaryKeyAttribute.MatchObject">
            <summary>设置 Attribute.Match(Object obj) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubPrimaryKeyAttribute.TypeIdGet">
            <summary>设置 Attribute.get_TypeId() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubPrimaryKeyAttribute.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubPrimaryKeyAttribute.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubPrimaryKeyAttribute.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubPrimaryKeyAttribute.TypeId">
            <summary>设置 Attribute.get_TypeId() 的 stub</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.StubPropertyAccessHelper">
            <summary>Castle.ActiveRecord.PropertyAccessHelper 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubPropertyAccessHelper.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubPropertyAccessHelper.InitializeStub">
            <summary>初始化 type StubPropertyAccessHelper 的新实例</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubPropertyAccessHelper.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubPropertyAccessHelper.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubPropertyAccessHelper.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.StubPropertyAttribute">
            <summary>Castle.ActiveRecord.PropertyAttribute 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubPropertyAttribute.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubPropertyAttribute.#ctor(System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubPropertyAttribute.#ctor(System.String,System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubPropertyAttribute.Equals(System.Object)">
            <summary>设置 Attribute.Equals(Object obj) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubPropertyAttribute.EqualsObject">
            <summary>设置 Attribute.Equals(Object obj) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubPropertyAttribute.GetHashCode">
            <summary>设置 Attribute.GetHashCode() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubPropertyAttribute.GetHashCode01">
            <summary>设置 Attribute.GetHashCode() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubPropertyAttribute.InitializeStub">
            <summary>初始化 type StubPropertyAttribute 的新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubPropertyAttribute.IsDefaultAttribute">
            <summary>设置 Attribute.IsDefaultAttribute() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubPropertyAttribute.IsDefaultAttribute01">
            <summary>设置 Attribute.IsDefaultAttribute() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubPropertyAttribute.Match(System.Object)">
            <summary>设置 Attribute.Match(Object obj) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubPropertyAttribute.MatchObject">
            <summary>设置 Attribute.Match(Object obj) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubPropertyAttribute.TypeIdGet">
            <summary>设置 Attribute.get_TypeId() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubPropertyAttribute.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubPropertyAttribute.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubPropertyAttribute.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubPropertyAttribute.TypeId">
            <summary>设置 Attribute.get_TypeId() 的 stub</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.StubRawXmlMappingAttribute">
            <summary>Castle.ActiveRecord.RawXmlMappingAttribute 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubRawXmlMappingAttribute.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubRawXmlMappingAttribute.Equals(System.Object)">
            <summary>设置 Attribute.Equals(Object obj) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubRawXmlMappingAttribute.EqualsObject">
            <summary>设置 Attribute.Equals(Object obj) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubRawXmlMappingAttribute.GetHashCode">
            <summary>设置 Attribute.GetHashCode() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubRawXmlMappingAttribute.GetHashCode01">
            <summary>设置 Attribute.GetHashCode() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubRawXmlMappingAttribute.GetMappings">
            <summary>设置 RawXmlMappingAttribute.GetMappings() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubRawXmlMappingAttribute.GetMappings01">
            <summary>设置 RawXmlMappingAttribute.GetMappings() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubRawXmlMappingAttribute.InitializeStub">
            <summary>初始化 type StubRawXmlMappingAttribute 的新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubRawXmlMappingAttribute.IsDefaultAttribute">
            <summary>设置 Attribute.IsDefaultAttribute() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubRawXmlMappingAttribute.IsDefaultAttribute01">
            <summary>设置 Attribute.IsDefaultAttribute() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubRawXmlMappingAttribute.Match(System.Object)">
            <summary>设置 Attribute.Match(Object obj) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubRawXmlMappingAttribute.MatchObject">
            <summary>设置 Attribute.Match(Object obj) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubRawXmlMappingAttribute.TypeIdGet">
            <summary>设置 Attribute.get_TypeId() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubRawXmlMappingAttribute.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubRawXmlMappingAttribute.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubRawXmlMappingAttribute.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubRawXmlMappingAttribute.TypeId">
            <summary>设置 Attribute.get_TypeId() 的 stub</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.StubRelationAttribute">
            <summary>Castle.ActiveRecord.RelationAttribute 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubRelationAttribute.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubRelationAttribute.Equals(System.Object)">
            <summary>设置 Attribute.Equals(Object obj) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubRelationAttribute.EqualsObject">
            <summary>设置 Attribute.Equals(Object obj) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubRelationAttribute.GetHashCode">
            <summary>设置 Attribute.GetHashCode() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubRelationAttribute.GetHashCode01">
            <summary>设置 Attribute.GetHashCode() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubRelationAttribute.InitializeStub">
            <summary>初始化 type StubRelationAttribute 的新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubRelationAttribute.IsDefaultAttribute">
            <summary>设置 Attribute.IsDefaultAttribute() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubRelationAttribute.IsDefaultAttribute01">
            <summary>设置 Attribute.IsDefaultAttribute() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubRelationAttribute.Match(System.Object)">
            <summary>设置 Attribute.Match(Object obj) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubRelationAttribute.MatchObject">
            <summary>设置 Attribute.Match(Object obj) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubRelationAttribute.TypeIdGet">
            <summary>设置 Attribute.get_TypeId() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubRelationAttribute.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubRelationAttribute.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubRelationAttribute.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubRelationAttribute.TypeId">
            <summary>设置 Attribute.get_TypeId() 的 stub</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.StubScopedConversation">
            <summary>Castle.ActiveRecord.ScopedConversation 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubScopedConversation.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubScopedConversation.#ctor(Castle.ActiveRecord.ConversationFlushMode)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubScopedConversation.InitializeStub">
            <summary>初始化 type StubScopedConversation 的新实例</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubScopedConversation.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubScopedConversation.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubScopedConversation.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.StubSessionScope">
            <summary>Castle.ActiveRecord.SessionScope 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubSessionScope.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubSessionScope.#ctor(Castle.ActiveRecord.FlushAction)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubSessionScope.#ctor(Castle.ActiveRecord.FlushAction,Castle.ActiveRecord.SessionScopeType)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubSessionScope.DiscardSessions(System.Collections.Generic.ICollection{NHibernate.ISession})">
            <summary>设置 AbstractScope.DiscardSessions(ICollection`1&lt;ISession&gt; sessions) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubSessionScope.DiscardSessionsICollectionOfISession">
            <summary>设置 AbstractScope.DiscardSessions(ICollection`1&lt;ISession&gt; sessions) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubSessionScope.FailSession(NHibernate.ISession)">
            <summary>设置 SessionScope.FailSession(ISession session) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubSessionScope.FailSessionISession">
            <summary>设置 SessionScope.FailSession(ISession session) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubSessionScope.Flush">
            <summary>设置 AbstractScope.Flush() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubSessionScope.Flush01">
            <summary>设置 AbstractScope.Flush() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubSessionScope.GetSession(System.Object)">
            <summary>设置 AbstractScope.GetSession(Object key) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubSessionScope.GetSessionObject">
            <summary>设置 AbstractScope.GetSession(Object key) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubSessionScope.Initialize(NHibernate.ISession)">
            <summary>设置 AbstractScope.Initialize(ISession session) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubSessionScope.InitializeISession">
            <summary>设置 AbstractScope.Initialize(ISession session) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubSessionScope.InitializeStub">
            <summary>初始化 type StubSessionScope 的新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubSessionScope.IsKeyKnown(System.Object)">
            <summary>设置 AbstractScope.IsKeyKnown(Object key) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubSessionScope.IsKeyKnownObject">
            <summary>设置 AbstractScope.IsKeyKnown(Object key) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubSessionScope.OpenSession(NHibernate.ISessionFactory,NHibernate.IInterceptor)">
            <summary>设置 AbstractScope.OpenSession(ISessionFactory sessionFactory, IInterceptor interceptor) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubSessionScope.OpenSessionISessionFactoryIInterceptor">
            <summary>设置 AbstractScope.OpenSession(ISessionFactory sessionFactory, IInterceptor interceptor) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubSessionScope.PerformDisposal(System.Collections.Generic.ICollection{NHibernate.ISession})">
            <summary>设置 SessionScope.PerformDisposal(ICollection`1&lt;ISession&gt; sessions) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubSessionScope.PerformDisposalICollectionOfISession">
            <summary>设置 SessionScope.PerformDisposal(ICollection`1&lt;ISession&gt; sessions) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubSessionScope.RegisterSession(System.Object,NHibernate.ISession)">
            <summary>设置 AbstractScope.RegisterSession(Object key, ISession session) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubSessionScope.RegisterSessionObjectISession">
            <summary>设置 AbstractScope.RegisterSession(Object key, ISession session) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubSessionScope.WantsToCreateTheSessionGet">
            <summary>设置 AbstractScope.get_WantsToCreateTheSession() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubSessionScope.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubSessionScope.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubSessionScope.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubSessionScope.WantsToCreateTheSession">
            <summary>设置 AbstractScope.get_WantsToCreateTheSession() 的 stub</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.StubSqlNamedQueryAttribute">
            <summary>Castle.ActiveRecord.SqlNamedQueryAttribute 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubSqlNamedQueryAttribute.#ctor(System.String,System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubSqlNamedQueryAttribute.Equals(System.Object)">
            <summary>设置 Attribute.Equals(Object obj) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubSqlNamedQueryAttribute.EqualsObject">
            <summary>设置 Attribute.Equals(Object obj) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubSqlNamedQueryAttribute.GetHashCode">
            <summary>设置 Attribute.GetHashCode() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubSqlNamedQueryAttribute.GetHashCode01">
            <summary>设置 Attribute.GetHashCode() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubSqlNamedQueryAttribute.InitializeStub">
            <summary>初始化 type StubSqlNamedQueryAttribute 的新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubSqlNamedQueryAttribute.IsDefaultAttribute">
            <summary>设置 Attribute.IsDefaultAttribute() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubSqlNamedQueryAttribute.IsDefaultAttribute01">
            <summary>设置 Attribute.IsDefaultAttribute() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubSqlNamedQueryAttribute.Match(System.Object)">
            <summary>设置 Attribute.Match(Object obj) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubSqlNamedQueryAttribute.MatchObject">
            <summary>设置 Attribute.Match(Object obj) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubSqlNamedQueryAttribute.TypeIdGet">
            <summary>设置 Attribute.get_TypeId() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubSqlNamedQueryAttribute.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubSqlNamedQueryAttribute.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubSqlNamedQueryAttribute.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubSqlNamedQueryAttribute.TypeId">
            <summary>设置 Attribute.get_TypeId() 的 stub</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.StubStatelessSessionScope">
            <summary>Castle.ActiveRecord.StatelessSessionScope 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubStatelessSessionScope.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubStatelessSessionScope.DiscardSessions(System.Collections.Generic.ICollection{NHibernate.ISession})">
            <summary>设置 AbstractScope.DiscardSessions(ICollection`1&lt;ISession&gt; sessions) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubStatelessSessionScope.DiscardSessionsICollectionOfISession">
            <summary>设置 AbstractScope.DiscardSessions(ICollection`1&lt;ISession&gt; sessions) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubStatelessSessionScope.FailSession(NHibernate.ISession)">
            <summary>设置 SessionScope.FailSession(ISession session) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubStatelessSessionScope.FailSessionISession">
            <summary>设置 SessionScope.FailSession(ISession session) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubStatelessSessionScope.Flush">
            <summary>设置 AbstractScope.Flush() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubStatelessSessionScope.Flush01">
            <summary>设置 AbstractScope.Flush() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubStatelessSessionScope.GetSession(System.Object)">
            <summary>设置 AbstractScope.GetSession(Object key) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubStatelessSessionScope.GetSessionObject">
            <summary>设置 AbstractScope.GetSession(Object key) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubStatelessSessionScope.Initialize(NHibernate.ISession)">
            <summary>设置 AbstractScope.Initialize(ISession session) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubStatelessSessionScope.InitializeISession">
            <summary>设置 AbstractScope.Initialize(ISession session) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubStatelessSessionScope.InitializeStub">
            <summary>初始化 type StubStatelessSessionScope 的新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubStatelessSessionScope.IsKeyKnown(System.Object)">
            <summary>设置 AbstractScope.IsKeyKnown(Object key) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubStatelessSessionScope.IsKeyKnownObject">
            <summary>设置 AbstractScope.IsKeyKnown(Object key) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubStatelessSessionScope.OpenSession(NHibernate.ISessionFactory,NHibernate.IInterceptor)">
            <summary>设置 StatelessSessionScope.OpenSession(ISessionFactory sessionFactory, IInterceptor interceptor) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubStatelessSessionScope.OpenSessionISessionFactoryIInterceptor">
            <summary>设置 StatelessSessionScope.OpenSession(ISessionFactory sessionFactory, IInterceptor interceptor) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubStatelessSessionScope.PerformDisposal(System.Collections.Generic.ICollection{NHibernate.ISession})">
            <summary>设置 SessionScope.PerformDisposal(ICollection`1&lt;ISession&gt; sessions) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubStatelessSessionScope.PerformDisposalICollectionOfISession">
            <summary>设置 SessionScope.PerformDisposal(ICollection`1&lt;ISession&gt; sessions) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubStatelessSessionScope.RegisterSession(System.Object,NHibernate.ISession)">
            <summary>设置 AbstractScope.RegisterSession(Object key, ISession session) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubStatelessSessionScope.RegisterSessionObjectISession">
            <summary>设置 AbstractScope.RegisterSession(Object key, ISession session) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubStatelessSessionScope.WantsToCreateTheSessionGet">
            <summary>设置 AbstractScope.get_WantsToCreateTheSession() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubStatelessSessionScope.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubStatelessSessionScope.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubStatelessSessionScope.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubStatelessSessionScope.WantsToCreateTheSession">
            <summary>设置 AbstractScope.get_WantsToCreateTheSession() 的 stub</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.StubTimestampAttribute">
            <summary>Castle.ActiveRecord.TimestampAttribute 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubTimestampAttribute.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubTimestampAttribute.#ctor(System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubTimestampAttribute.Equals(System.Object)">
            <summary>设置 Attribute.Equals(Object obj) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubTimestampAttribute.EqualsObject">
            <summary>设置 Attribute.Equals(Object obj) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubTimestampAttribute.GetHashCode">
            <summary>设置 Attribute.GetHashCode() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubTimestampAttribute.GetHashCode01">
            <summary>设置 Attribute.GetHashCode() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubTimestampAttribute.InitializeStub">
            <summary>初始化 type StubTimestampAttribute 的新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubTimestampAttribute.IsDefaultAttribute">
            <summary>设置 Attribute.IsDefaultAttribute() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubTimestampAttribute.IsDefaultAttribute01">
            <summary>设置 Attribute.IsDefaultAttribute() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubTimestampAttribute.Match(System.Object)">
            <summary>设置 Attribute.Match(Object obj) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubTimestampAttribute.MatchObject">
            <summary>设置 Attribute.Match(Object obj) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubTimestampAttribute.TypeIdGet">
            <summary>设置 Attribute.get_TypeId() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubTimestampAttribute.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubTimestampAttribute.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubTimestampAttribute.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubTimestampAttribute.TypeId">
            <summary>设置 Attribute.get_TypeId() 的 stub</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.StubTransactionScope">
            <summary>Castle.ActiveRecord.TransactionScope 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubTransactionScope.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubTransactionScope.#ctor(Castle.ActiveRecord.OnDispose)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubTransactionScope.#ctor(Castle.ActiveRecord.TransactionMode)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubTransactionScope.#ctor(Castle.ActiveRecord.TransactionMode,Castle.ActiveRecord.OnDispose)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubTransactionScope.#ctor(Castle.ActiveRecord.TransactionMode,System.Data.IsolationLevel,Castle.ActiveRecord.OnDispose)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubTransactionScope.DiscardSessions(System.Collections.Generic.ICollection{NHibernate.ISession})">
            <summary>设置 TransactionScope.DiscardSessions(ICollection`1&lt;ISession&gt; sessions) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubTransactionScope.DiscardSessionsICollectionOfISession">
            <summary>设置 TransactionScope.DiscardSessions(ICollection`1&lt;ISession&gt; sessions) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubTransactionScope.FailSession(NHibernate.ISession)">
            <summary>设置 TransactionScope.FailSession(ISession session) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubTransactionScope.FailSessionISession">
            <summary>设置 TransactionScope.FailSession(ISession session) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubTransactionScope.Flush">
            <summary>设置 TransactionScope.Flush() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubTransactionScope.Flush01">
            <summary>设置 TransactionScope.Flush() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubTransactionScope.GetSession(System.Object)">
            <summary>设置 TransactionScope.GetSession(Object key) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubTransactionScope.GetSessionObject">
            <summary>设置 TransactionScope.GetSession(Object key) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubTransactionScope.Initialize(NHibernate.ISession)">
            <summary>设置 TransactionScope.Initialize(ISession session) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubTransactionScope.InitializeISession">
            <summary>设置 TransactionScope.Initialize(ISession session) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubTransactionScope.InitializeStub">
            <summary>初始化 type StubTransactionScope 的新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubTransactionScope.IsKeyKnown(System.Object)">
            <summary>设置 TransactionScope.IsKeyKnown(Object key) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubTransactionScope.IsKeyKnownObject">
            <summary>设置 TransactionScope.IsKeyKnown(Object key) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubTransactionScope.OpenSession(NHibernate.ISessionFactory,NHibernate.IInterceptor)">
            <summary>设置 TransactionScope.OpenSession(ISessionFactory sessionFactory, IInterceptor interceptor) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubTransactionScope.OpenSessionISessionFactoryIInterceptor">
            <summary>设置 TransactionScope.OpenSession(ISessionFactory sessionFactory, IInterceptor interceptor) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubTransactionScope.PerformDisposal(System.Collections.Generic.ICollection{NHibernate.ISession})">
            <summary>设置 TransactionScope.PerformDisposal(ICollection`1&lt;ISession&gt; sessions) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubTransactionScope.PerformDisposalICollectionOfISession">
            <summary>设置 TransactionScope.PerformDisposal(ICollection`1&lt;ISession&gt; sessions) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubTransactionScope.RegisterSession(System.Object,NHibernate.ISession)">
            <summary>设置 TransactionScope.RegisterSession(Object key, ISession session) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubTransactionScope.RegisterSessionObjectISession">
            <summary>设置 TransactionScope.RegisterSession(Object key, ISession session) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubTransactionScope.WantsToCreateTheSessionGet">
            <summary>设置 AbstractScope.get_WantsToCreateTheSession() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubTransactionScope.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubTransactionScope.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubTransactionScope.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubTransactionScope.WantsToCreateTheSession">
            <summary>设置 AbstractScope.get_WantsToCreateTheSession() 的 stub</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.StubValidateIsUniqueAttribute">
            <summary>Castle.ActiveRecord.ValidateIsUniqueAttribute 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubValidateIsUniqueAttribute.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubValidateIsUniqueAttribute.#ctor(System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubValidateIsUniqueAttribute.Build">
            <summary>设置 ValidateIsUniqueAttribute.Build() 的 存根</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubValidateIsUniqueAttribute.Build(Castle.Components.Validator.IValidatorRunner,System.Type)">
            <summary>设置 AbstractValidationAttribute.Build(IValidatorRunner validatorRunner, Type type) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubValidateIsUniqueAttribute.Build01">
            <summary>设置 ValidateIsUniqueAttribute.Build() 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubValidateIsUniqueAttribute.BuildIValidatorRunnerType">
            <summary>设置 AbstractValidationAttribute.Build(IValidatorRunner validatorRunner, Type type) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubValidateIsUniqueAttribute.Equals(System.Object)">
            <summary>设置 Attribute.Equals(Object obj) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubValidateIsUniqueAttribute.EqualsObject">
            <summary>设置 Attribute.Equals(Object obj) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubValidateIsUniqueAttribute.GetHashCode">
            <summary>设置 Attribute.GetHashCode() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubValidateIsUniqueAttribute.GetHashCode01">
            <summary>设置 Attribute.GetHashCode() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubValidateIsUniqueAttribute.Initialize(Castle.Components.Validator.IValidatorRegistry,System.Reflection.PropertyInfo)">
            <summary>设置 AbstractValidationAttribute.Initialize(IValidatorRegistry validationRegistry, PropertyInfo property) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubValidateIsUniqueAttribute.InitializeIValidatorRegistryPropertyInfo">
            <summary>设置 AbstractValidationAttribute.Initialize(IValidatorRegistry validationRegistry, PropertyInfo property) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubValidateIsUniqueAttribute.InitializeStub">
            <summary>初始化 type StubValidateIsUniqueAttribute 的新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubValidateIsUniqueAttribute.IsDefaultAttribute">
            <summary>设置 Attribute.IsDefaultAttribute() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubValidateIsUniqueAttribute.IsDefaultAttribute01">
            <summary>设置 Attribute.IsDefaultAttribute() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubValidateIsUniqueAttribute.Match(System.Object)">
            <summary>设置 Attribute.Match(Object obj) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubValidateIsUniqueAttribute.MatchObject">
            <summary>设置 Attribute.Match(Object obj) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubValidateIsUniqueAttribute.TypeIdGet">
            <summary>设置 Attribute.get_TypeId() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubValidateIsUniqueAttribute.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubValidateIsUniqueAttribute.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubValidateIsUniqueAttribute.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubValidateIsUniqueAttribute.TypeId">
            <summary>设置 Attribute.get_TypeId() 的 stub</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.StubVersionAttribute">
            <summary>Castle.ActiveRecord.VersionAttribute 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubVersionAttribute.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubVersionAttribute.#ctor(System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubVersionAttribute.Equals(System.Object)">
            <summary>设置 Attribute.Equals(Object obj) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubVersionAttribute.EqualsObject">
            <summary>设置 Attribute.Equals(Object obj) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubVersionAttribute.GetHashCode">
            <summary>设置 Attribute.GetHashCode() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubVersionAttribute.GetHashCode01">
            <summary>设置 Attribute.GetHashCode() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubVersionAttribute.InitializeStub">
            <summary>初始化 type StubVersionAttribute 的新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubVersionAttribute.IsDefaultAttribute">
            <summary>设置 Attribute.IsDefaultAttribute() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubVersionAttribute.IsDefaultAttribute01">
            <summary>设置 Attribute.IsDefaultAttribute() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubVersionAttribute.Match(System.Object)">
            <summary>设置 Attribute.Match(Object obj) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubVersionAttribute.MatchObject">
            <summary>设置 Attribute.Match(Object obj) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubVersionAttribute.TypeIdGet">
            <summary>设置 Attribute.get_TypeId() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubVersionAttribute.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubVersionAttribute.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubVersionAttribute.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubVersionAttribute.TypeId">
            <summary>设置 Attribute.get_TypeId() 的 stub</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.StubWithAccessAttribute">
            <summary>Castle.ActiveRecord.WithAccessAttribute 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubWithAccessAttribute.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubWithAccessAttribute.Equals(System.Object)">
            <summary>设置 Attribute.Equals(Object obj) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubWithAccessAttribute.EqualsObject">
            <summary>设置 Attribute.Equals(Object obj) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubWithAccessAttribute.GetHashCode">
            <summary>设置 Attribute.GetHashCode() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubWithAccessAttribute.GetHashCode01">
            <summary>设置 Attribute.GetHashCode() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubWithAccessAttribute.InitializeStub">
            <summary>初始化 type StubWithAccessAttribute 的新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubWithAccessAttribute.IsDefaultAttribute">
            <summary>设置 Attribute.IsDefaultAttribute() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubWithAccessAttribute.IsDefaultAttribute01">
            <summary>设置 Attribute.IsDefaultAttribute() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubWithAccessAttribute.Match(System.Object)">
            <summary>设置 Attribute.Match(Object obj) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubWithAccessAttribute.MatchObject">
            <summary>设置 Attribute.Match(Object obj) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubWithAccessAttribute.TypeIdGet">
            <summary>设置 Attribute.get_TypeId() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubWithAccessAttribute.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubWithAccessAttribute.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubWithAccessAttribute.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubWithAccessAttribute.TypeId">
            <summary>设置 Attribute.get_TypeId() 的 stub</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Fakes.StubWithAccessOptionalTableAttribute">
            <summary>Castle.ActiveRecord.WithAccessOptionalTableAttribute 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubWithAccessOptionalTableAttribute.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubWithAccessOptionalTableAttribute.Equals(System.Object)">
            <summary>设置 Attribute.Equals(Object obj) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubWithAccessOptionalTableAttribute.EqualsObject">
            <summary>设置 Attribute.Equals(Object obj) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubWithAccessOptionalTableAttribute.GetHashCode">
            <summary>设置 Attribute.GetHashCode() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubWithAccessOptionalTableAttribute.GetHashCode01">
            <summary>设置 Attribute.GetHashCode() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubWithAccessOptionalTableAttribute.InitializeStub">
            <summary>初始化 type StubWithAccessOptionalTableAttribute 的新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubWithAccessOptionalTableAttribute.IsDefaultAttribute">
            <summary>设置 Attribute.IsDefaultAttribute() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubWithAccessOptionalTableAttribute.IsDefaultAttribute01">
            <summary>设置 Attribute.IsDefaultAttribute() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Fakes.StubWithAccessOptionalTableAttribute.Match(System.Object)">
            <summary>设置 Attribute.Match(Object obj) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubWithAccessOptionalTableAttribute.MatchObject">
            <summary>设置 Attribute.Match(Object obj) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Fakes.StubWithAccessOptionalTableAttribute.TypeIdGet">
            <summary>设置 Attribute.get_TypeId() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubWithAccessOptionalTableAttribute.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubWithAccessOptionalTableAttribute.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubWithAccessOptionalTableAttribute.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Fakes.StubWithAccessOptionalTableAttribute.TypeId">
            <summary>设置 Attribute.get_TypeId() 的 stub</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Config.Fakes.ShimActiveRecordSectionHandler">
            <summary>Castle.ActiveRecord.Framework.Config.ActiveRecordSectionHandler 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.ShimActiveRecordSectionHandler.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.ShimActiveRecordSectionHandler.#ctor(Castle.ActiveRecord.Framework.Config.ActiveRecordSectionHandler)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.ShimActiveRecordSectionHandler.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.ShimActiveRecordSectionHandler.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.ShimActiveRecordSectionHandler.Bind(Castle.ActiveRecord.Framework.IConfigurationSource)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.ShimActiveRecordSectionHandler.Bind(System.Configuration.IConfigurationSectionHandler)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimActiveRecordSectionHandler.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimActiveRecordSectionHandler.Constructor">
            <summary>设置 ActiveRecordSectionHandler.ActiveRecordSectionHandler() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimActiveRecordSectionHandler.CreateObjectObjectXmlNode">
            <summary>设置 ActiveRecordSectionHandler.Create(Object parent, Object configContext, XmlNode section) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimActiveRecordSectionHandler.GetInstance">
            <summary>设置 ActiveRecordSectionHandler.GetInstance() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimActiveRecordSectionHandler.InstanceGet">
            <summary>设置 ActiveRecordSectionHandler.get_Instance() 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Config.Fakes.ShimActiveRecordSectionHandler.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimActiveRecordSectionHandler.AllInstances.CreateObjectObjectXmlNode">
            <summary>设置 ActiveRecordSectionHandler.Create(Object parent, Object configContext, XmlNode section) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Config.Fakes.ShimConfigure">
            <summary>Castle.ActiveRecord.Framework.Config.Configure 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.ShimConfigure.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.ShimConfigure.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.ShimConfigure.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimConfigure.ActiveRecordGet">
            <summary>设置 Configure.get_ActiveRecord() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimConfigure.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimConfigure.StorageGet">
            <summary>设置 Configure.get_Storage() 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Config.Fakes.ShimDefaultActiveRecordConfiguration">
            <summary>Castle.ActiveRecord.Framework.Config.DefaultActiveRecordConfiguration 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.ShimDefaultActiveRecordConfiguration.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.ShimDefaultActiveRecordConfiguration.#ctor(Castle.ActiveRecord.Framework.Config.DefaultActiveRecordConfiguration)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.ShimDefaultActiveRecordConfiguration.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.ShimDefaultActiveRecordConfiguration.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.ShimDefaultActiveRecordConfiguration.Bind(Castle.ActiveRecord.Framework.Config.IActiveRecordConfiguration)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimDefaultActiveRecordConfiguration.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimDefaultActiveRecordConfiguration.Constructor">
            <summary>设置 DefaultActiveRecordConfiguration.DefaultActiveRecordConfiguration() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimDefaultActiveRecordConfiguration.DefaultFlushTypeGet">
            <summary>设置 DefaultActiveRecordConfiguration.get_DefaultFlushType() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimDefaultActiveRecordConfiguration.DefaultFlushTypeSetDefaultFlushType">
            <summary>设置 DefaultActiveRecordConfiguration.set_DefaultFlushType(DefaultFlushType value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimDefaultActiveRecordConfiguration.LazyGet">
            <summary>设置 DefaultActiveRecordConfiguration.get_Lazy() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimDefaultActiveRecordConfiguration.LazySetBoolean">
            <summary>设置 DefaultActiveRecordConfiguration.set_Lazy(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimDefaultActiveRecordConfiguration.SearchableGet">
            <summary>设置 DefaultActiveRecordConfiguration.get_Searchable() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimDefaultActiveRecordConfiguration.SearchableSetBoolean">
            <summary>设置 DefaultActiveRecordConfiguration.set_Searchable(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimDefaultActiveRecordConfiguration.SessionfactoryHolderImplementationGet">
            <summary>设置 DefaultActiveRecordConfiguration.get_SessionfactoryHolderImplementation() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimDefaultActiveRecordConfiguration.SessionfactoryHolderImplementationSetType">
            <summary>设置 DefaultActiveRecordConfiguration.set_SessionfactoryHolderImplementation(Type value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimDefaultActiveRecordConfiguration.ThreadScopeInfoImplementationGet">
            <summary>设置 DefaultActiveRecordConfiguration.get_ThreadScopeInfoImplementation() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimDefaultActiveRecordConfiguration.ThreadScopeInfoImplementationSetType">
            <summary>设置 DefaultActiveRecordConfiguration.set_ThreadScopeInfoImplementation(Type value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimDefaultActiveRecordConfiguration.VerificationGet">
            <summary>设置 DefaultActiveRecordConfiguration.get_Verification() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimDefaultActiveRecordConfiguration.VerificationSetBoolean">
            <summary>设置 DefaultActiveRecordConfiguration.set_Verification(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimDefaultActiveRecordConfiguration.WebEnabledGet">
            <summary>设置 DefaultActiveRecordConfiguration.get_WebEnabled() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimDefaultActiveRecordConfiguration.WebEnabledSetBoolean">
            <summary>设置 DefaultActiveRecordConfiguration.set_WebEnabled(Boolean value) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Config.Fakes.ShimDefaultActiveRecordConfiguration.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimDefaultActiveRecordConfiguration.AllInstances.DefaultFlushTypeGet">
            <summary>设置 DefaultActiveRecordConfiguration.get_DefaultFlushType() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimDefaultActiveRecordConfiguration.AllInstances.DefaultFlushTypeSetDefaultFlushType">
            <summary>设置 DefaultActiveRecordConfiguration.set_DefaultFlushType(DefaultFlushType value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimDefaultActiveRecordConfiguration.AllInstances.LazyGet">
            <summary>设置 DefaultActiveRecordConfiguration.get_Lazy() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimDefaultActiveRecordConfiguration.AllInstances.LazySetBoolean">
            <summary>设置 DefaultActiveRecordConfiguration.set_Lazy(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimDefaultActiveRecordConfiguration.AllInstances.SearchableGet">
            <summary>设置 DefaultActiveRecordConfiguration.get_Searchable() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimDefaultActiveRecordConfiguration.AllInstances.SearchableSetBoolean">
            <summary>设置 DefaultActiveRecordConfiguration.set_Searchable(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimDefaultActiveRecordConfiguration.AllInstances.SessionfactoryHolderImplementationGet">
            <summary>设置 DefaultActiveRecordConfiguration.get_SessionfactoryHolderImplementation() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimDefaultActiveRecordConfiguration.AllInstances.SessionfactoryHolderImplementationSetType">
            <summary>设置 DefaultActiveRecordConfiguration.set_SessionfactoryHolderImplementation(Type value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimDefaultActiveRecordConfiguration.AllInstances.ThreadScopeInfoImplementationGet">
            <summary>设置 DefaultActiveRecordConfiguration.get_ThreadScopeInfoImplementation() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimDefaultActiveRecordConfiguration.AllInstances.ThreadScopeInfoImplementationSetType">
            <summary>设置 DefaultActiveRecordConfiguration.set_ThreadScopeInfoImplementation(Type value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimDefaultActiveRecordConfiguration.AllInstances.VerificationGet">
            <summary>设置 DefaultActiveRecordConfiguration.get_Verification() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimDefaultActiveRecordConfiguration.AllInstances.VerificationSetBoolean">
            <summary>设置 DefaultActiveRecordConfiguration.set_Verification(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimDefaultActiveRecordConfiguration.AllInstances.WebEnabledGet">
            <summary>设置 DefaultActiveRecordConfiguration.get_WebEnabled() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimDefaultActiveRecordConfiguration.AllInstances.WebEnabledSetBoolean">
            <summary>设置 DefaultActiveRecordConfiguration.set_WebEnabled(Boolean value) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Config.Fakes.ShimDefaultDatabaseConfiguration">
            <summary>Castle.ActiveRecord.Framework.Config.DefaultDatabaseConfiguration 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.ShimDefaultDatabaseConfiguration.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.ShimDefaultDatabaseConfiguration.#ctor(Castle.ActiveRecord.Framework.Config.DefaultDatabaseConfiguration)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.ShimDefaultDatabaseConfiguration.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.ShimDefaultDatabaseConfiguration.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.ShimDefaultDatabaseConfiguration.ConfigureOf2``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.Generic.IDictionary{System.String,System.String}})">
            <summary>设置 DefaultDatabaseConfiguration.Configure() 的 填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.ShimDefaultDatabaseConfiguration.ConfigureOf2DictionaryOfStringString``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.IDictionary{System.String,System.String}})">
            <summary>设置 DefaultDatabaseConfiguration.Configure(Dictionary`2&lt;String,String&gt; configuration) 的 填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.ShimDefaultDatabaseConfiguration.LongNameOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String})">
            <summary>设置 DefaultDatabaseConfiguration.LongName() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimDefaultDatabaseConfiguration.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimDefaultDatabaseConfiguration.Constructor">
            <summary>设置 DefaultDatabaseConfiguration.DefaultDatabaseConfiguration() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimDefaultDatabaseConfiguration.Firebird">
            <summary>设置 DefaultDatabaseConfiguration.Firebird() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimDefaultDatabaseConfiguration.ForDatabaseType">
            <summary>设置 DefaultDatabaseConfiguration.For(DatabaseType databaseType) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimDefaultDatabaseConfiguration.MsSqlCe">
            <summary>设置 DefaultDatabaseConfiguration.MsSqlCe() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimDefaultDatabaseConfiguration.SQLite">
            <summary>设置 DefaultDatabaseConfiguration.SQLite() 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Config.Fakes.ShimDefaultDatabaseConfiguration.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.ShimDefaultDatabaseConfiguration.AllInstances.ConfigureOf2``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.ActiveRecord.Framework.Config.DefaultDatabaseConfiguration,System.Collections.Generic.IDictionary{System.String,System.String}})">
            <summary>设置 DefaultDatabaseConfiguration.Configure() 的 填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.ShimDefaultDatabaseConfiguration.AllInstances.ConfigureOf2DictionaryOfStringString``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.ActiveRecord.Framework.Config.DefaultDatabaseConfiguration,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.IDictionary{System.String,System.String}})">
            <summary>设置 DefaultDatabaseConfiguration.Configure(Dictionary`2&lt;String,String&gt; configuration) 的 填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.ShimDefaultDatabaseConfiguration.AllInstances.LongNameOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.ActiveRecord.Framework.Config.DefaultDatabaseConfiguration,System.String})">
            <summary>设置 DefaultDatabaseConfiguration.LongName() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimDefaultDatabaseConfiguration.AllInstances.Firebird">
            <summary>设置 DefaultDatabaseConfiguration.Firebird() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimDefaultDatabaseConfiguration.AllInstances.ForDatabaseType">
            <summary>设置 DefaultDatabaseConfiguration.For(DatabaseType databaseType) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimDefaultDatabaseConfiguration.AllInstances.MsSqlCe">
            <summary>设置 DefaultDatabaseConfiguration.MsSqlCe() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimDefaultDatabaseConfiguration.AllInstances.SQLite">
            <summary>设置 DefaultDatabaseConfiguration.SQLite() 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Config.Fakes.ShimDefaultStorageConfiguration">
            <summary>Castle.ActiveRecord.Framework.Config.DefaultStorageConfiguration 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.ShimDefaultStorageConfiguration.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.ShimDefaultStorageConfiguration.#ctor(Castle.ActiveRecord.Framework.Config.DefaultStorageConfiguration)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.ShimDefaultStorageConfiguration.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.ShimDefaultStorageConfiguration.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.ShimDefaultStorageConfiguration.Bind(Castle.ActiveRecord.Framework.Config.IStorageConfiguration)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.ShimDefaultStorageConfiguration.GetTypeNameOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String})">
            <summary>设置 DefaultStorageConfiguration.GetTypeName() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimDefaultStorageConfiguration.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimDefaultStorageConfiguration.ConfigurationValuesGet">
            <summary>设置 DefaultStorageConfiguration.get_ConfigurationValues() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimDefaultStorageConfiguration.Constructor">
            <summary>设置 DefaultStorageConfiguration.DefaultStorageConfiguration() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimDefaultStorageConfiguration.TypeSelectionsGet">
            <summary>设置 DefaultStorageConfiguration.get_TypeSelections() 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Config.Fakes.ShimDefaultStorageConfiguration.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimDefaultStorageConfiguration.AllInstances.ConfigurationValuesGet">
            <summary>设置 DefaultStorageConfiguration.get_ConfigurationValues() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimDefaultStorageConfiguration.AllInstances.TypeSelectionsGet">
            <summary>设置 DefaultStorageConfiguration.get_TypeSelections() 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Config.Fakes.ShimFluentActiveRecordConfiguration">
            <summary>Castle.ActiveRecord.Framework.Config.FluentActiveRecordConfiguration 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.ShimFluentActiveRecordConfiguration.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.ShimFluentActiveRecordConfiguration.#ctor(Castle.ActiveRecord.Framework.Config.FluentActiveRecordConfiguration)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.ShimFluentActiveRecordConfiguration.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.ShimFluentActiveRecordConfiguration.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.ShimFluentActiveRecordConfiguration.Bind(Castle.ActiveRecord.Framework.Config.IActiveRecordConfiguration)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.ShimFluentActiveRecordConfiguration.UseSessionFactoryHolderOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.ActiveRecord.Framework.Config.FluentActiveRecordConfiguration})">
            <summary>设置 FluentActiveRecordConfiguration.UseSessionFactoryHolder() 的 填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.ShimFluentActiveRecordConfiguration.UseThreadScopeInfoOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.ActiveRecord.Framework.Config.FluentActiveRecordConfiguration})">
            <summary>设置 FluentActiveRecordConfiguration.UseThreadScopeInfo() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimFluentActiveRecordConfiguration.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimFluentActiveRecordConfiguration.Constructor">
            <summary>设置 FluentActiveRecordConfiguration.FluentActiveRecordConfiguration() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimFluentActiveRecordConfiguration.FlushDefaultFlushType">
            <summary>设置 FluentActiveRecordConfiguration.Flush(DefaultFlushType flushType) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimFluentActiveRecordConfiguration.ForWeb">
            <summary>设置 FluentActiveRecordConfiguration.ForWeb() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimFluentActiveRecordConfiguration.MakeLazyByDefault">
            <summary>设置 FluentActiveRecordConfiguration.MakeLazyByDefault() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimFluentActiveRecordConfiguration.RegisterSearch">
            <summary>设置 FluentActiveRecordConfiguration.RegisterSearch() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimFluentActiveRecordConfiguration.VerifyModels">
            <summary>设置 FluentActiveRecordConfiguration.VerifyModels() 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Config.Fakes.ShimFluentActiveRecordConfiguration.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.ShimFluentActiveRecordConfiguration.AllInstances.UseSessionFactoryHolderOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.ActiveRecord.Framework.Config.FluentActiveRecordConfiguration,Castle.ActiveRecord.Framework.Config.FluentActiveRecordConfiguration})">
            <summary>设置 FluentActiveRecordConfiguration.UseSessionFactoryHolder() 的 填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.ShimFluentActiveRecordConfiguration.AllInstances.UseThreadScopeInfoOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.ActiveRecord.Framework.Config.FluentActiveRecordConfiguration,Castle.ActiveRecord.Framework.Config.FluentActiveRecordConfiguration})">
            <summary>设置 FluentActiveRecordConfiguration.UseThreadScopeInfo() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimFluentActiveRecordConfiguration.AllInstances.FlushDefaultFlushType">
            <summary>设置 FluentActiveRecordConfiguration.Flush(DefaultFlushType flushType) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimFluentActiveRecordConfiguration.AllInstances.ForWeb">
            <summary>设置 FluentActiveRecordConfiguration.ForWeb() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimFluentActiveRecordConfiguration.AllInstances.MakeLazyByDefault">
            <summary>设置 FluentActiveRecordConfiguration.MakeLazyByDefault() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimFluentActiveRecordConfiguration.AllInstances.RegisterSearch">
            <summary>设置 FluentActiveRecordConfiguration.RegisterSearch() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimFluentActiveRecordConfiguration.AllInstances.VerifyModels">
            <summary>设置 FluentActiveRecordConfiguration.VerifyModels() 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Config.Fakes.ShimFluentNHibernateMapping">
            <summary>Castle.ActiveRecord.Framework.Config.FluentNHibernateMapping 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.ShimFluentNHibernateMapping.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.ShimFluentNHibernateMapping.#ctor(Castle.ActiveRecord.Framework.Config.FluentNHibernateMapping)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.ShimFluentNHibernateMapping.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.ShimFluentNHibernateMapping.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.ShimFluentNHibernateMapping.Bind(Castle.ActiveRecord.Framework.Config.IMappingSpecification)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.ShimFluentNHibernateMapping.InAssemblyOfOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.ActiveRecord.Framework.Config.FluentNHibernateMapping})">
            <summary>设置 FluentNHibernateMapping.InAssemblyOf() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimFluentNHibernateMapping.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimFluentNHibernateMapping.Constructor">
            <summary>设置 FluentNHibernateMapping.FluentNHibernateMapping() 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Config.Fakes.ShimFluentNHibernateMapping.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.ShimFluentNHibernateMapping.AllInstances.InAssemblyOfOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.ActiveRecord.Framework.Config.FluentNHibernateMapping,Castle.ActiveRecord.Framework.Config.FluentNHibernateMapping})">
            <summary>设置 FluentNHibernateMapping.InAssemblyOf() 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Config.Fakes.ShimFluentStorageConfiguration">
            <summary>Castle.ActiveRecord.Framework.Config.FluentStorageConfiguration 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.ShimFluentStorageConfiguration.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.ShimFluentStorageConfiguration.#ctor(Castle.ActiveRecord.Framework.Config.FluentStorageConfiguration)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.ShimFluentStorageConfiguration.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.ShimFluentStorageConfiguration.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.ShimFluentStorageConfiguration.Bind(Castle.ActiveRecord.Framework.Config.IStorageConfiguration)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.ShimFluentStorageConfiguration.ConnectionProviderOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.ActiveRecord.Framework.Config.FluentStorageConfiguration})">
            <summary>设置 FluentStorageConfiguration.ConnectionProvider() 的 填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.ShimFluentStorageConfiguration.DefaultsForOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.ActiveRecord.Framework.Config.FluentStorageConfiguration})">
            <summary>设置 FluentStorageConfiguration.DefaultsFor() 的 填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.ShimFluentStorageConfiguration.DialectOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.ActiveRecord.Framework.Config.FluentStorageConfiguration})">
            <summary>设置 FluentStorageConfiguration.Dialect() 的 填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.ShimFluentStorageConfiguration.DriverOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.ActiveRecord.Framework.Config.FluentStorageConfiguration})">
            <summary>设置 FluentStorageConfiguration.Driver() 的 填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.ShimFluentStorageConfiguration.ProxiedByOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.ActiveRecord.Framework.Config.FluentStorageConfiguration})">
            <summary>设置 FluentStorageConfiguration.ProxiedBy() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimFluentStorageConfiguration.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimFluentStorageConfiguration.ConnectionStringNameString">
            <summary>设置 FluentStorageConfiguration.ConnectionStringName(String connecctionStringName) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimFluentStorageConfiguration.ConnectionStringString">
            <summary>设置 FluentStorageConfiguration.ConnectionString(String connectionString) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimFluentStorageConfiguration.Constructor">
            <summary>设置 FluentStorageConfiguration.FluentStorageConfiguration() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimFluentStorageConfiguration.ForGet">
            <summary>设置 FluentStorageConfiguration.get_For() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimFluentStorageConfiguration.ShowSql">
            <summary>设置 FluentStorageConfiguration.ShowSql() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimFluentStorageConfiguration.ShowSqlBoolean">
            <summary>设置 FluentStorageConfiguration.ShowSql(Boolean showSql) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Config.Fakes.ShimFluentStorageConfiguration.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.ShimFluentStorageConfiguration.AllInstances.ConnectionProviderOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.ActiveRecord.Framework.Config.FluentStorageConfiguration,Castle.ActiveRecord.Framework.Config.FluentStorageConfiguration})">
            <summary>设置 FluentStorageConfiguration.ConnectionProvider() 的 填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.ShimFluentStorageConfiguration.AllInstances.DefaultsForOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.ActiveRecord.Framework.Config.FluentStorageConfiguration,Castle.ActiveRecord.Framework.Config.FluentStorageConfiguration})">
            <summary>设置 FluentStorageConfiguration.DefaultsFor() 的 填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.ShimFluentStorageConfiguration.AllInstances.DialectOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.ActiveRecord.Framework.Config.FluentStorageConfiguration,Castle.ActiveRecord.Framework.Config.FluentStorageConfiguration})">
            <summary>设置 FluentStorageConfiguration.Dialect() 的 填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.ShimFluentStorageConfiguration.AllInstances.DriverOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.ActiveRecord.Framework.Config.FluentStorageConfiguration,Castle.ActiveRecord.Framework.Config.FluentStorageConfiguration})">
            <summary>设置 FluentStorageConfiguration.Driver() 的 填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.ShimFluentStorageConfiguration.AllInstances.ProxiedByOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.ActiveRecord.Framework.Config.FluentStorageConfiguration,Castle.ActiveRecord.Framework.Config.FluentStorageConfiguration})">
            <summary>设置 FluentStorageConfiguration.ProxiedBy() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimFluentStorageConfiguration.AllInstances.ConnectionStringNameString">
            <summary>设置 FluentStorageConfiguration.ConnectionStringName(String connecctionStringName) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimFluentStorageConfiguration.AllInstances.ConnectionStringString">
            <summary>设置 FluentStorageConfiguration.ConnectionString(String connectionString) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimFluentStorageConfiguration.AllInstances.ForGet">
            <summary>设置 FluentStorageConfiguration.get_For() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimFluentStorageConfiguration.AllInstances.ShowSql">
            <summary>设置 FluentStorageConfiguration.ShowSql() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimFluentStorageConfiguration.AllInstances.ShowSqlBoolean">
            <summary>设置 FluentStorageConfiguration.ShowSql(Boolean showSql) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Config.Fakes.ShimFluentStorageTypeSelection">
            <summary>Castle.ActiveRecord.Framework.Config.FluentStorageTypeSelection 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.ShimFluentStorageTypeSelection.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.ShimFluentStorageTypeSelection.#ctor(Castle.ActiveRecord.Framework.Config.FluentStorageTypeSelection)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.ShimFluentStorageTypeSelection.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.ShimFluentStorageTypeSelection.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.ShimFluentStorageTypeSelection.InNamespaceOfOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.ActiveRecord.Framework.Config.FluentStorageTypeSelection})">
            <summary>设置 FluentStorageTypeSelection.InNamespaceOf() 的 填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.ShimFluentStorageTypeSelection.SubtypesOfOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.ActiveRecord.Framework.Config.FluentStorageTypeSelection})">
            <summary>设置 FluentStorageTypeSelection.SubtypesOf() 的 填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.ShimFluentStorageTypeSelection.TypesInAssemblyOfOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.ActiveRecord.Framework.Config.FluentStorageTypeSelection})">
            <summary>设置 FluentStorageTypeSelection.TypesInAssemblyOf() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimFluentStorageTypeSelection.AllOtherTypes">
            <summary>设置 FluentStorageTypeSelection.AllOtherTypes() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimFluentStorageTypeSelection.AndGet">
            <summary>设置 FluentStorageTypeSelection.get_And() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimFluentStorageTypeSelection.AsGet">
            <summary>设置 FluentStorageTypeSelection.get_As() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimFluentStorageTypeSelection.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimFluentStorageTypeSelection.ConstructorFluentStorageConfiguration">
            <summary>设置 FluentStorageTypeSelection.FluentStorageTypeSelection(FluentStorageConfiguration storageConfiguration) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimFluentStorageTypeSelection.MappedByIMappingSpecification">
            <summary>设置 FluentStorageTypeSelection.MappedBy(IMappingSpecification specification) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Config.Fakes.ShimFluentStorageTypeSelection.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.ShimFluentStorageTypeSelection.AllInstances.InNamespaceOfOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.ActiveRecord.Framework.Config.FluentStorageTypeSelection,Castle.ActiveRecord.Framework.Config.FluentStorageTypeSelection})">
            <summary>设置 FluentStorageTypeSelection.InNamespaceOf() 的 填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.ShimFluentStorageTypeSelection.AllInstances.SubtypesOfOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.ActiveRecord.Framework.Config.FluentStorageTypeSelection,Castle.ActiveRecord.Framework.Config.FluentStorageTypeSelection})">
            <summary>设置 FluentStorageTypeSelection.SubtypesOf() 的 填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.ShimFluentStorageTypeSelection.AllInstances.TypesInAssemblyOfOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.ActiveRecord.Framework.Config.FluentStorageTypeSelection,Castle.ActiveRecord.Framework.Config.FluentStorageTypeSelection})">
            <summary>设置 FluentStorageTypeSelection.TypesInAssemblyOf() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimFluentStorageTypeSelection.AllInstances.AllOtherTypes">
            <summary>设置 FluentStorageTypeSelection.AllOtherTypes() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimFluentStorageTypeSelection.AllInstances.AndGet">
            <summary>设置 FluentStorageTypeSelection.get_And() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimFluentStorageTypeSelection.AllInstances.AsGet">
            <summary>设置 FluentStorageTypeSelection.get_As() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimFluentStorageTypeSelection.AllInstances.MappedByIMappingSpecification">
            <summary>设置 FluentStorageTypeSelection.MappedBy(IMappingSpecification specification) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Config.Fakes.ShimInPlaceConfigurationSource">
            <summary>Castle.ActiveRecord.Framework.Config.InPlaceConfigurationSource 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.ShimInPlaceConfigurationSource.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.ShimInPlaceConfigurationSource.#ctor(Castle.ActiveRecord.Framework.Config.InPlaceConfigurationSource)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.ShimInPlaceConfigurationSource.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.ShimInPlaceConfigurationSource.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.ShimInPlaceConfigurationSource.Bind(Castle.ActiveRecord.Framework.IConfigurationSource)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimInPlaceConfigurationSource.AddTypeIConfiguration">
            <summary>设置 InPlaceConfigurationSource.Add(Type type, IConfiguration config) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimInPlaceConfigurationSource.AddTypeIDictionaryOfStringString">
            <summary>设置 InPlaceConfigurationSource.Add(Type type, IDictionary`2&lt;String,String&gt; properties) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimInPlaceConfigurationSource.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimInPlaceConfigurationSource.BuildDatabaseTypeString">
            <summary>设置 InPlaceConfigurationSource.Build(DatabaseType database, String connectionString) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimInPlaceConfigurationSource.BuildForMSSqlServerStringString">
            <summary>设置 InPlaceConfigurationSource.BuildForMSSqlServer(String server, String initialCatalog) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimInPlaceConfigurationSource.BuildForMSSqlServerStringStringStringString">
            <summary>设置 InPlaceConfigurationSource.BuildForMSSqlServer(String server, String initialCatalog, String username, String password) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimInPlaceConfigurationSource.Constructor">
            <summary>设置 InPlaceConfigurationSource.InPlaceConfigurationSource() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimInPlaceConfigurationSource.ConvertToConfigurationIDictionaryOfStringString">
            <summary>设置 InPlaceConfigurationSource.ConvertToConfiguration(IDictionary`2&lt;String,String&gt; properties) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimInPlaceConfigurationSource.DebugGet">
            <summary>设置 InPlaceConfigurationSource.get_Debug() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimInPlaceConfigurationSource.DefaultFlushTypeGet">
            <summary>设置 InPlaceConfigurationSource.get_DefaultFlushType() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimInPlaceConfigurationSource.DefaultFlushTypeSetDefaultFlushType">
            <summary>设置 InPlaceConfigurationSource.set_DefaultFlushType(DefaultFlushType value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimInPlaceConfigurationSource.GetConfigurationType">
            <summary>设置 InPlaceConfigurationSource.GetConfiguration(Type type) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimInPlaceConfigurationSource.IsLazyByDefaultGet">
            <summary>设置 InPlaceConfigurationSource.get_IsLazyByDefault() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimInPlaceConfigurationSource.IsRunningInWebAppSetBoolean">
            <summary>设置 InPlaceConfigurationSource.set_IsRunningInWebApp(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimInPlaceConfigurationSource.NamingStrategyImplementationGet">
            <summary>设置 InPlaceConfigurationSource.get_NamingStrategyImplementation() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimInPlaceConfigurationSource.NamingStrategyImplementationSetType">
            <summary>设置 InPlaceConfigurationSource.set_NamingStrategyImplementation(Type value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimInPlaceConfigurationSource.PluralizeTableNamesGet">
            <summary>设置 InPlaceConfigurationSource.get_PluralizeTableNames() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimInPlaceConfigurationSource.PluralizeTableNamesSetBoolean">
            <summary>设置 InPlaceConfigurationSource.set_PluralizeTableNames(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimInPlaceConfigurationSource.ProcessConfigurationIConfiguration">
            <summary>设置 InPlaceConfigurationSource.ProcessConfiguration(IConfiguration config) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimInPlaceConfigurationSource.SearchableGet">
            <summary>设置 InPlaceConfigurationSource.get_Searchable() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimInPlaceConfigurationSource.SearchableSetBoolean">
            <summary>设置 InPlaceConfigurationSource.set_Searchable(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimInPlaceConfigurationSource.SessionFactoryHolderImplementationGet">
            <summary>设置 InPlaceConfigurationSource.get_SessionFactoryHolderImplementation() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimInPlaceConfigurationSource.SessionFactoryHolderImplementationSetType">
            <summary>设置 InPlaceConfigurationSource.set_SessionFactoryHolderImplementation(Type value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimInPlaceConfigurationSource.SetDebugFlagBoolean">
            <summary>设置 InPlaceConfigurationSource.SetDebugFlag(Boolean isDebug) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimInPlaceConfigurationSource.SetDefaultFlushTypeDefaultFlushType">
            <summary>设置 InPlaceConfigurationSource.SetDefaultFlushType(DefaultFlushType flushType) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimInPlaceConfigurationSource.SetDefaultFlushTypeString">
            <summary>设置 InPlaceConfigurationSource.SetDefaultFlushType(String configurationValue) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimInPlaceConfigurationSource.SetIsLazyByDefaultBoolean">
            <summary>设置 InPlaceConfigurationSource.SetIsLazyByDefault(Boolean lazyByDefault) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimInPlaceConfigurationSource.SetPluralizeTableNamesBoolean">
            <summary>设置 InPlaceConfigurationSource.SetPluralizeTableNames(Boolean pluralize) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimInPlaceConfigurationSource.SetUpNamingStrategyTypeString">
            <summary>设置 InPlaceConfigurationSource.SetUpNamingStrategyType(String customType) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimInPlaceConfigurationSource.SetUpSessionFactoryHolderTypeString">
            <summary>设置 InPlaceConfigurationSource.SetUpSessionFactoryHolderType(String customType) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimInPlaceConfigurationSource.SetUpThreadInfoTypeBooleanString">
            <summary>设置 InPlaceConfigurationSource.SetUpThreadInfoType(Boolean isWeb, String customType) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimInPlaceConfigurationSource.SetVerifyModelsAgainstDBSchemaBoolean">
            <summary>设置 InPlaceConfigurationSource.SetVerifyModelsAgainstDBSchema(Boolean verifyModelsAgainstDBSchema) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimInPlaceConfigurationSource.ThreadScopeInfoImplementationGet">
            <summary>设置 InPlaceConfigurationSource.get_ThreadScopeInfoImplementation() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimInPlaceConfigurationSource.ThreadScopeInfoImplementationSetType">
            <summary>设置 InPlaceConfigurationSource.set_ThreadScopeInfoImplementation(Type value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimInPlaceConfigurationSource.VerifyModelsAgainstDBSchemaGet">
            <summary>设置 InPlaceConfigurationSource.get_VerifyModelsAgainstDBSchema() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimInPlaceConfigurationSource.VerifyModelsAgainstDBSchemaSetBoolean">
            <summary>设置 InPlaceConfigurationSource.set_VerifyModelsAgainstDBSchema(Boolean value) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Config.Fakes.ShimInPlaceConfigurationSource.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimInPlaceConfigurationSource.AllInstances.AddTypeIConfiguration">
            <summary>设置 InPlaceConfigurationSource.Add(Type type, IConfiguration config) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimInPlaceConfigurationSource.AllInstances.AddTypeIDictionaryOfStringString">
            <summary>设置 InPlaceConfigurationSource.Add(Type type, IDictionary`2&lt;String,String&gt; properties) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimInPlaceConfigurationSource.AllInstances.DebugGet">
            <summary>设置 InPlaceConfigurationSource.get_Debug() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimInPlaceConfigurationSource.AllInstances.DefaultFlushTypeGet">
            <summary>设置 InPlaceConfigurationSource.get_DefaultFlushType() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimInPlaceConfigurationSource.AllInstances.DefaultFlushTypeSetDefaultFlushType">
            <summary>设置 InPlaceConfigurationSource.set_DefaultFlushType(DefaultFlushType value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimInPlaceConfigurationSource.AllInstances.GetConfigurationType">
            <summary>设置 InPlaceConfigurationSource.GetConfiguration(Type type) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimInPlaceConfigurationSource.AllInstances.IsLazyByDefaultGet">
            <summary>设置 InPlaceConfigurationSource.get_IsLazyByDefault() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimInPlaceConfigurationSource.AllInstances.IsRunningInWebAppSetBoolean">
            <summary>设置 InPlaceConfigurationSource.set_IsRunningInWebApp(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimInPlaceConfigurationSource.AllInstances.NamingStrategyImplementationGet">
            <summary>设置 InPlaceConfigurationSource.get_NamingStrategyImplementation() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimInPlaceConfigurationSource.AllInstances.NamingStrategyImplementationSetType">
            <summary>设置 InPlaceConfigurationSource.set_NamingStrategyImplementation(Type value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimInPlaceConfigurationSource.AllInstances.PluralizeTableNamesGet">
            <summary>设置 InPlaceConfigurationSource.get_PluralizeTableNames() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimInPlaceConfigurationSource.AllInstances.PluralizeTableNamesSetBoolean">
            <summary>设置 InPlaceConfigurationSource.set_PluralizeTableNames(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimInPlaceConfigurationSource.AllInstances.SearchableGet">
            <summary>设置 InPlaceConfigurationSource.get_Searchable() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimInPlaceConfigurationSource.AllInstances.SearchableSetBoolean">
            <summary>设置 InPlaceConfigurationSource.set_Searchable(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimInPlaceConfigurationSource.AllInstances.SessionFactoryHolderImplementationGet">
            <summary>设置 InPlaceConfigurationSource.get_SessionFactoryHolderImplementation() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimInPlaceConfigurationSource.AllInstances.SessionFactoryHolderImplementationSetType">
            <summary>设置 InPlaceConfigurationSource.set_SessionFactoryHolderImplementation(Type value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimInPlaceConfigurationSource.AllInstances.SetDebugFlagBoolean">
            <summary>设置 InPlaceConfigurationSource.SetDebugFlag(Boolean isDebug) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimInPlaceConfigurationSource.AllInstances.SetDefaultFlushTypeDefaultFlushType">
            <summary>设置 InPlaceConfigurationSource.SetDefaultFlushType(DefaultFlushType flushType) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimInPlaceConfigurationSource.AllInstances.SetDefaultFlushTypeString">
            <summary>设置 InPlaceConfigurationSource.SetDefaultFlushType(String configurationValue) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimInPlaceConfigurationSource.AllInstances.SetIsLazyByDefaultBoolean">
            <summary>设置 InPlaceConfigurationSource.SetIsLazyByDefault(Boolean lazyByDefault) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimInPlaceConfigurationSource.AllInstances.SetPluralizeTableNamesBoolean">
            <summary>设置 InPlaceConfigurationSource.SetPluralizeTableNames(Boolean pluralize) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimInPlaceConfigurationSource.AllInstances.SetUpNamingStrategyTypeString">
            <summary>设置 InPlaceConfigurationSource.SetUpNamingStrategyType(String customType) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimInPlaceConfigurationSource.AllInstances.SetUpSessionFactoryHolderTypeString">
            <summary>设置 InPlaceConfigurationSource.SetUpSessionFactoryHolderType(String customType) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimInPlaceConfigurationSource.AllInstances.SetUpThreadInfoTypeBooleanString">
            <summary>设置 InPlaceConfigurationSource.SetUpThreadInfoType(Boolean isWeb, String customType) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimInPlaceConfigurationSource.AllInstances.SetVerifyModelsAgainstDBSchemaBoolean">
            <summary>设置 InPlaceConfigurationSource.SetVerifyModelsAgainstDBSchema(Boolean verifyModelsAgainstDBSchema) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimInPlaceConfigurationSource.AllInstances.ThreadScopeInfoImplementationGet">
            <summary>设置 InPlaceConfigurationSource.get_ThreadScopeInfoImplementation() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimInPlaceConfigurationSource.AllInstances.ThreadScopeInfoImplementationSetType">
            <summary>设置 InPlaceConfigurationSource.set_ThreadScopeInfoImplementation(Type value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimInPlaceConfigurationSource.AllInstances.VerifyModelsAgainstDBSchemaGet">
            <summary>设置 InPlaceConfigurationSource.get_VerifyModelsAgainstDBSchema() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimInPlaceConfigurationSource.AllInstances.VerifyModelsAgainstDBSchemaSetBoolean">
            <summary>设置 InPlaceConfigurationSource.set_VerifyModelsAgainstDBSchema(Boolean value) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Config.Fakes.ShimMsSqlServer2000Configuration">
            <summary>Castle.ActiveRecord.Framework.Config.MsSqlServer2000Configuration 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.ShimMsSqlServer2000Configuration.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.ShimMsSqlServer2000Configuration.#ctor(Castle.ActiveRecord.Framework.Config.MsSqlServer2000Configuration)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.ShimMsSqlServer2000Configuration.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.ShimMsSqlServer2000Configuration.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.ShimMsSqlServer2000Configuration.Bind(Castle.ActiveRecord.Framework.Config.IDatabaseConfiguration)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimMsSqlServer2000Configuration.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimMsSqlServer2000Configuration.Constructor">
            <summary>设置 MsSqlServer2000Configuration.MsSqlServer2000Configuration() 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Config.Fakes.ShimMsSqlServer2000Configuration.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Config.Fakes.ShimMsSqlServer2005Configuration">
            <summary>Castle.ActiveRecord.Framework.Config.MsSqlServer2005Configuration 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.ShimMsSqlServer2005Configuration.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.ShimMsSqlServer2005Configuration.#ctor(Castle.ActiveRecord.Framework.Config.MsSqlServer2005Configuration)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.ShimMsSqlServer2005Configuration.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.ShimMsSqlServer2005Configuration.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.ShimMsSqlServer2005Configuration.Bind(Castle.ActiveRecord.Framework.Config.IDatabaseConfiguration)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimMsSqlServer2005Configuration.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimMsSqlServer2005Configuration.Constructor">
            <summary>设置 MsSqlServer2005Configuration.MsSqlServer2005Configuration() 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Config.Fakes.ShimMsSqlServer2005Configuration.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Config.Fakes.ShimStorageTypeSelection">
            <summary>Castle.ActiveRecord.Framework.Config.StorageTypeSelection 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.ShimStorageTypeSelection.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.ShimStorageTypeSelection.#ctor(Castle.ActiveRecord.Framework.Config.StorageTypeSelection)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.ShimStorageTypeSelection.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.ShimStorageTypeSelection.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimStorageTypeSelection.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimStorageTypeSelection.Constructor">
            <summary>设置 StorageTypeSelection.StorageTypeSelection() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimStorageTypeSelection.DefaultGet">
            <summary>设置 StorageTypeSelection.get_Default() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimStorageTypeSelection.DefaultSetBoolean">
            <summary>设置 StorageTypeSelection.set_Default(Boolean value) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Config.Fakes.ShimStorageTypeSelection.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimStorageTypeSelection.AllInstances.DefaultGet">
            <summary>设置 StorageTypeSelection.get_Default() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimStorageTypeSelection.AllInstances.DefaultSetBoolean">
            <summary>设置 StorageTypeSelection.set_Default(Boolean value) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Config.Fakes.ShimXmlConfigurationSource">
            <summary>Castle.ActiveRecord.Framework.Config.XmlConfigurationSource 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.ShimXmlConfigurationSource.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.ShimXmlConfigurationSource.#ctor(Castle.ActiveRecord.Framework.Config.XmlConfigurationSource)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.ShimXmlConfigurationSource.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.ShimXmlConfigurationSource.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.ShimXmlConfigurationSource.Bind(Castle.ActiveRecord.Framework.IConfigurationSource)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimXmlConfigurationSource.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimXmlConfigurationSource.BuildPropertiesXmlNodeIDictionaryOfStringString">
            <summary>设置 XmlConfigurationSource.BuildProperties(XmlNode node, IDictionary`2&lt;String,String&gt; defaults) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimXmlConfigurationSource.Constructor">
            <summary>设置 XmlConfigurationSource.XmlConfigurationSource() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimXmlConfigurationSource.ConstructorStream">
            <summary>设置 XmlConfigurationSource.XmlConfigurationSource(Stream stream) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimXmlConfigurationSource.ConstructorString">
            <summary>设置 XmlConfigurationSource.XmlConfigurationSource(String xmlFileName) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimXmlConfigurationSource.ConstructorTextReader">
            <summary>设置 XmlConfigurationSource.XmlConfigurationSource(TextReader reader) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimXmlConfigurationSource.ConvertBoolXmlNode">
            <summary>设置 XmlConfigurationSource.ConvertBool(XmlNode boolAttrib) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimXmlConfigurationSource.PopulateConfigNodesXmlNode">
            <summary>设置 XmlConfigurationSource.PopulateConfigNodes(XmlNode section) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimXmlConfigurationSource.PopulateSourceXmlNode">
            <summary>设置 XmlConfigurationSource.PopulateSource(XmlNode section) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimXmlConfigurationSource.SetDefaultsStringString">
            <summary>设置 XmlConfigurationSource.SetDefaults(String name, String connectionStringName) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Config.Fakes.ShimXmlConfigurationSource.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimXmlConfigurationSource.AllInstances.BuildPropertiesXmlNodeIDictionaryOfStringString">
            <summary>设置 XmlConfigurationSource.BuildProperties(XmlNode node, IDictionary`2&lt;String,String&gt; defaults) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimXmlConfigurationSource.AllInstances.PopulateConfigNodesXmlNode">
            <summary>设置 XmlConfigurationSource.PopulateConfigNodes(XmlNode section) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimXmlConfigurationSource.AllInstances.PopulateSourceXmlNode">
            <summary>设置 XmlConfigurationSource.PopulateSource(XmlNode section) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimXmlConfigurationSource.AllInstances.SetDefaultsStringString">
            <summary>设置 XmlConfigurationSource.SetDefaults(String name, String connectionStringName) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Config.Fakes.ShimXmlNhibernateMapping">
            <summary>Castle.ActiveRecord.Framework.Config.XmlNhibernateMapping 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.ShimXmlNhibernateMapping.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.ShimXmlNhibernateMapping.#ctor(Castle.ActiveRecord.Framework.Config.XmlNhibernateMapping)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.ShimXmlNhibernateMapping.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.ShimXmlNhibernateMapping.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.ShimXmlNhibernateMapping.Bind(Castle.ActiveRecord.Framework.Config.IMappingSpecification)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.ShimXmlNhibernateMapping.InAssemblyOfOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.ActiveRecord.Framework.Config.XmlNhibernateMapping})">
            <summary>设置 XmlNhibernateMapping.InAssemblyOf() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimXmlNhibernateMapping.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.ShimXmlNhibernateMapping.Constructor">
            <summary>设置 XmlNhibernateMapping.XmlNhibernateMapping() 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Config.Fakes.ShimXmlNhibernateMapping.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.ShimXmlNhibernateMapping.AllInstances.InAssemblyOfOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.ActiveRecord.Framework.Config.XmlNhibernateMapping,Castle.ActiveRecord.Framework.Config.XmlNhibernateMapping})">
            <summary>设置 XmlNhibernateMapping.InAssemblyOf() 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Config.Fakes.StubActiveRecordSectionHandler">
            <summary>Castle.ActiveRecord.Framework.Config.ActiveRecordSectionHandler 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.StubActiveRecordSectionHandler.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.StubActiveRecordSectionHandler.AttachBackingFieldToSearchable">
            <summary>附加委托以将 StubActiveRecordSectionHandler.Searchable 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.StubActiveRecordSectionHandler.InitializeStub">
            <summary>初始化 type StubActiveRecordSectionHandler 的新实例</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Config.Fakes.StubActiveRecordSectionHandler.SearchableGet">
            <summary>设置 InPlaceConfigurationSource.get_Searchable() 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Config.Fakes.StubActiveRecordSectionHandler.SearchableSetBoolean">
            <summary>设置 InPlaceConfigurationSource.set_Searchable(Boolean value) 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.StubActiveRecordSectionHandler.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.StubActiveRecordSectionHandler.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.StubActiveRecordSectionHandler.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.StubActiveRecordSectionHandler.Searchable">
            <summary>设置 InPlaceConfigurationSource.get_Searchable() 的 stub</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Config.Fakes.StubDefaultActiveRecordConfiguration">
            <summary>Castle.ActiveRecord.Framework.Config.DefaultActiveRecordConfiguration 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.StubDefaultActiveRecordConfiguration.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.StubDefaultActiveRecordConfiguration.AttachBackingFieldToDefaultFlushType">
            <summary>附加委托以将 StubDefaultActiveRecordConfiguration.DefaultFlushType 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.StubDefaultActiveRecordConfiguration.AttachBackingFieldToLazy">
            <summary>附加委托以将 StubDefaultActiveRecordConfiguration.Lazy 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.StubDefaultActiveRecordConfiguration.AttachBackingFieldToSearchable">
            <summary>附加委托以将 StubDefaultActiveRecordConfiguration.Searchable 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.StubDefaultActiveRecordConfiguration.AttachBackingFieldToSessionfactoryHolderImplementation">
            <summary>附加委托以将 StubDefaultActiveRecordConfiguration.SessionfactoryHolderImplementation 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.StubDefaultActiveRecordConfiguration.AttachBackingFieldToThreadScopeInfoImplementation">
            <summary>附加委托以将 StubDefaultActiveRecordConfiguration.ThreadScopeInfoImplementation 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.StubDefaultActiveRecordConfiguration.AttachBackingFieldToVerification">
            <summary>附加委托以将 StubDefaultActiveRecordConfiguration.Verification 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.StubDefaultActiveRecordConfiguration.AttachBackingFieldToWebEnabled">
            <summary>附加委托以将 StubDefaultActiveRecordConfiguration.WebEnabled 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Config.Fakes.StubDefaultActiveRecordConfiguration.DefaultFlushTypeGet">
            <summary>设置 DefaultActiveRecordConfiguration.get_DefaultFlushType() 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Config.Fakes.StubDefaultActiveRecordConfiguration.DefaultFlushTypeSetDefaultFlushType">
            <summary>设置 DefaultActiveRecordConfiguration.set_DefaultFlushType(DefaultFlushType value) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.StubDefaultActiveRecordConfiguration.InitializeStub">
            <summary>初始化 type StubDefaultActiveRecordConfiguration 的新实例</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Config.Fakes.StubDefaultActiveRecordConfiguration.LazyGet">
            <summary>设置 DefaultActiveRecordConfiguration.get_Lazy() 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Config.Fakes.StubDefaultActiveRecordConfiguration.LazySetBoolean">
            <summary>设置 DefaultActiveRecordConfiguration.set_Lazy(Boolean value) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Config.Fakes.StubDefaultActiveRecordConfiguration.SearchableGet">
            <summary>设置 DefaultActiveRecordConfiguration.get_Searchable() 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Config.Fakes.StubDefaultActiveRecordConfiguration.SearchableSetBoolean">
            <summary>设置 DefaultActiveRecordConfiguration.set_Searchable(Boolean value) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Config.Fakes.StubDefaultActiveRecordConfiguration.SessionfactoryHolderImplementationGet">
            <summary>设置 DefaultActiveRecordConfiguration.get_SessionfactoryHolderImplementation() 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Config.Fakes.StubDefaultActiveRecordConfiguration.SessionfactoryHolderImplementationSetType">
            <summary>设置 DefaultActiveRecordConfiguration.set_SessionfactoryHolderImplementation(Type value) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Config.Fakes.StubDefaultActiveRecordConfiguration.ThreadScopeInfoImplementationGet">
            <summary>设置 DefaultActiveRecordConfiguration.get_ThreadScopeInfoImplementation() 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Config.Fakes.StubDefaultActiveRecordConfiguration.ThreadScopeInfoImplementationSetType">
            <summary>设置 DefaultActiveRecordConfiguration.set_ThreadScopeInfoImplementation(Type value) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Config.Fakes.StubDefaultActiveRecordConfiguration.VerificationGet">
            <summary>设置 DefaultActiveRecordConfiguration.get_Verification() 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Config.Fakes.StubDefaultActiveRecordConfiguration.VerificationSetBoolean">
            <summary>设置 DefaultActiveRecordConfiguration.set_Verification(Boolean value) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Config.Fakes.StubDefaultActiveRecordConfiguration.WebEnabledGet">
            <summary>设置 DefaultActiveRecordConfiguration.get_WebEnabled() 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Config.Fakes.StubDefaultActiveRecordConfiguration.WebEnabledSetBoolean">
            <summary>设置 DefaultActiveRecordConfiguration.set_WebEnabled(Boolean value) 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.StubDefaultActiveRecordConfiguration.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.StubDefaultActiveRecordConfiguration.DefaultFlushType">
            <summary>设置 DefaultActiveRecordConfiguration.get_DefaultFlushType() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.StubDefaultActiveRecordConfiguration.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.StubDefaultActiveRecordConfiguration.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.StubDefaultActiveRecordConfiguration.Lazy">
            <summary>设置 DefaultActiveRecordConfiguration.get_Lazy() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.StubDefaultActiveRecordConfiguration.Searchable">
            <summary>设置 DefaultActiveRecordConfiguration.get_Searchable() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.StubDefaultActiveRecordConfiguration.SessionfactoryHolderImplementation">
            <summary>设置 DefaultActiveRecordConfiguration.get_SessionfactoryHolderImplementation() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.StubDefaultActiveRecordConfiguration.ThreadScopeInfoImplementation">
            <summary>设置 DefaultActiveRecordConfiguration.get_ThreadScopeInfoImplementation() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.StubDefaultActiveRecordConfiguration.Verification">
            <summary>设置 DefaultActiveRecordConfiguration.get_Verification() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.StubDefaultActiveRecordConfiguration.WebEnabled">
            <summary>设置 DefaultActiveRecordConfiguration.get_WebEnabled() 的 stub</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Config.Fakes.StubDefaultDatabaseConfiguration">
            <summary>Castle.ActiveRecord.Framework.Config.DefaultDatabaseConfiguration 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.StubDefaultDatabaseConfiguration.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.StubDefaultDatabaseConfiguration.InitializeStub">
            <summary>初始化 type StubDefaultDatabaseConfiguration 的新实例</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.StubDefaultDatabaseConfiguration.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.StubDefaultDatabaseConfiguration.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.StubDefaultDatabaseConfiguration.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Config.Fakes.StubDefaultStorageConfiguration">
            <summary>Castle.ActiveRecord.Framework.Config.DefaultStorageConfiguration 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.StubDefaultStorageConfiguration.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.StubDefaultStorageConfiguration.InitializeStub">
            <summary>初始化 type StubDefaultStorageConfiguration 的新实例</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.StubDefaultStorageConfiguration.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.StubDefaultStorageConfiguration.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.StubDefaultStorageConfiguration.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Config.Fakes.StubFluentActiveRecordConfiguration">
            <summary>Castle.ActiveRecord.Framework.Config.FluentActiveRecordConfiguration 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.StubFluentActiveRecordConfiguration.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.StubFluentActiveRecordConfiguration.AttachBackingFieldToDefaultFlushType">
            <summary>附加委托以将 StubFluentActiveRecordConfiguration.DefaultFlushType 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.StubFluentActiveRecordConfiguration.AttachBackingFieldToLazy">
            <summary>附加委托以将 StubFluentActiveRecordConfiguration.Lazy 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.StubFluentActiveRecordConfiguration.AttachBackingFieldToSearchable">
            <summary>附加委托以将 StubFluentActiveRecordConfiguration.Searchable 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.StubFluentActiveRecordConfiguration.AttachBackingFieldToSessionfactoryHolderImplementation">
            <summary>附加委托以将 StubFluentActiveRecordConfiguration.SessionfactoryHolderImplementation 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.StubFluentActiveRecordConfiguration.AttachBackingFieldToThreadScopeInfoImplementation">
            <summary>附加委托以将 StubFluentActiveRecordConfiguration.ThreadScopeInfoImplementation 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.StubFluentActiveRecordConfiguration.AttachBackingFieldToVerification">
            <summary>附加委托以将 StubFluentActiveRecordConfiguration.Verification 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.StubFluentActiveRecordConfiguration.AttachBackingFieldToWebEnabled">
            <summary>附加委托以将 StubFluentActiveRecordConfiguration.WebEnabled 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Config.Fakes.StubFluentActiveRecordConfiguration.DefaultFlushTypeGet">
            <summary>设置 DefaultActiveRecordConfiguration.get_DefaultFlushType() 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Config.Fakes.StubFluentActiveRecordConfiguration.DefaultFlushTypeSetDefaultFlushType">
            <summary>设置 DefaultActiveRecordConfiguration.set_DefaultFlushType(DefaultFlushType value) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.StubFluentActiveRecordConfiguration.InitializeStub">
            <summary>初始化 type StubFluentActiveRecordConfiguration 的新实例</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Config.Fakes.StubFluentActiveRecordConfiguration.LazyGet">
            <summary>设置 DefaultActiveRecordConfiguration.get_Lazy() 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Config.Fakes.StubFluentActiveRecordConfiguration.LazySetBoolean">
            <summary>设置 DefaultActiveRecordConfiguration.set_Lazy(Boolean value) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Config.Fakes.StubFluentActiveRecordConfiguration.SearchableGet">
            <summary>设置 DefaultActiveRecordConfiguration.get_Searchable() 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Config.Fakes.StubFluentActiveRecordConfiguration.SearchableSetBoolean">
            <summary>设置 DefaultActiveRecordConfiguration.set_Searchable(Boolean value) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Config.Fakes.StubFluentActiveRecordConfiguration.SessionfactoryHolderImplementationGet">
            <summary>设置 DefaultActiveRecordConfiguration.get_SessionfactoryHolderImplementation() 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Config.Fakes.StubFluentActiveRecordConfiguration.SessionfactoryHolderImplementationSetType">
            <summary>设置 DefaultActiveRecordConfiguration.set_SessionfactoryHolderImplementation(Type value) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Config.Fakes.StubFluentActiveRecordConfiguration.ThreadScopeInfoImplementationGet">
            <summary>设置 DefaultActiveRecordConfiguration.get_ThreadScopeInfoImplementation() 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Config.Fakes.StubFluentActiveRecordConfiguration.ThreadScopeInfoImplementationSetType">
            <summary>设置 DefaultActiveRecordConfiguration.set_ThreadScopeInfoImplementation(Type value) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Config.Fakes.StubFluentActiveRecordConfiguration.VerificationGet">
            <summary>设置 DefaultActiveRecordConfiguration.get_Verification() 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Config.Fakes.StubFluentActiveRecordConfiguration.VerificationSetBoolean">
            <summary>设置 DefaultActiveRecordConfiguration.set_Verification(Boolean value) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Config.Fakes.StubFluentActiveRecordConfiguration.WebEnabledGet">
            <summary>设置 DefaultActiveRecordConfiguration.get_WebEnabled() 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Config.Fakes.StubFluentActiveRecordConfiguration.WebEnabledSetBoolean">
            <summary>设置 DefaultActiveRecordConfiguration.set_WebEnabled(Boolean value) 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.StubFluentActiveRecordConfiguration.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.StubFluentActiveRecordConfiguration.DefaultFlushType">
            <summary>设置 DefaultActiveRecordConfiguration.get_DefaultFlushType() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.StubFluentActiveRecordConfiguration.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.StubFluentActiveRecordConfiguration.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.StubFluentActiveRecordConfiguration.Lazy">
            <summary>设置 DefaultActiveRecordConfiguration.get_Lazy() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.StubFluentActiveRecordConfiguration.Searchable">
            <summary>设置 DefaultActiveRecordConfiguration.get_Searchable() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.StubFluentActiveRecordConfiguration.SessionfactoryHolderImplementation">
            <summary>设置 DefaultActiveRecordConfiguration.get_SessionfactoryHolderImplementation() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.StubFluentActiveRecordConfiguration.ThreadScopeInfoImplementation">
            <summary>设置 DefaultActiveRecordConfiguration.get_ThreadScopeInfoImplementation() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.StubFluentActiveRecordConfiguration.Verification">
            <summary>设置 DefaultActiveRecordConfiguration.get_Verification() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.StubFluentActiveRecordConfiguration.WebEnabled">
            <summary>设置 DefaultActiveRecordConfiguration.get_WebEnabled() 的 stub</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Config.Fakes.StubFluentNHibernateMapping">
            <summary>Castle.ActiveRecord.Framework.Config.FluentNHibernateMapping 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.StubFluentNHibernateMapping.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.StubFluentNHibernateMapping.InitializeStub">
            <summary>初始化 type StubFluentNHibernateMapping 的新实例</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.StubFluentNHibernateMapping.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.StubFluentNHibernateMapping.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.StubFluentNHibernateMapping.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Config.Fakes.StubFluentStorageConfiguration">
            <summary>Castle.ActiveRecord.Framework.Config.FluentStorageConfiguration 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.StubFluentStorageConfiguration.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.StubFluentStorageConfiguration.InitializeStub">
            <summary>初始化 type StubFluentStorageConfiguration 的新实例</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.StubFluentStorageConfiguration.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.StubFluentStorageConfiguration.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.StubFluentStorageConfiguration.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Config.Fakes.StubFluentStorageTypeSelection">
            <summary>Castle.ActiveRecord.Framework.Config.FluentStorageTypeSelection 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.StubFluentStorageTypeSelection.#ctor(Castle.ActiveRecord.Framework.Config.FluentStorageConfiguration)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.StubFluentStorageTypeSelection.AttachBackingFieldToDefault">
            <summary>附加委托以将 StubFluentStorageTypeSelection.Default 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Config.Fakes.StubFluentStorageTypeSelection.DefaultGet">
            <summary>设置 StorageTypeSelection.get_Default() 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Config.Fakes.StubFluentStorageTypeSelection.DefaultSetBoolean">
            <summary>设置 StorageTypeSelection.set_Default(Boolean value) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.StubFluentStorageTypeSelection.InitializeStub">
            <summary>初始化 type StubFluentStorageTypeSelection 的新实例</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.StubFluentStorageTypeSelection.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.StubFluentStorageTypeSelection.Default">
            <summary>设置 StorageTypeSelection.get_Default() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.StubFluentStorageTypeSelection.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.StubFluentStorageTypeSelection.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Config.Fakes.StubIActiveRecordConfiguration">
            <summary>Castle.ActiveRecord.Framework.Config.IActiveRecordConfiguration 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.StubIActiveRecordConfiguration.#ctor">
            <summary>初始化 type StubIActiveRecordConfiguration 的新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.StubIActiveRecordConfiguration.AttachBackingFieldToDefaultFlushType">
            <summary>附加委托以将 StubIActiveRecordConfiguration.DefaultFlushType 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.StubIActiveRecordConfiguration.AttachBackingFieldToLazy">
            <summary>附加委托以将 StubIActiveRecordConfiguration.Lazy 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.StubIActiveRecordConfiguration.AttachBackingFieldToSearchable">
            <summary>附加委托以将 StubIActiveRecordConfiguration.Searchable 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.StubIActiveRecordConfiguration.AttachBackingFieldToSessionfactoryHolderImplementation">
            <summary>附加委托以将 StubIActiveRecordConfiguration.SessionfactoryHolderImplementation 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.StubIActiveRecordConfiguration.AttachBackingFieldToThreadScopeInfoImplementation">
            <summary>附加委托以将 StubIActiveRecordConfiguration.ThreadScopeInfoImplementation 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.StubIActiveRecordConfiguration.AttachBackingFieldToVerification">
            <summary>附加委托以将 StubIActiveRecordConfiguration.Verification 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.StubIActiveRecordConfiguration.AttachBackingFieldToWebEnabled">
            <summary>附加委托以将 StubIActiveRecordConfiguration.WebEnabled 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Config.Fakes.StubIActiveRecordConfiguration.DefaultFlushTypeGet">
            <summary>设置 IActiveRecordConfiguration.get_DefaultFlushType() 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Config.Fakes.StubIActiveRecordConfiguration.DefaultFlushTypeSetDefaultFlushType">
            <summary>设置 IActiveRecordConfiguration.set_DefaultFlushType(DefaultFlushType value) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Config.Fakes.StubIActiveRecordConfiguration.LazyGet">
            <summary>设置 IActiveRecordConfiguration.get_Lazy() 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Config.Fakes.StubIActiveRecordConfiguration.LazySetBoolean">
            <summary>设置 IActiveRecordConfiguration.set_Lazy(Boolean value) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Config.Fakes.StubIActiveRecordConfiguration.SearchableGet">
            <summary>设置 IActiveRecordConfiguration.get_Searchable() 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Config.Fakes.StubIActiveRecordConfiguration.SearchableSetBoolean">
            <summary>设置 IActiveRecordConfiguration.set_Searchable(Boolean value) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Config.Fakes.StubIActiveRecordConfiguration.SessionfactoryHolderImplementationGet">
            <summary>设置 IActiveRecordConfiguration.get_SessionfactoryHolderImplementation() 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Config.Fakes.StubIActiveRecordConfiguration.SessionfactoryHolderImplementationSetType">
            <summary>设置 IActiveRecordConfiguration.set_SessionfactoryHolderImplementation(Type value) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Config.Fakes.StubIActiveRecordConfiguration.ThreadScopeInfoImplementationGet">
            <summary>设置 IActiveRecordConfiguration.get_ThreadScopeInfoImplementation() 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Config.Fakes.StubIActiveRecordConfiguration.ThreadScopeInfoImplementationSetType">
            <summary>设置 IActiveRecordConfiguration.set_ThreadScopeInfoImplementation(Type value) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Config.Fakes.StubIActiveRecordConfiguration.VerificationGet">
            <summary>设置 IActiveRecordConfiguration.get_Verification() 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Config.Fakes.StubIActiveRecordConfiguration.VerificationSetBoolean">
            <summary>设置 IActiveRecordConfiguration.set_Verification(Boolean value) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Config.Fakes.StubIActiveRecordConfiguration.WebEnabledGet">
            <summary>设置 IActiveRecordConfiguration.get_WebEnabled() 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Config.Fakes.StubIActiveRecordConfiguration.WebEnabledSetBoolean">
            <summary>设置 IActiveRecordConfiguration.set_WebEnabled(Boolean value) 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.StubIActiveRecordConfiguration.car::Castle#ActiveRecord#Framework#Config#IActiveRecordConfiguration#DefaultFlushType">
            <summary>设置 IActiveRecordConfiguration.get_DefaultFlushType() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.StubIActiveRecordConfiguration.car::Castle#ActiveRecord#Framework#Config#IActiveRecordConfiguration#Lazy">
            <summary>设置 IActiveRecordConfiguration.get_Lazy() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.StubIActiveRecordConfiguration.car::Castle#ActiveRecord#Framework#Config#IActiveRecordConfiguration#Searchable">
            <summary>设置 IActiveRecordConfiguration.get_Searchable() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.StubIActiveRecordConfiguration.car::Castle#ActiveRecord#Framework#Config#IActiveRecordConfiguration#SessionfactoryHolderImplementation">
            <summary>设置 IActiveRecordConfiguration.get_SessionfactoryHolderImplementation() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.StubIActiveRecordConfiguration.car::Castle#ActiveRecord#Framework#Config#IActiveRecordConfiguration#ThreadScopeInfoImplementation">
            <summary>设置 IActiveRecordConfiguration.get_ThreadScopeInfoImplementation() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.StubIActiveRecordConfiguration.car::Castle#ActiveRecord#Framework#Config#IActiveRecordConfiguration#Verification">
            <summary>设置 IActiveRecordConfiguration.get_Verification() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.StubIActiveRecordConfiguration.car::Castle#ActiveRecord#Framework#Config#IActiveRecordConfiguration#WebEnabled">
            <summary>设置 IActiveRecordConfiguration.get_WebEnabled() 的 stub</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Config.Fakes.StubIDatabaseConfiguration">
            <summary>Castle.ActiveRecord.Framework.Config.IDatabaseConfiguration 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.StubIDatabaseConfiguration.#ctor">
            <summary>初始化 type StubIDatabaseConfiguration 的新实例</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Config.Fakes.StubIMappingSpecification">
            <summary>Castle.ActiveRecord.Framework.Config.IMappingSpecification 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.StubIMappingSpecification.#ctor">
            <summary>初始化 type StubIMappingSpecification 的新实例</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Config.Fakes.StubIStorageConfiguration">
            <summary>Castle.ActiveRecord.Framework.Config.IStorageConfiguration 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.StubIStorageConfiguration.#ctor">
            <summary>初始化 type StubIStorageConfiguration 的新实例</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Config.Fakes.StubIStorageConfiguration.ConfigurationValuesGet">
            <summary>设置 IStorageConfiguration.get_ConfigurationValues() 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Config.Fakes.StubIStorageConfiguration.TypeSelectionsGet">
            <summary>设置 IStorageConfiguration.get_TypeSelections() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.StubIStorageConfiguration.car::Castle#ActiveRecord#Framework#Config#IStorageConfiguration#ConfigurationValues">
            <summary>设置 IStorageConfiguration.get_ConfigurationValues() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.StubIStorageConfiguration.car::Castle#ActiveRecord#Framework#Config#IStorageConfiguration#TypeSelections">
            <summary>设置 IStorageConfiguration.get_TypeSelections() 的 stub</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Config.Fakes.StubInPlaceConfigurationSource">
            <summary>Castle.ActiveRecord.Framework.Config.InPlaceConfigurationSource 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.StubInPlaceConfigurationSource.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.StubInPlaceConfigurationSource.AttachBackingFieldToSearchable">
            <summary>附加委托以将 StubInPlaceConfigurationSource.Searchable 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.StubInPlaceConfigurationSource.InitializeStub">
            <summary>初始化 type StubInPlaceConfigurationSource 的新实例</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Config.Fakes.StubInPlaceConfigurationSource.SearchableGet">
            <summary>设置 InPlaceConfigurationSource.get_Searchable() 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Config.Fakes.StubInPlaceConfigurationSource.SearchableSetBoolean">
            <summary>设置 InPlaceConfigurationSource.set_Searchable(Boolean value) 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.StubInPlaceConfigurationSource.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.StubInPlaceConfigurationSource.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.StubInPlaceConfigurationSource.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.StubInPlaceConfigurationSource.Searchable">
            <summary>设置 InPlaceConfigurationSource.get_Searchable() 的 stub</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Config.Fakes.StubMsSqlServer2000Configuration">
            <summary>Castle.ActiveRecord.Framework.Config.MsSqlServer2000Configuration 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.StubMsSqlServer2000Configuration.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.StubMsSqlServer2000Configuration.InitializeStub">
            <summary>初始化 type StubMsSqlServer2000Configuration 的新实例</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.StubMsSqlServer2000Configuration.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.StubMsSqlServer2000Configuration.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.StubMsSqlServer2000Configuration.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Config.Fakes.StubMsSqlServer2005Configuration">
            <summary>Castle.ActiveRecord.Framework.Config.MsSqlServer2005Configuration 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.StubMsSqlServer2005Configuration.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.StubMsSqlServer2005Configuration.InitializeStub">
            <summary>初始化 type StubMsSqlServer2005Configuration 的新实例</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.StubMsSqlServer2005Configuration.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.StubMsSqlServer2005Configuration.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.StubMsSqlServer2005Configuration.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Config.Fakes.StubStorageTypeSelection">
            <summary>Castle.ActiveRecord.Framework.Config.StorageTypeSelection 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.StubStorageTypeSelection.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.StubStorageTypeSelection.AttachBackingFieldToDefault">
            <summary>附加委托以将 StubStorageTypeSelection.Default 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Config.Fakes.StubStorageTypeSelection.DefaultGet">
            <summary>设置 StorageTypeSelection.get_Default() 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Config.Fakes.StubStorageTypeSelection.DefaultSetBoolean">
            <summary>设置 StorageTypeSelection.set_Default(Boolean value) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.StubStorageTypeSelection.InitializeStub">
            <summary>初始化 type StubStorageTypeSelection 的新实例</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.StubStorageTypeSelection.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.StubStorageTypeSelection.Default">
            <summary>设置 StorageTypeSelection.get_Default() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.StubStorageTypeSelection.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.StubStorageTypeSelection.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Config.Fakes.StubXmlConfigurationSource">
            <summary>Castle.ActiveRecord.Framework.Config.XmlConfigurationSource 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.StubXmlConfigurationSource.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.StubXmlConfigurationSource.#ctor(System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.StubXmlConfigurationSource.#ctor(System.IO.Stream)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.StubXmlConfigurationSource.#ctor(System.IO.TextReader)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.StubXmlConfigurationSource.AttachBackingFieldToSearchable">
            <summary>附加委托以将 StubXmlConfigurationSource.Searchable 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.StubXmlConfigurationSource.InitializeStub">
            <summary>初始化 type StubXmlConfigurationSource 的新实例</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Config.Fakes.StubXmlConfigurationSource.SearchableGet">
            <summary>设置 InPlaceConfigurationSource.get_Searchable() 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Config.Fakes.StubXmlConfigurationSource.SearchableSetBoolean">
            <summary>设置 InPlaceConfigurationSource.set_Searchable(Boolean value) 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.StubXmlConfigurationSource.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.StubXmlConfigurationSource.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.StubXmlConfigurationSource.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.StubXmlConfigurationSource.Searchable">
            <summary>设置 InPlaceConfigurationSource.get_Searchable() 的 stub</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Config.Fakes.StubXmlNhibernateMapping">
            <summary>Castle.ActiveRecord.Framework.Config.XmlNhibernateMapping 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.StubXmlNhibernateMapping.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Config.Fakes.StubXmlNhibernateMapping.InitializeStub">
            <summary>初始化 type StubXmlNhibernateMapping 的新实例</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.StubXmlNhibernateMapping.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.StubXmlNhibernateMapping.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Config.Fakes.StubXmlNhibernateMapping.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Fakes.ShimAbstractNHContributor">
            <summary>Castle.ActiveRecord.Framework.AbstractNHContributor 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.ShimAbstractNHContributor.#ctor(Castle.ActiveRecord.Framework.AbstractNHContributor)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.ShimAbstractNHContributor.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.ShimAbstractNHContributor.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.ShimAbstractNHContributor.Bind(Castle.ActiveRecord.Framework.INHContributor)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimAbstractNHContributor.AppliesToRootTypeGet">
            <summary>设置 AbstractNHContributor.get_AppliesToRootType() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimAbstractNHContributor.AppliesToRootTypeSetPredicateOfType">
            <summary>设置 AbstractNHContributor.set_AppliesToRootType(Predicate`1&lt;Type&gt; value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimAbstractNHContributor.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimAbstractNHContributor.Constructor">
            <summary>设置 AbstractNHContributor.AbstractNHContributor() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimAbstractNHContributor._ctorb__0Type">
            <summary>设置 AbstractNHContributor.&lt;.ctor&gt;b__0(Type type) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Fakes.ShimAbstractNHContributor.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimAbstractNHContributor.AllInstances.AppliesToRootTypeGet">
            <summary>设置 AbstractNHContributor.get_AppliesToRootType() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimAbstractNHContributor.AllInstances.AppliesToRootTypeSetPredicateOfType">
            <summary>设置 AbstractNHContributor.set_AppliesToRootType(Predicate`1&lt;Type&gt; value) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Fakes.ShimActiveRecordException">
            <summary>Castle.ActiveRecord.Framework.ActiveRecordException 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.ShimActiveRecordException.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.ShimActiveRecordException.#ctor(Castle.ActiveRecord.Framework.ActiveRecordException)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.ShimActiveRecordException.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.ShimActiveRecordException.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.ShimActiveRecordException.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimActiveRecordException.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimActiveRecordException.ConstructorSerializationInfoStreamingContext">
            <summary>设置 ActiveRecordException.ActiveRecordException(SerializationInfo info, StreamingContext context) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimActiveRecordException.ConstructorString">
            <summary>设置 ActiveRecordException.ActiveRecordException(String message) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimActiveRecordException.ConstructorStringException">
            <summary>设置 ActiveRecordException.ActiveRecordException(String message, Exception innerException) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Fakes.ShimActiveRecordException.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Fakes.ShimActiveRecordInitializationException">
            <summary>Castle.ActiveRecord.Framework.ActiveRecordInitializationException 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.ShimActiveRecordInitializationException.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.ShimActiveRecordInitializationException.#ctor(Castle.ActiveRecord.Framework.ActiveRecordInitializationException)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.ShimActiveRecordInitializationException.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.ShimActiveRecordInitializationException.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.ShimActiveRecordInitializationException.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimActiveRecordInitializationException.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimActiveRecordInitializationException.ConstructorSerializationInfoStreamingContext">
            <summary>设置 ActiveRecordInitializationException.ActiveRecordInitializationException(SerializationInfo info, StreamingContext context) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimActiveRecordInitializationException.ConstructorString">
            <summary>设置 ActiveRecordInitializationException.ActiveRecordInitializationException(String message) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimActiveRecordInitializationException.ConstructorStringException">
            <summary>设置 ActiveRecordInitializationException.ActiveRecordInitializationException(String message, Exception innerException) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Fakes.ShimActiveRecordInitializationException.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Fakes.ShimActiveRecordLinq">
            <summary>Castle.ActiveRecord.Framework.ActiveRecordLinq 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.ShimActiveRecordLinq.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.ShimActiveRecordLinq.AsQueryableOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Linq.IOrderedQueryable{``0}})">
            <summary>设置 ActiveRecordLinq.AsQueryable() 的 填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.ShimActiveRecordLinq.AsQueryableOf1ISession``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{NHibernate.ISession,System.Linq.IOrderedQueryable{``0}})">
            <summary>设置 ActiveRecordLinq.AsQueryable(ISession session) 的 填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.ShimActiveRecordLinq.AsQueryableOf1ISessionScope``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.ActiveRecord.ISessionScope,System.Linq.IOrderedQueryable{``0}})">
            <summary>设置 ActiveRecordLinq.AsQueryable(ISessionScope scope) 的 填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.ShimActiveRecordLinq.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.ShimActiveRecordLinq.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimActiveRecordLinq.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Fakes.ShimActiveRecordLinqBase`1">
            <summary>Castle.ActiveRecord.Framework.ActiveRecordLinqBase`1 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.ShimActiveRecordLinqBase`1.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.ShimActiveRecordLinqBase`1.#ctor(Castle.ActiveRecord.Framework.ActiveRecordLinqBase{`0})">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.ShimActiveRecordLinqBase`1.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.ShimActiveRecordLinqBase`1.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimActiveRecordLinqBase`1.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimActiveRecordLinqBase`1.Constructor">
            <summary>设置 ActiveRecordLinqBase`1.ActiveRecordLinqBase`1() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimActiveRecordLinqBase`1.QueryableGet">
            <summary>设置 ActiveRecordLinqBase`1.get_Queryable() 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Fakes.ShimActiveRecordLinqBase`1.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Fakes.ShimDictionaryAdapter">
            <summary>Castle.ActiveRecord.Framework.DictionaryAdapter 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.ShimDictionaryAdapter.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.ShimDictionaryAdapter.#ctor(Castle.ActiveRecord.Framework.DictionaryAdapter)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.ShimDictionaryAdapter.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.ShimDictionaryAdapter.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.ShimDictionaryAdapter.Bind(System.Collections.ICollection)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.ShimDictionaryAdapter.Bind(System.Collections.IDictionary)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.ShimDictionaryAdapter.Bind(System.Collections.IEnumerable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimDictionaryAdapter.AddObjectObject">
            <summary>设置 DictionaryAdapter.Add(Object key, Object value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimDictionaryAdapter.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimDictionaryAdapter.CalculateHashString">
            <summary>设置 DictionaryAdapter.CalculateHash(String key) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimDictionaryAdapter.Clear">
            <summary>设置 DictionaryAdapter.Clear() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimDictionaryAdapter.ConstructorStringArrayObjectArray">
            <summary>设置 DictionaryAdapter.DictionaryAdapter(String[] names, Object[] values) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimDictionaryAdapter.ContainsObject">
            <summary>设置 DictionaryAdapter.Contains(Object key) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimDictionaryAdapter.CopyToArrayInt32">
            <summary>设置 DictionaryAdapter.CopyTo(Array array, Int32 index) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimDictionaryAdapter.CountGet">
            <summary>设置 DictionaryAdapter.get_Count() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimDictionaryAdapter.GetEnumerator">
            <summary>设置 DictionaryAdapter.GetEnumerator() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimDictionaryAdapter.GetValuesIndexByKeyObject">
            <summary>设置 DictionaryAdapter.GetValuesIndexByKey(Object key) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimDictionaryAdapter.InternalAddStringInt32">
            <summary>设置 DictionaryAdapter.InternalAdd(String key, Int32 index) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimDictionaryAdapter.IsFixedSizeGet">
            <summary>设置 DictionaryAdapter.get_IsFixedSize() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimDictionaryAdapter.IsReadOnlyGet">
            <summary>设置 DictionaryAdapter.get_IsReadOnly() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimDictionaryAdapter.IsSynchronizedGet">
            <summary>设置 DictionaryAdapter.get_IsSynchronized() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimDictionaryAdapter.ItemGetObject">
            <summary>设置 DictionaryAdapter.get_Item(Object key) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimDictionaryAdapter.ItemSetObjectObject">
            <summary>设置 DictionaryAdapter.set_Item(Object key, Object value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimDictionaryAdapter.KeysGet">
            <summary>设置 DictionaryAdapter.get_Keys() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimDictionaryAdapter.RemoveObject">
            <summary>设置 DictionaryAdapter.Remove(Object key) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimDictionaryAdapter.SyncRootGet">
            <summary>设置 DictionaryAdapter.get_SyncRoot() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimDictionaryAdapter.SystemCollectionsIDictionaryGetEnumerator">
            <summary>设置 DictionaryAdapter.System.Collections.IDictionary.GetEnumerator() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimDictionaryAdapter.ValuesGet">
            <summary>设置 DictionaryAdapter.get_Values() 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Fakes.ShimDictionaryAdapter.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimDictionaryAdapter.AllInstances.AddObjectObject">
            <summary>设置 DictionaryAdapter.Add(Object key, Object value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimDictionaryAdapter.AllInstances.CalculateHashString">
            <summary>设置 DictionaryAdapter.CalculateHash(String key) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimDictionaryAdapter.AllInstances.Clear">
            <summary>设置 DictionaryAdapter.Clear() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimDictionaryAdapter.AllInstances.ContainsObject">
            <summary>设置 DictionaryAdapter.Contains(Object key) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimDictionaryAdapter.AllInstances.CopyToArrayInt32">
            <summary>设置 DictionaryAdapter.CopyTo(Array array, Int32 index) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimDictionaryAdapter.AllInstances.CountGet">
            <summary>设置 DictionaryAdapter.get_Count() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimDictionaryAdapter.AllInstances.GetEnumerator">
            <summary>设置 DictionaryAdapter.GetEnumerator() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimDictionaryAdapter.AllInstances.GetValuesIndexByKeyObject">
            <summary>设置 DictionaryAdapter.GetValuesIndexByKey(Object key) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimDictionaryAdapter.AllInstances.InternalAddStringInt32">
            <summary>设置 DictionaryAdapter.InternalAdd(String key, Int32 index) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimDictionaryAdapter.AllInstances.IsFixedSizeGet">
            <summary>设置 DictionaryAdapter.get_IsFixedSize() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimDictionaryAdapter.AllInstances.IsReadOnlyGet">
            <summary>设置 DictionaryAdapter.get_IsReadOnly() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimDictionaryAdapter.AllInstances.IsSynchronizedGet">
            <summary>设置 DictionaryAdapter.get_IsSynchronized() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimDictionaryAdapter.AllInstances.ItemGetObject">
            <summary>设置 DictionaryAdapter.get_Item(Object key) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimDictionaryAdapter.AllInstances.ItemSetObjectObject">
            <summary>设置 DictionaryAdapter.set_Item(Object key, Object value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimDictionaryAdapter.AllInstances.KeysGet">
            <summary>设置 DictionaryAdapter.get_Keys() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimDictionaryAdapter.AllInstances.RemoveObject">
            <summary>设置 DictionaryAdapter.Remove(Object key) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimDictionaryAdapter.AllInstances.SyncRootGet">
            <summary>设置 DictionaryAdapter.get_SyncRoot() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimDictionaryAdapter.AllInstances.SystemCollectionsIDictionaryGetEnumerator">
            <summary>设置 DictionaryAdapter.System.Collections.IDictionary.GetEnumerator() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimDictionaryAdapter.AllInstances.ValuesGet">
            <summary>设置 DictionaryAdapter.get_Values() 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Fakes.ShimDictionaryAdapter.ShimEntry">
            <summary>Castle.ActiveRecord.Framework.DictionaryAdapter+Entry 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.ShimDictionaryAdapter.ShimEntry.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.ShimDictionaryAdapter.ShimEntry.#ctor(Castle.ActiveRecord.Framework.DictionaryAdapter.Entry)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.ShimDictionaryAdapter.ShimEntry.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.ShimDictionaryAdapter.ShimEntry.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimDictionaryAdapter.ShimEntry.AddEntryDictionaryAdapterEntry">
            <summary>设置 Entry.AddEntry(Entry entry) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimDictionaryAdapter.ShimEntry.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimDictionaryAdapter.ShimEntry.ConstructorStringInt32">
            <summary>设置 Entry.Entry(String key, Int32 index) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimDictionaryAdapter.ShimEntry.FindString">
            <summary>设置 Entry.Find(String key) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Fakes.ShimDictionaryAdapter.ShimEntry.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimDictionaryAdapter.ShimEntry.AllInstances.AddEntryDictionaryAdapterEntry">
            <summary>设置 Entry.AddEntry(Entry entry) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimDictionaryAdapter.ShimEntry.AllInstances.FindString">
            <summary>设置 Entry.Find(String key) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Fakes.ShimHookDispatcher">
            <summary>Castle.ActiveRecord.Framework.HookDispatcher 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.ShimHookDispatcher.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.ShimHookDispatcher.#ctor(Castle.ActiveRecord.Framework.HookDispatcher)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.ShimHookDispatcher.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.ShimHookDispatcher.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.ShimHookDispatcher.Bind(NHibernate.IInterceptor)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimHookDispatcher.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimHookDispatcher.Constructor">
            <summary>设置 HookDispatcher.HookDispatcher() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimHookDispatcher.FindDirtyObjectObjectObjectArrayObjectArrayStringArrayITypeArray">
            <summary>设置 HookDispatcher.FindDirty(Object entity, Object id, Object[] currentState, Object[] previousState, String[] propertyNames, IType[] types) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimHookDispatcher.InstanceGet">
            <summary>设置 HookDispatcher.get_Instance() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimHookDispatcher.InstantiateStringEntityModeObject">
            <summary>设置 HookDispatcher.Instantiate(String entityName, EntityMode entityMode, Object id) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimHookDispatcher.IsTransientObject">
            <summary>设置 HookDispatcher.IsTransient(Object entity) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimHookDispatcher.OnDeleteObjectObjectObjectArrayStringArrayITypeArray">
            <summary>设置 HookDispatcher.OnDelete(Object entity, Object id, Object[] state, String[] propertyNames, IType[] types) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimHookDispatcher.OnFlushDirtyObjectObjectObjectArrayObjectArrayStringArrayITypeArray">
            <summary>设置 HookDispatcher.OnFlushDirty(Object entity, Object id, Object[] currentState, Object[] previousState, String[] propertyNames, IType[] types) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimHookDispatcher.OnLoadObjectObjectObjectArrayStringArrayITypeArray">
            <summary>设置 HookDispatcher.OnLoad(Object entity, Object id, Object[] state, String[] propertyNames, IType[] types) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimHookDispatcher.OnSaveObjectObjectObjectArrayStringArrayITypeArray">
            <summary>设置 HookDispatcher.OnSave(Object entity, Object id, Object[] state, String[] propertyNames, IType[] types) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimHookDispatcher.PostFlushICollection">
            <summary>设置 HookDispatcher.PostFlush(ICollection entities) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimHookDispatcher.PreFlushICollection">
            <summary>设置 HookDispatcher.PreFlush(ICollection entities) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimHookDispatcher.StaticConstructor">
            <summary>设置 HookDispatcher.HookDispatcher() 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Fakes.ShimHookDispatcher.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimHookDispatcher.AllInstances.FindDirtyObjectObjectObjectArrayObjectArrayStringArrayITypeArray">
            <summary>设置 HookDispatcher.FindDirty(Object entity, Object id, Object[] currentState, Object[] previousState, String[] propertyNames, IType[] types) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimHookDispatcher.AllInstances.InstantiateStringEntityModeObject">
            <summary>设置 HookDispatcher.Instantiate(String entityName, EntityMode entityMode, Object id) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimHookDispatcher.AllInstances.IsTransientObject">
            <summary>设置 HookDispatcher.IsTransient(Object entity) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimHookDispatcher.AllInstances.OnDeleteObjectObjectObjectArrayStringArrayITypeArray">
            <summary>设置 HookDispatcher.OnDelete(Object entity, Object id, Object[] state, String[] propertyNames, IType[] types) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimHookDispatcher.AllInstances.OnFlushDirtyObjectObjectObjectArrayObjectArrayStringArrayITypeArray">
            <summary>设置 HookDispatcher.OnFlushDirty(Object entity, Object id, Object[] currentState, Object[] previousState, String[] propertyNames, IType[] types) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimHookDispatcher.AllInstances.OnLoadObjectObjectObjectArrayStringArrayITypeArray">
            <summary>设置 HookDispatcher.OnLoad(Object entity, Object id, Object[] state, String[] propertyNames, IType[] types) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimHookDispatcher.AllInstances.OnSaveObjectObjectObjectArrayStringArrayITypeArray">
            <summary>设置 HookDispatcher.OnSave(Object entity, Object id, Object[] state, String[] propertyNames, IType[] types) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimHookDispatcher.AllInstances.PostFlushICollection">
            <summary>设置 HookDispatcher.PostFlush(ICollection entities) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimHookDispatcher.AllInstances.PreFlushICollection">
            <summary>设置 HookDispatcher.PreFlush(ICollection entities) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Fakes.ShimInterceptorFactory">
            <summary>Castle.ActiveRecord.Framework.InterceptorFactory 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.ShimInterceptorFactory.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.ShimInterceptorFactory.#ctor(Castle.ActiveRecord.Framework.InterceptorFactory)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.ShimInterceptorFactory.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.ShimInterceptorFactory.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimInterceptorFactory.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimInterceptorFactory.Constructor">
            <summary>设置 InterceptorFactory.InterceptorFactory() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimInterceptorFactory.DefaultCreateInterceptor">
            <summary>设置 InterceptorFactory.DefaultCreateInterceptor() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimInterceptorFactory.StaticConstructor">
            <summary>设置 InterceptorFactory.InterceptorFactory() 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Fakes.ShimInterceptorFactory.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Fakes.ShimNHEventListeners">
            <summary>Castle.ActiveRecord.Framework.NHEventListeners 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.ShimNHEventListeners.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.ShimNHEventListeners.#ctor(Castle.ActiveRecord.Framework.NHEventListeners)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.ShimNHEventListeners.AddOf1M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{``0})">
            <summary>设置 NHEventListeners.Add(!!0 listenerInstance) 的 填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.ShimNHEventListeners.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.ShimNHEventListeners.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.ShimNHEventListeners.Bind(Castle.ActiveRecord.Framework.INHContributor)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.ShimNHEventListeners.ContainsOf1M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``0,System.Boolean})">
            <summary>设置 NHEventListeners.Contains(!!0 listenerInstance) 的 填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.ShimNHEventListeners.EnumerateOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.Generic.IEnumerable{``0}})">
            <summary>设置 NHEventListeners.Enumerate() 的 填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.ShimNHEventListeners.GetEventTypesOf1Object``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Object,System.Type[]})">
            <summary>设置 NHEventListeners.GetEventTypes(Object listener) 的 填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.ShimNHEventListeners.RemoveOf1M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{``0})">
            <summary>设置 NHEventListeners.Remove(!!0 listenerInstance) 的 填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.ShimNHEventListeners._GetEventTypesb__dOf1Type``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Type,System.Boolean})">
            <summary>设置 NHEventListeners.&lt;GetEventTypes&gt;b__d(Type type) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimNHEventListeners.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimNHEventListeners.ConfigureListenerTypeConfigurationType">
            <summary>设置 NHEventListeners.ConfigureListenerType(Configuration configuration, Type listenerType) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimNHEventListeners.Constructor">
            <summary>设置 NHEventListeners.NHEventListeners() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimNHEventListeners.ContributeConfiguration">
            <summary>设置 NHEventListeners.Contribute(Configuration configuration) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimNHEventListeners.GetEventListenerTypes">
            <summary>设置 NHEventListeners.GetEventListenerTypes() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimNHEventListeners.GetPropertyType">
            <summary>设置 NHEventListeners.GetProperty(Type listenerType) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimNHEventListeners.ReplaceExistingListenersGet">
            <summary>设置 NHEventListeners.get_ReplaceExistingListeners() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimNHEventListeners.ReplaceExistingListenersSetBoolean">
            <summary>设置 NHEventListeners.set_ReplaceExistingListeners(Boolean value) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Fakes.ShimNHEventListeners.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.ShimNHEventListeners.AllInstances.AddOf1M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{Castle.ActiveRecord.Framework.NHEventListeners,``0})">
            <summary>设置 NHEventListeners.Add(!!0 listenerInstance) 的 填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.ShimNHEventListeners.AllInstances.ContainsOf1M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.ActiveRecord.Framework.NHEventListeners,``0,System.Boolean})">
            <summary>设置 NHEventListeners.Contains(!!0 listenerInstance) 的 填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.ShimNHEventListeners.AllInstances.EnumerateOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.ActiveRecord.Framework.NHEventListeners,System.Collections.Generic.IEnumerable{``0}})">
            <summary>设置 NHEventListeners.Enumerate() 的 填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.ShimNHEventListeners.AllInstances.RemoveOf1M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{Castle.ActiveRecord.Framework.NHEventListeners,``0})">
            <summary>设置 NHEventListeners.Remove(!!0 listenerInstance) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimNHEventListeners.AllInstances.ConfigureListenerTypeConfigurationType">
            <summary>设置 NHEventListeners.ConfigureListenerType(Configuration configuration, Type listenerType) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimNHEventListeners.AllInstances.ContributeConfiguration">
            <summary>设置 NHEventListeners.Contribute(Configuration configuration) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimNHEventListeners.AllInstances.ReplaceExistingListenersGet">
            <summary>设置 NHEventListeners.get_ReplaceExistingListeners() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimNHEventListeners.AllInstances.ReplaceExistingListenersSetBoolean">
            <summary>设置 NHEventListeners.set_ReplaceExistingListeners(Boolean value) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Fakes.ShimNHSearchContributor">
            <summary>Castle.ActiveRecord.Framework.NHSearchContributor 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.ShimNHSearchContributor.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.ShimNHSearchContributor.#ctor(Castle.ActiveRecord.Framework.NHSearchContributor)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.ShimNHSearchContributor.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.ShimNHSearchContributor.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.ShimNHSearchContributor.Bind(Castle.ActiveRecord.Framework.INHContributor)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimNHSearchContributor.AddListenerToTypeObjectArray">
            <summary>设置 NHSearchContributor.AddListenerTo(Type targetType, Object[] eventListeners) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimNHSearchContributor.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimNHSearchContributor.Constructor">
            <summary>设置 NHSearchContributor.NHSearchContributor() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimNHSearchContributor.ContributeConfiguration">
            <summary>设置 NHSearchContributor.Contribute(Configuration configuration) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Fakes.ShimNHSearchContributor.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimNHSearchContributor.AllInstances.AddListenerToTypeObjectArray">
            <summary>设置 NHSearchContributor.AddListenerTo(Type targetType, Object[] eventListeners) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimNHSearchContributor.AllInstances.ContributeConfiguration">
            <summary>设置 NHSearchContributor.Contribute(Configuration configuration) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Fakes.ShimNotWrappedException">
            <summary>Castle.ActiveRecord.Framework.NotWrappedException 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.ShimNotWrappedException.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.ShimNotWrappedException.#ctor(Castle.ActiveRecord.Framework.NotWrappedException)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.ShimNotWrappedException.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.ShimNotWrappedException.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.ShimNotWrappedException.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimNotWrappedException.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimNotWrappedException.Constructor">
            <summary>设置 NotWrappedException.NotWrappedException() 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Fakes.ShimNotWrappedException.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Fakes.ShimSessionFactoryHolder">
            <summary>Castle.ActiveRecord.Framework.SessionFactoryHolder 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.ShimSessionFactoryHolder.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.ShimSessionFactoryHolder.#ctor(Castle.ActiveRecord.Framework.SessionFactoryHolder)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.ShimSessionFactoryHolder.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.ShimSessionFactoryHolder.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.ShimSessionFactoryHolder.Bind(Castle.ActiveRecord.Framework.ISessionFactoryHolder)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimSessionFactoryHolder.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimSessionFactoryHolder.Constructor">
            <summary>设置 SessionFactoryHolder.SessionFactoryHolder() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimSessionFactoryHolder.CreateScopeSessionType">
            <summary>设置 SessionFactoryHolder.CreateScopeSession(Type type) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimSessionFactoryHolder.CreateSessionType">
            <summary>设置 SessionFactoryHolder.CreateSession(Type type) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimSessionFactoryHolder.FailSessionISession">
            <summary>设置 SessionFactoryHolder.FailSession(ISession session) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimSessionFactoryHolder.GetAllConfigurations">
            <summary>设置 SessionFactoryHolder.GetAllConfigurations() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimSessionFactoryHolder.GetConfigurationType">
            <summary>设置 SessionFactoryHolder.GetConfiguration(Type type) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimSessionFactoryHolder.GetRootTypeType">
            <summary>设置 SessionFactoryHolder.GetRootType(Type type) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimSessionFactoryHolder.GetSessionFactories">
            <summary>设置 SessionFactoryHolder.GetSessionFactories() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimSessionFactoryHolder.GetSessionFactoryType">
            <summary>设置 SessionFactoryHolder.GetSessionFactory(Type type) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimSessionFactoryHolder.OnRootTypeRegisteredAddRootTypeHandler">
            <summary>设置 SessionFactoryHolder.add_OnRootTypeRegistered(RootTypeHandler value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimSessionFactoryHolder.OnRootTypeRegisteredRemoveRootTypeHandler">
            <summary>设置 SessionFactoryHolder.remove_OnRootTypeRegistered(RootTypeHandler value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimSessionFactoryHolder.OpenSessionISessionFactory">
            <summary>设置 SessionFactoryHolder.OpenSession(ISessionFactory sessionFactory) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimSessionFactoryHolder.OpenSessionWithScopeISessionScopeISessionFactory">
            <summary>设置 SessionFactoryHolder.OpenSessionWithScope(ISessionScope scope, ISessionFactory sessionFactory) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimSessionFactoryHolder.RegisterSessionFactoryISessionFactoryType">
            <summary>设置 SessionFactoryHolder.RegisterSessionFactory(ISessionFactory sessionFactory, Type baseType) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimSessionFactoryHolder.RegisterTypeConfiguration">
            <summary>设置 SessionFactoryHolder.Register(Type rootType, Configuration cfg) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimSessionFactoryHolder.ReleaseSessionISession">
            <summary>设置 SessionFactoryHolder.ReleaseSession(ISession session) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimSessionFactoryHolder.ThreadScopeInfoGet">
            <summary>设置 SessionFactoryHolder.get_ThreadScopeInfo() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimSessionFactoryHolder.ThreadScopeInfoSetIThreadScopeInfo">
            <summary>设置 SessionFactoryHolder.set_ThreadScopeInfo(IThreadScopeInfo value) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Fakes.ShimSessionFactoryHolder.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimSessionFactoryHolder.AllInstances.CreateScopeSessionType">
            <summary>设置 SessionFactoryHolder.CreateScopeSession(Type type) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimSessionFactoryHolder.AllInstances.CreateSessionType">
            <summary>设置 SessionFactoryHolder.CreateSession(Type type) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimSessionFactoryHolder.AllInstances.FailSessionISession">
            <summary>设置 SessionFactoryHolder.FailSession(ISession session) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimSessionFactoryHolder.AllInstances.GetAllConfigurations">
            <summary>设置 SessionFactoryHolder.GetAllConfigurations() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimSessionFactoryHolder.AllInstances.GetConfigurationType">
            <summary>设置 SessionFactoryHolder.GetConfiguration(Type type) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimSessionFactoryHolder.AllInstances.GetRootTypeType">
            <summary>设置 SessionFactoryHolder.GetRootType(Type type) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimSessionFactoryHolder.AllInstances.GetSessionFactories">
            <summary>设置 SessionFactoryHolder.GetSessionFactories() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimSessionFactoryHolder.AllInstances.GetSessionFactoryType">
            <summary>设置 SessionFactoryHolder.GetSessionFactory(Type type) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimSessionFactoryHolder.AllInstances.OnRootTypeRegisteredAddRootTypeHandler">
            <summary>设置 SessionFactoryHolder.add_OnRootTypeRegistered(RootTypeHandler value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimSessionFactoryHolder.AllInstances.OnRootTypeRegisteredRemoveRootTypeHandler">
            <summary>设置 SessionFactoryHolder.remove_OnRootTypeRegistered(RootTypeHandler value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimSessionFactoryHolder.AllInstances.RegisterSessionFactoryISessionFactoryType">
            <summary>设置 SessionFactoryHolder.RegisterSessionFactory(ISessionFactory sessionFactory, Type baseType) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimSessionFactoryHolder.AllInstances.RegisterTypeConfiguration">
            <summary>设置 SessionFactoryHolder.Register(Type rootType, Configuration cfg) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimSessionFactoryHolder.AllInstances.ReleaseSessionISession">
            <summary>设置 SessionFactoryHolder.ReleaseSession(ISession session) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimSessionFactoryHolder.AllInstances.ThreadScopeInfoGet">
            <summary>设置 SessionFactoryHolder.get_ThreadScopeInfo() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimSessionFactoryHolder.AllInstances.ThreadScopeInfoSetIThreadScopeInfo">
            <summary>设置 SessionFactoryHolder.set_ThreadScopeInfo(IThreadScopeInfo value) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper">
            <summary>Castle.ActiveRecord.Framework.StatelessSessionWrapper 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.#ctor(Castle.ActiveRecord.Framework.StatelessSessionWrapper)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.Bind(NHibernate.ISession)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.Bind(System.IDisposable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.CreateCriteriaOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{NHibernate.ICriteria})">
            <summary>设置 StatelessSessionWrapper.CreateCriteria() 的 填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.CreateCriteriaOf1String``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,NHibernate.ICriteria})">
            <summary>设置 StatelessSessionWrapper.CreateCriteria(String alias) 的 填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.GetOf1Object``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Object,``0})">
            <summary>设置 StatelessSessionWrapper.Get(Object id) 的 填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.GetOf1ObjectLockMode``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Object,NHibernate.LockMode,``0})">
            <summary>设置 StatelessSessionWrapper.Get(Object id, LockMode lockMode) 的 填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.LoadOf1Object``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Object,``0})">
            <summary>设置 StatelessSessionWrapper.Load(Object id) 的 填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.LoadOf1ObjectLockMode``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Object,NHibernate.LockMode,``0})">
            <summary>设置 StatelessSessionWrapper.Load(Object id, LockMode lockMode) 的 填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.QueryOverOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{NHibernate.IQueryOver{``0,``0}})">
            <summary>设置 StatelessSessionWrapper.QueryOver() 的 填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.QueryOverOf1ExpressionOfFuncOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Linq.Expressions.Expression{System.Func{``0}},NHibernate.IQueryOver{``0,``0}})">
            <summary>设置 StatelessSessionWrapper.QueryOver(Expression`1&lt;Func`1&lt;!!0&gt;&gt; alias) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.ActiveEntityModeGet">
            <summary>设置 StatelessSessionWrapper.get_ActiveEntityMode() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.BeginTransaction">
            <summary>设置 StatelessSessionWrapper.BeginTransaction() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.BeginTransactionIsolationLevel">
            <summary>设置 StatelessSessionWrapper.BeginTransaction(IsolationLevel isolationLevel) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.CacheModeGet">
            <summary>设置 StatelessSessionWrapper.get_CacheMode() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.CacheModeSetCacheMode">
            <summary>设置 StatelessSessionWrapper.set_CacheMode(CacheMode value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.CancelQuery">
            <summary>设置 StatelessSessionWrapper.CancelQuery() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.Clear">
            <summary>设置 StatelessSessionWrapper.Clear() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.Close">
            <summary>设置 StatelessSessionWrapper.Close() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.ConnectionGet">
            <summary>设置 StatelessSessionWrapper.get_Connection() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.ConstructorIStatelessSession">
            <summary>设置 StatelessSessionWrapper.StatelessSessionWrapper(IStatelessSession statelessSession) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.ContainsObject">
            <summary>设置 StatelessSessionWrapper.Contains(Object obj) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.CreateCriteriaString">
            <summary>设置 StatelessSessionWrapper.CreateCriteria(String entityName) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.CreateCriteriaStringString">
            <summary>设置 StatelessSessionWrapper.CreateCriteria(String entityName, String alias) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.CreateCriteriaType">
            <summary>设置 StatelessSessionWrapper.CreateCriteria(Type persistentClass) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.CreateCriteriaTypeString">
            <summary>设置 StatelessSessionWrapper.CreateCriteria(Type persistentClass, String alias) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.CreateFilterObjectString">
            <summary>设置 StatelessSessionWrapper.CreateFilter(Object collection, String queryString) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.CreateMultiCriteria">
            <summary>设置 StatelessSessionWrapper.CreateMultiCriteria() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.CreateMultiQuery">
            <summary>设置 StatelessSessionWrapper.CreateMultiQuery() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.CreateQueryIQueryExpression">
            <summary>设置 StatelessSessionWrapper.CreateQuery(IQueryExpression queryExpression) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.CreateQueryString">
            <summary>设置 StatelessSessionWrapper.CreateQuery(String queryString) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.CreateSQLQueryString">
            <summary>设置 StatelessSessionWrapper.CreateSQLQuery(String queryString) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.CreateSQLQueryStringStringArrayTypeArray">
            <summary>设置 StatelessSessionWrapper.CreateSQLQuery(String sql, String[] returnAliases, Type[] returnClasses) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.CreateSQLQueryStringStringType">
            <summary>设置 StatelessSessionWrapper.CreateSQLQuery(String sql, String returnAlias, Type returnClass) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.DefaultReadOnlyGet">
            <summary>设置 StatelessSessionWrapper.get_DefaultReadOnly() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.DefaultReadOnlySetBoolean">
            <summary>设置 StatelessSessionWrapper.set_DefaultReadOnly(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.DeleteObject">
            <summary>设置 StatelessSessionWrapper.Delete(Object obj) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.DeleteString">
            <summary>设置 StatelessSessionWrapper.Delete(String query) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.DeleteStringObject">
            <summary>设置 StatelessSessionWrapper.Delete(String entityName, Object obj) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.DeleteStringObjectArrayITypeArray">
            <summary>设置 StatelessSessionWrapper.Delete(String query, Object[] values, IType[] types) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.DeleteStringObjectIType">
            <summary>设置 StatelessSessionWrapper.Delete(String query, Object value, IType type) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.DisableFilterString">
            <summary>设置 StatelessSessionWrapper.DisableFilter(String filterName) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.Disconnect">
            <summary>设置 StatelessSessionWrapper.Disconnect() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.Dispose">
            <summary>设置 StatelessSessionWrapper.Dispose() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.EnableFilterString">
            <summary>设置 StatelessSessionWrapper.EnableFilter(String filterName) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.EnumerableString">
            <summary>设置 StatelessSessionWrapper.Enumerable(String query) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.EnumerableStringObjectArrayITypeArray">
            <summary>设置 StatelessSessionWrapper.Enumerable(String query, Object[] values, IType[] types) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.EnumerableStringObjectIType">
            <summary>设置 StatelessSessionWrapper.Enumerable(String query, Object value, IType type) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.EvictObject">
            <summary>设置 StatelessSessionWrapper.Evict(Object obj) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.FilterObjectString">
            <summary>设置 StatelessSessionWrapper.Filter(Object collection, String filter) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.FilterObjectStringObjectArrayITypeArray">
            <summary>设置 StatelessSessionWrapper.Filter(Object collection, String filter, Object[] values, IType[] types) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.FilterObjectStringObjectIType">
            <summary>设置 StatelessSessionWrapper.Filter(Object collection, String filter, Object value, IType type) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.FindString">
            <summary>设置 StatelessSessionWrapper.Find(String query) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.FindStringObjectArrayITypeArray">
            <summary>设置 StatelessSessionWrapper.Find(String query, Object[] values, IType[] types) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.FindStringObjectIType">
            <summary>设置 StatelessSessionWrapper.Find(String query, Object value, IType type) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.Flush">
            <summary>设置 StatelessSessionWrapper.Flush() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.FlushModeGet">
            <summary>设置 StatelessSessionWrapper.get_FlushMode() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.FlushModeSetFlushMode">
            <summary>设置 StatelessSessionWrapper.set_FlushMode(FlushMode value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.GetCurrentLockModeObject">
            <summary>设置 StatelessSessionWrapper.GetCurrentLockMode(Object obj) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.GetEnabledFilterString">
            <summary>设置 StatelessSessionWrapper.GetEnabledFilter(String filterName) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.GetEntityNameObject">
            <summary>设置 StatelessSessionWrapper.GetEntityName(Object obj) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.GetIdentifierObject">
            <summary>设置 StatelessSessionWrapper.GetIdentifier(Object obj) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.GetNamedQueryString">
            <summary>设置 StatelessSessionWrapper.GetNamedQuery(String queryName) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.GetSessionEntityMode">
            <summary>设置 StatelessSessionWrapper.GetSession(EntityMode entityMode) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.GetSessionImplementation">
            <summary>设置 StatelessSessionWrapper.GetSessionImplementation() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.GetStringObject">
            <summary>设置 StatelessSessionWrapper.Get(String entityName, Object id) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.GetTypeObject">
            <summary>设置 StatelessSessionWrapper.Get(Type clazz, Object id) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.GetTypeObjectLockMode">
            <summary>设置 StatelessSessionWrapper.Get(Type clazz, Object id, LockMode lockMode) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.IsConnectedGet">
            <summary>设置 StatelessSessionWrapper.get_IsConnected() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.IsDirty">
            <summary>设置 StatelessSessionWrapper.IsDirty() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.IsOpenGet">
            <summary>设置 StatelessSessionWrapper.get_IsOpen() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.IsReadOnlyObject">
            <summary>设置 StatelessSessionWrapper.IsReadOnly(Object entityOrProxy) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.LoadObjectObject">
            <summary>设置 StatelessSessionWrapper.Load(Object obj, Object id) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.LoadStringObject">
            <summary>设置 StatelessSessionWrapper.Load(String entityName, Object id) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.LoadStringObjectLockMode">
            <summary>设置 StatelessSessionWrapper.Load(String entityName, Object id, LockMode lockMode) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.LoadTypeObject">
            <summary>设置 StatelessSessionWrapper.Load(Type theType, Object id) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.LoadTypeObjectLockMode">
            <summary>设置 StatelessSessionWrapper.Load(Type theType, Object id, LockMode lockMode) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.LockObjectLockMode">
            <summary>设置 StatelessSessionWrapper.Lock(Object obj, LockMode lockMode) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.LockStringObjectLockMode">
            <summary>设置 StatelessSessionWrapper.Lock(String entityName, Object obj, LockMode lockMode) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.MergeObject">
            <summary>设置 StatelessSessionWrapper.Merge(Object obj) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.MergeStringObject">
            <summary>设置 StatelessSessionWrapper.Merge(String entityName, Object obj) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.PersistObject">
            <summary>设置 StatelessSessionWrapper.Persist(Object obj) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.PersistStringObject">
            <summary>设置 StatelessSessionWrapper.Persist(String entityName, Object obj) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.Reconnect">
            <summary>设置 StatelessSessionWrapper.Reconnect() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.ReconnectIDbConnection">
            <summary>设置 StatelessSessionWrapper.Reconnect(IDbConnection connection) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.RefreshObject">
            <summary>设置 StatelessSessionWrapper.Refresh(Object obj) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.RefreshObjectLockMode">
            <summary>设置 StatelessSessionWrapper.Refresh(Object obj, LockMode lockMode) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.ReplicateObjectReplicationMode">
            <summary>设置 StatelessSessionWrapper.Replicate(Object obj, ReplicationMode replicationMode) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.ReplicateStringObjectReplicationMode">
            <summary>设置 StatelessSessionWrapper.Replicate(String entityName, Object obj, ReplicationMode replicationMode) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.SaveObject">
            <summary>设置 StatelessSessionWrapper.Save(Object obj) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.SaveObjectObject">
            <summary>设置 StatelessSessionWrapper.Save(Object obj, Object id) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.SaveOrUpdateCopyObject">
            <summary>设置 StatelessSessionWrapper.SaveOrUpdateCopy(Object obj) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.SaveOrUpdateCopyObjectObject">
            <summary>设置 StatelessSessionWrapper.SaveOrUpdateCopy(Object obj, Object id) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.SaveOrUpdateObject">
            <summary>设置 StatelessSessionWrapper.SaveOrUpdate(Object obj) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.SaveOrUpdateStringObject">
            <summary>设置 StatelessSessionWrapper.SaveOrUpdate(String entityName, Object obj) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.SaveStringObject">
            <summary>设置 StatelessSessionWrapper.Save(String entityName, Object obj) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.SessionFactoryGet">
            <summary>设置 StatelessSessionWrapper.get_SessionFactory() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.SetBatchSizeInt32">
            <summary>设置 StatelessSessionWrapper.SetBatchSize(Int32 batchSize) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.SetReadOnlyObjectBoolean">
            <summary>设置 StatelessSessionWrapper.SetReadOnly(Object entityOrProxy, Boolean readOnly) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.StatisticsGet">
            <summary>设置 StatelessSessionWrapper.get_Statistics() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.TransactionGet">
            <summary>设置 StatelessSessionWrapper.get_Transaction() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.UpdateObject">
            <summary>设置 StatelessSessionWrapper.Update(Object obj) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.UpdateObjectObject">
            <summary>设置 StatelessSessionWrapper.Update(Object obj, Object id) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.UpdateStringObject">
            <summary>设置 StatelessSessionWrapper.Update(String entityName, Object obj) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.AllInstances.CreateCriteriaOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.ActiveRecord.Framework.StatelessSessionWrapper,NHibernate.ICriteria})">
            <summary>设置 StatelessSessionWrapper.CreateCriteria() 的 填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.AllInstances.CreateCriteriaOf1String``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.ActiveRecord.Framework.StatelessSessionWrapper,System.String,NHibernate.ICriteria})">
            <summary>设置 StatelessSessionWrapper.CreateCriteria(String alias) 的 填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.AllInstances.GetOf1Object``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.ActiveRecord.Framework.StatelessSessionWrapper,System.Object,``0})">
            <summary>设置 StatelessSessionWrapper.Get(Object id) 的 填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.AllInstances.GetOf1ObjectLockMode``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.ActiveRecord.Framework.StatelessSessionWrapper,System.Object,NHibernate.LockMode,``0})">
            <summary>设置 StatelessSessionWrapper.Get(Object id, LockMode lockMode) 的 填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.AllInstances.LoadOf1Object``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.ActiveRecord.Framework.StatelessSessionWrapper,System.Object,``0})">
            <summary>设置 StatelessSessionWrapper.Load(Object id) 的 填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.AllInstances.LoadOf1ObjectLockMode``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.ActiveRecord.Framework.StatelessSessionWrapper,System.Object,NHibernate.LockMode,``0})">
            <summary>设置 StatelessSessionWrapper.Load(Object id, LockMode lockMode) 的 填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.AllInstances.QueryOverOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.ActiveRecord.Framework.StatelessSessionWrapper,NHibernate.IQueryOver{``0,``0}})">
            <summary>设置 StatelessSessionWrapper.QueryOver() 的 填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.AllInstances.QueryOverOf1ExpressionOfFuncOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{Castle.ActiveRecord.Framework.StatelessSessionWrapper,System.Linq.Expressions.Expression{System.Func{``0}},NHibernate.IQueryOver{``0,``0}})">
            <summary>设置 StatelessSessionWrapper.QueryOver(Expression`1&lt;Func`1&lt;!!0&gt;&gt; alias) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.AllInstances.ActiveEntityModeGet">
            <summary>设置 StatelessSessionWrapper.get_ActiveEntityMode() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.AllInstances.BeginTransaction">
            <summary>设置 StatelessSessionWrapper.BeginTransaction() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.AllInstances.BeginTransactionIsolationLevel">
            <summary>设置 StatelessSessionWrapper.BeginTransaction(IsolationLevel isolationLevel) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.AllInstances.CacheModeGet">
            <summary>设置 StatelessSessionWrapper.get_CacheMode() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.AllInstances.CacheModeSetCacheMode">
            <summary>设置 StatelessSessionWrapper.set_CacheMode(CacheMode value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.AllInstances.CancelQuery">
            <summary>设置 StatelessSessionWrapper.CancelQuery() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.AllInstances.Clear">
            <summary>设置 StatelessSessionWrapper.Clear() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.AllInstances.Close">
            <summary>设置 StatelessSessionWrapper.Close() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.AllInstances.ConnectionGet">
            <summary>设置 StatelessSessionWrapper.get_Connection() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.AllInstances.ContainsObject">
            <summary>设置 StatelessSessionWrapper.Contains(Object obj) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.AllInstances.CreateCriteriaString">
            <summary>设置 StatelessSessionWrapper.CreateCriteria(String entityName) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.AllInstances.CreateCriteriaStringString">
            <summary>设置 StatelessSessionWrapper.CreateCriteria(String entityName, String alias) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.AllInstances.CreateCriteriaType">
            <summary>设置 StatelessSessionWrapper.CreateCriteria(Type persistentClass) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.AllInstances.CreateCriteriaTypeString">
            <summary>设置 StatelessSessionWrapper.CreateCriteria(Type persistentClass, String alias) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.AllInstances.CreateFilterObjectString">
            <summary>设置 StatelessSessionWrapper.CreateFilter(Object collection, String queryString) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.AllInstances.CreateMultiCriteria">
            <summary>设置 StatelessSessionWrapper.CreateMultiCriteria() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.AllInstances.CreateMultiQuery">
            <summary>设置 StatelessSessionWrapper.CreateMultiQuery() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.AllInstances.CreateQueryIQueryExpression">
            <summary>设置 StatelessSessionWrapper.CreateQuery(IQueryExpression queryExpression) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.AllInstances.CreateQueryString">
            <summary>设置 StatelessSessionWrapper.CreateQuery(String queryString) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.AllInstances.CreateSQLQueryString">
            <summary>设置 StatelessSessionWrapper.CreateSQLQuery(String queryString) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.AllInstances.CreateSQLQueryStringStringArrayTypeArray">
            <summary>设置 StatelessSessionWrapper.CreateSQLQuery(String sql, String[] returnAliases, Type[] returnClasses) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.AllInstances.CreateSQLQueryStringStringType">
            <summary>设置 StatelessSessionWrapper.CreateSQLQuery(String sql, String returnAlias, Type returnClass) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.AllInstances.DefaultReadOnlyGet">
            <summary>设置 StatelessSessionWrapper.get_DefaultReadOnly() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.AllInstances.DefaultReadOnlySetBoolean">
            <summary>设置 StatelessSessionWrapper.set_DefaultReadOnly(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.AllInstances.DeleteObject">
            <summary>设置 StatelessSessionWrapper.Delete(Object obj) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.AllInstances.DeleteString">
            <summary>设置 StatelessSessionWrapper.Delete(String query) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.AllInstances.DeleteStringObject">
            <summary>设置 StatelessSessionWrapper.Delete(String entityName, Object obj) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.AllInstances.DeleteStringObjectArrayITypeArray">
            <summary>设置 StatelessSessionWrapper.Delete(String query, Object[] values, IType[] types) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.AllInstances.DeleteStringObjectIType">
            <summary>设置 StatelessSessionWrapper.Delete(String query, Object value, IType type) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.AllInstances.DisableFilterString">
            <summary>设置 StatelessSessionWrapper.DisableFilter(String filterName) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.AllInstances.Disconnect">
            <summary>设置 StatelessSessionWrapper.Disconnect() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.AllInstances.Dispose">
            <summary>设置 StatelessSessionWrapper.Dispose() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.AllInstances.EnableFilterString">
            <summary>设置 StatelessSessionWrapper.EnableFilter(String filterName) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.AllInstances.EnumerableString">
            <summary>设置 StatelessSessionWrapper.Enumerable(String query) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.AllInstances.EnumerableStringObjectArrayITypeArray">
            <summary>设置 StatelessSessionWrapper.Enumerable(String query, Object[] values, IType[] types) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.AllInstances.EnumerableStringObjectIType">
            <summary>设置 StatelessSessionWrapper.Enumerable(String query, Object value, IType type) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.AllInstances.EvictObject">
            <summary>设置 StatelessSessionWrapper.Evict(Object obj) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.AllInstances.FilterObjectString">
            <summary>设置 StatelessSessionWrapper.Filter(Object collection, String filter) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.AllInstances.FilterObjectStringObjectArrayITypeArray">
            <summary>设置 StatelessSessionWrapper.Filter(Object collection, String filter, Object[] values, IType[] types) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.AllInstances.FilterObjectStringObjectIType">
            <summary>设置 StatelessSessionWrapper.Filter(Object collection, String filter, Object value, IType type) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.AllInstances.FindString">
            <summary>设置 StatelessSessionWrapper.Find(String query) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.AllInstances.FindStringObjectArrayITypeArray">
            <summary>设置 StatelessSessionWrapper.Find(String query, Object[] values, IType[] types) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.AllInstances.FindStringObjectIType">
            <summary>设置 StatelessSessionWrapper.Find(String query, Object value, IType type) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.AllInstances.Flush">
            <summary>设置 StatelessSessionWrapper.Flush() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.AllInstances.FlushModeGet">
            <summary>设置 StatelessSessionWrapper.get_FlushMode() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.AllInstances.FlushModeSetFlushMode">
            <summary>设置 StatelessSessionWrapper.set_FlushMode(FlushMode value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.AllInstances.GetCurrentLockModeObject">
            <summary>设置 StatelessSessionWrapper.GetCurrentLockMode(Object obj) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.AllInstances.GetEnabledFilterString">
            <summary>设置 StatelessSessionWrapper.GetEnabledFilter(String filterName) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.AllInstances.GetEntityNameObject">
            <summary>设置 StatelessSessionWrapper.GetEntityName(Object obj) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.AllInstances.GetIdentifierObject">
            <summary>设置 StatelessSessionWrapper.GetIdentifier(Object obj) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.AllInstances.GetNamedQueryString">
            <summary>设置 StatelessSessionWrapper.GetNamedQuery(String queryName) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.AllInstances.GetSessionEntityMode">
            <summary>设置 StatelessSessionWrapper.GetSession(EntityMode entityMode) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.AllInstances.GetSessionImplementation">
            <summary>设置 StatelessSessionWrapper.GetSessionImplementation() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.AllInstances.GetStringObject">
            <summary>设置 StatelessSessionWrapper.Get(String entityName, Object id) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.AllInstances.GetTypeObject">
            <summary>设置 StatelessSessionWrapper.Get(Type clazz, Object id) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.AllInstances.GetTypeObjectLockMode">
            <summary>设置 StatelessSessionWrapper.Get(Type clazz, Object id, LockMode lockMode) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.AllInstances.IsConnectedGet">
            <summary>设置 StatelessSessionWrapper.get_IsConnected() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.AllInstances.IsDirty">
            <summary>设置 StatelessSessionWrapper.IsDirty() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.AllInstances.IsOpenGet">
            <summary>设置 StatelessSessionWrapper.get_IsOpen() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.AllInstances.IsReadOnlyObject">
            <summary>设置 StatelessSessionWrapper.IsReadOnly(Object entityOrProxy) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.AllInstances.LoadObjectObject">
            <summary>设置 StatelessSessionWrapper.Load(Object obj, Object id) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.AllInstances.LoadStringObject">
            <summary>设置 StatelessSessionWrapper.Load(String entityName, Object id) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.AllInstances.LoadStringObjectLockMode">
            <summary>设置 StatelessSessionWrapper.Load(String entityName, Object id, LockMode lockMode) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.AllInstances.LoadTypeObject">
            <summary>设置 StatelessSessionWrapper.Load(Type theType, Object id) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.AllInstances.LoadTypeObjectLockMode">
            <summary>设置 StatelessSessionWrapper.Load(Type theType, Object id, LockMode lockMode) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.AllInstances.LockObjectLockMode">
            <summary>设置 StatelessSessionWrapper.Lock(Object obj, LockMode lockMode) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.AllInstances.LockStringObjectLockMode">
            <summary>设置 StatelessSessionWrapper.Lock(String entityName, Object obj, LockMode lockMode) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.AllInstances.MergeObject">
            <summary>设置 StatelessSessionWrapper.Merge(Object obj) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.AllInstances.MergeStringObject">
            <summary>设置 StatelessSessionWrapper.Merge(String entityName, Object obj) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.AllInstances.PersistObject">
            <summary>设置 StatelessSessionWrapper.Persist(Object obj) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.AllInstances.PersistStringObject">
            <summary>设置 StatelessSessionWrapper.Persist(String entityName, Object obj) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.AllInstances.Reconnect">
            <summary>设置 StatelessSessionWrapper.Reconnect() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.AllInstances.ReconnectIDbConnection">
            <summary>设置 StatelessSessionWrapper.Reconnect(IDbConnection connection) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.AllInstances.RefreshObject">
            <summary>设置 StatelessSessionWrapper.Refresh(Object obj) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.AllInstances.RefreshObjectLockMode">
            <summary>设置 StatelessSessionWrapper.Refresh(Object obj, LockMode lockMode) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.AllInstances.ReplicateObjectReplicationMode">
            <summary>设置 StatelessSessionWrapper.Replicate(Object obj, ReplicationMode replicationMode) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.AllInstances.ReplicateStringObjectReplicationMode">
            <summary>设置 StatelessSessionWrapper.Replicate(String entityName, Object obj, ReplicationMode replicationMode) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.AllInstances.SaveObject">
            <summary>设置 StatelessSessionWrapper.Save(Object obj) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.AllInstances.SaveObjectObject">
            <summary>设置 StatelessSessionWrapper.Save(Object obj, Object id) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.AllInstances.SaveOrUpdateCopyObject">
            <summary>设置 StatelessSessionWrapper.SaveOrUpdateCopy(Object obj) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.AllInstances.SaveOrUpdateCopyObjectObject">
            <summary>设置 StatelessSessionWrapper.SaveOrUpdateCopy(Object obj, Object id) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.AllInstances.SaveOrUpdateObject">
            <summary>设置 StatelessSessionWrapper.SaveOrUpdate(Object obj) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.AllInstances.SaveOrUpdateStringObject">
            <summary>设置 StatelessSessionWrapper.SaveOrUpdate(String entityName, Object obj) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.AllInstances.SaveStringObject">
            <summary>设置 StatelessSessionWrapper.Save(String entityName, Object obj) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.AllInstances.SessionFactoryGet">
            <summary>设置 StatelessSessionWrapper.get_SessionFactory() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.AllInstances.SetBatchSizeInt32">
            <summary>设置 StatelessSessionWrapper.SetBatchSize(Int32 batchSize) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.AllInstances.SetReadOnlyObjectBoolean">
            <summary>设置 StatelessSessionWrapper.SetReadOnly(Object entityOrProxy, Boolean readOnly) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.AllInstances.StatisticsGet">
            <summary>设置 StatelessSessionWrapper.get_Statistics() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.AllInstances.TransactionGet">
            <summary>设置 StatelessSessionWrapper.get_Transaction() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.AllInstances.UpdateObject">
            <summary>设置 StatelessSessionWrapper.Update(Object obj) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.AllInstances.UpdateObjectObject">
            <summary>设置 StatelessSessionWrapper.Update(Object obj, Object id) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimStatelessSessionWrapper.AllInstances.UpdateStringObject">
            <summary>设置 StatelessSessionWrapper.Update(String entityName, Object obj) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Fakes.ShimSupportingUtils">
            <summary>Castle.ActiveRecord.Framework.SupportingUtils 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.ShimSupportingUtils.#ctor(Castle.ActiveRecord.Framework.SupportingUtils)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.ShimSupportingUtils.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.ShimSupportingUtils.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.ShimSupportingUtils.BuildArrayOf1IEnumerableBoolean``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.IEnumerable,System.Boolean,``0[]})">
            <summary>设置 SupportingUtils.BuildArray(IEnumerable list, Boolean distinct) 的 填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.ShimSupportingUtils.BuildArrayOf1IEnumerableNullableOfInt32Boolean``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.IEnumerable,System.Nullable{System.Int32},System.Boolean,``0[]})">
            <summary>设置 SupportingUtils.BuildArray(IEnumerable list, Nullable`1&lt;Int32&gt; entityIndex, Boolean distinct) 的 填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.ShimSupportingUtils.BuildObjectArrayOf1IEnumerableBoolean``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.IEnumerable,System.Boolean,``0[]})">
            <summary>设置 SupportingUtils.BuildObjectArray(IEnumerable list, Boolean distinct) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimSupportingUtils.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimSupportingUtils.BuildArrayTypeIEnumerableBoolean">
            <summary>设置 SupportingUtils.BuildArray(Type type, IEnumerable list, Boolean distinct) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimSupportingUtils.BuildArrayTypeIEnumerableInt32Boolean">
            <summary>设置 SupportingUtils.BuildArray(Type type, IEnumerable list, Int32 entityIndex, Boolean distinct) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimSupportingUtils.BuildArrayTypeIList">
            <summary>设置 SupportingUtils.BuildArray(Type targetType, IList list) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimSupportingUtils.BuildObjectArrayTypeIEnumerableBoolean">
            <summary>设置 SupportingUtils.BuildObjectArray(Type type, IEnumerable list, Boolean distinct) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimSupportingUtils.Constructor">
            <summary>设置 SupportingUtils.SupportingUtils() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimSupportingUtils.FindAllType">
            <summary>设置 SupportingUtils.FindAll(Type type) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimSupportingUtils.FindByPKTypeObject">
            <summary>设置 SupportingUtils.FindByPK(Type type, Object id) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimSupportingUtils.FindByPKTypeObjectBoolean">
            <summary>设置 SupportingUtils.FindByPK(Type type, Object id, Boolean throwOnNotFound) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Fakes.ShimSupportingUtils.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Fakes.ShimTransactionException">
            <summary>Castle.ActiveRecord.Framework.TransactionException 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.ShimTransactionException.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.ShimTransactionException.#ctor(Castle.ActiveRecord.Framework.TransactionException)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.ShimTransactionException.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.ShimTransactionException.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.ShimTransactionException.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimTransactionException.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimTransactionException.ConstructorSerializationInfoStreamingContext">
            <summary>设置 TransactionException.TransactionException(SerializationInfo info, StreamingContext context) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimTransactionException.ConstructorString">
            <summary>设置 TransactionException.TransactionException(String message) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.ShimTransactionException.ConstructorStringException">
            <summary>设置 TransactionException.TransactionException(String message, Exception innerException) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Fakes.ShimTransactionException.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Fakes.StubAbstractNHContributor">
            <summary>Castle.ActiveRecord.Framework.AbstractNHContributor 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.StubAbstractNHContributor.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.StubAbstractNHContributor.Contribute(NHibernate.Cfg.Configuration)">
            <summary>设置 AbstractNHContributor.Contribute(Configuration configuration) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Fakes.StubAbstractNHContributor.ContributeConfiguration">
            <summary>设置 AbstractNHContributor.Contribute(Configuration configuration) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.StubAbstractNHContributor.InitializeStub">
            <summary>初始化 type StubAbstractNHContributor 的新实例</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.StubAbstractNHContributor.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.StubAbstractNHContributor.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.StubAbstractNHContributor.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Fakes.StubActiveRecordException">
            <summary>Castle.ActiveRecord.Framework.ActiveRecordException 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.StubActiveRecordException.#ctor(System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.StubActiveRecordException.#ctor(System.String,System.Exception)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.StubActiveRecordException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.StubActiveRecordException.AttachBackingFieldToHelpLink">
            <summary>附加委托以将 StubActiveRecordException.HelpLink 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.StubActiveRecordException.AttachBackingFieldToSource">
            <summary>附加委托以将 StubActiveRecordException.Source 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Fakes.StubActiveRecordException.DataGet">
            <summary>设置 Exception.get_Data() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.StubActiveRecordException.GetBaseException">
            <summary>设置 Exception.GetBaseException() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Fakes.StubActiveRecordException.GetBaseException01">
            <summary>设置 Exception.GetBaseException() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.StubActiveRecordException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>设置 Exception.GetObjectData(SerializationInfo info, StreamingContext context) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Fakes.StubActiveRecordException.GetObjectDataSerializationInfoStreamingContext">
            <summary>设置 Exception.GetObjectData(SerializationInfo info, StreamingContext context) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Fakes.StubActiveRecordException.HelpLinkGet">
            <summary>设置 Exception.get_HelpLink() 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Fakes.StubActiveRecordException.HelpLinkSetString">
            <summary>设置 Exception.set_HelpLink(String value) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.StubActiveRecordException.InitializeStub">
            <summary>初始化 type StubActiveRecordException 的新实例</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Fakes.StubActiveRecordException.MessageGet">
            <summary>设置 Exception.get_Message() 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Fakes.StubActiveRecordException.SourceGet">
            <summary>设置 Exception.get_Source() 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Fakes.StubActiveRecordException.SourceSetString">
            <summary>设置 Exception.set_Source(String value) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Fakes.StubActiveRecordException.StackTraceGet">
            <summary>设置 Exception.get_StackTrace() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.StubActiveRecordException.ToString">
            <summary>设置 Exception.ToString() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Fakes.StubActiveRecordException.ToString01">
            <summary>设置 Exception.ToString() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.StubActiveRecordException.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.StubActiveRecordException.Data">
            <summary>设置 Exception.get_Data() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.StubActiveRecordException.HelpLink">
            <summary>设置 Exception.get_HelpLink() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.StubActiveRecordException.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.StubActiveRecordException.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.StubActiveRecordException.Message">
            <summary>设置 Exception.get_Message() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.StubActiveRecordException.Source">
            <summary>设置 Exception.get_Source() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.StubActiveRecordException.StackTrace">
            <summary>设置 Exception.get_StackTrace() 的 stub</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Fakes.StubActiveRecordInitializationException">
            <summary>Castle.ActiveRecord.Framework.ActiveRecordInitializationException 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.StubActiveRecordInitializationException.#ctor(System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.StubActiveRecordInitializationException.#ctor(System.String,System.Exception)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.StubActiveRecordInitializationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.StubActiveRecordInitializationException.AttachBackingFieldToHelpLink">
            <summary>附加委托以将 StubActiveRecordInitializationException.HelpLink 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.StubActiveRecordInitializationException.AttachBackingFieldToSource">
            <summary>附加委托以将 StubActiveRecordInitializationException.Source 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Fakes.StubActiveRecordInitializationException.DataGet">
            <summary>设置 Exception.get_Data() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.StubActiveRecordInitializationException.GetBaseException">
            <summary>设置 Exception.GetBaseException() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Fakes.StubActiveRecordInitializationException.GetBaseException01">
            <summary>设置 Exception.GetBaseException() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.StubActiveRecordInitializationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>设置 Exception.GetObjectData(SerializationInfo info, StreamingContext context) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Fakes.StubActiveRecordInitializationException.GetObjectDataSerializationInfoStreamingContext">
            <summary>设置 Exception.GetObjectData(SerializationInfo info, StreamingContext context) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Fakes.StubActiveRecordInitializationException.HelpLinkGet">
            <summary>设置 Exception.get_HelpLink() 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Fakes.StubActiveRecordInitializationException.HelpLinkSetString">
            <summary>设置 Exception.set_HelpLink(String value) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.StubActiveRecordInitializationException.InitializeStub">
            <summary>初始化 type StubActiveRecordInitializationException 的新实例</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Fakes.StubActiveRecordInitializationException.MessageGet">
            <summary>设置 Exception.get_Message() 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Fakes.StubActiveRecordInitializationException.SourceGet">
            <summary>设置 Exception.get_Source() 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Fakes.StubActiveRecordInitializationException.SourceSetString">
            <summary>设置 Exception.set_Source(String value) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Fakes.StubActiveRecordInitializationException.StackTraceGet">
            <summary>设置 Exception.get_StackTrace() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.StubActiveRecordInitializationException.ToString">
            <summary>设置 Exception.ToString() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Fakes.StubActiveRecordInitializationException.ToString01">
            <summary>设置 Exception.ToString() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.StubActiveRecordInitializationException.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.StubActiveRecordInitializationException.Data">
            <summary>设置 Exception.get_Data() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.StubActiveRecordInitializationException.HelpLink">
            <summary>设置 Exception.get_HelpLink() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.StubActiveRecordInitializationException.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.StubActiveRecordInitializationException.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.StubActiveRecordInitializationException.Message">
            <summary>设置 Exception.get_Message() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.StubActiveRecordInitializationException.Source">
            <summary>设置 Exception.get_Source() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.StubActiveRecordInitializationException.StackTrace">
            <summary>设置 Exception.get_StackTrace() 的 stub</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Fakes.StubActiveRecordLinqBase`1">
            <summary>Castle.ActiveRecord.Framework.ActiveRecordLinqBase`1 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.StubActiveRecordLinqBase`1.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.StubActiveRecordLinqBase`1.BeforeDelete(System.Collections.IDictionary)">
            <summary>设置 ActiveRecordHooksBase.BeforeDelete(IDictionary adapter) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Fakes.StubActiveRecordLinqBase`1.BeforeDeleteIDictionary">
            <summary>设置 ActiveRecordHooksBase.BeforeDelete(IDictionary adapter) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.StubActiveRecordLinqBase`1.BeforeLoad(System.Object,System.Collections.IDictionary)">
            <summary>设置 ActiveRecordHooksBase.BeforeLoad(Object id, IDictionary adapter) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Fakes.StubActiveRecordLinqBase`1.BeforeLoadObjectIDictionary">
            <summary>设置 ActiveRecordHooksBase.BeforeLoad(Object id, IDictionary adapter) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.StubActiveRecordLinqBase`1.BeforeSave(System.Collections.IDictionary)">
            <summary>设置 ActiveRecordHooksBase.BeforeSave(IDictionary state) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Fakes.StubActiveRecordLinqBase`1.BeforeSaveIDictionary">
            <summary>设置 ActiveRecordHooksBase.BeforeSave(IDictionary state) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.StubActiveRecordLinqBase`1.FindDirty(System.Object,System.Collections.IDictionary,System.Collections.IDictionary,NHibernate.Type.IType[])">
            <summary>设置 ActiveRecordHooksBase.FindDirty(Object id, IDictionary previousState, IDictionary currentState, IType[] types) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Fakes.StubActiveRecordLinqBase`1.FindDirtyObjectIDictionaryIDictionaryITypeArray">
            <summary>设置 ActiveRecordHooksBase.FindDirty(Object id, IDictionary previousState, IDictionary currentState, IType[] types) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.StubActiveRecordLinqBase`1.InitializeStub">
            <summary>初始化 type StubActiveRecordLinqBase 的新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.StubActiveRecordLinqBase`1.IsUnsaved">
            <summary>设置 ActiveRecordHooksBase.IsUnsaved() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Fakes.StubActiveRecordLinqBase`1.IsUnsaved01">
            <summary>设置 ActiveRecordHooksBase.IsUnsaved() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.StubActiveRecordLinqBase`1.OnDelete">
            <summary>设置 ActiveRecordHooksBase.OnDelete() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Fakes.StubActiveRecordLinqBase`1.OnDelete01">
            <summary>设置 ActiveRecordHooksBase.OnDelete() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.StubActiveRecordLinqBase`1.OnFlushDirty(System.Object,System.Collections.IDictionary,System.Collections.IDictionary,NHibernate.Type.IType[])">
            <summary>设置 ActiveRecordHooksBase.OnFlushDirty(Object id, IDictionary previousState, IDictionary currentState, IType[] types) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Fakes.StubActiveRecordLinqBase`1.OnFlushDirtyObjectIDictionaryIDictionaryITypeArray">
            <summary>设置 ActiveRecordHooksBase.OnFlushDirty(Object id, IDictionary previousState, IDictionary currentState, IType[] types) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.StubActiveRecordLinqBase`1.OnLoad(System.Object)">
            <summary>设置 ActiveRecordHooksBase.OnLoad(Object id) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Fakes.StubActiveRecordLinqBase`1.OnLoadObject">
            <summary>设置 ActiveRecordHooksBase.OnLoad(Object id) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.StubActiveRecordLinqBase`1.OnSave">
            <summary>设置 ActiveRecordHooksBase.OnSave() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Fakes.StubActiveRecordLinqBase`1.OnSave01">
            <summary>设置 ActiveRecordHooksBase.OnSave() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.StubActiveRecordLinqBase`1.OnUpdate">
            <summary>设置 ActiveRecordHooksBase.OnUpdate() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Fakes.StubActiveRecordLinqBase`1.OnUpdate01">
            <summary>设置 ActiveRecordHooksBase.OnUpdate() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.StubActiveRecordLinqBase`1.PostFlush">
            <summary>设置 ActiveRecordHooksBase.PostFlush() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Fakes.StubActiveRecordLinqBase`1.PostFlush01">
            <summary>设置 ActiveRecordHooksBase.PostFlush() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.StubActiveRecordLinqBase`1.PreFlush">
            <summary>设置 ActiveRecordHooksBase.PreFlush() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Fakes.StubActiveRecordLinqBase`1.PreFlush01">
            <summary>设置 ActiveRecordHooksBase.PreFlush() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.StubActiveRecordLinqBase`1.ToString">
            <summary>设置 ActiveRecordBase.ToString() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Fakes.StubActiveRecordLinqBase`1.ToString01">
            <summary>设置 ActiveRecordBase.ToString() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.StubActiveRecordLinqBase`1.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.StubActiveRecordLinqBase`1.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.StubActiveRecordLinqBase`1.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Fakes.StubDictionaryAdapter">
            <summary>Castle.ActiveRecord.Framework.DictionaryAdapter 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.StubDictionaryAdapter.#ctor(System.String[],System.Object[])">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.StubDictionaryAdapter.InitializeStub">
            <summary>初始化 type StubDictionaryAdapter 的新实例</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.StubDictionaryAdapter.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.StubDictionaryAdapter.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.StubDictionaryAdapter.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Fakes.StubHookDispatcher">
            <summary>Castle.ActiveRecord.Framework.HookDispatcher 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.StubHookDispatcher.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.StubHookDispatcher.AfterTransactionBegin(NHibernate.ITransaction)">
            <summary>设置 EmptyInterceptor.AfterTransactionBegin(ITransaction tx) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Fakes.StubHookDispatcher.AfterTransactionBeginITransaction">
            <summary>设置 EmptyInterceptor.AfterTransactionBegin(ITransaction tx) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.StubHookDispatcher.AfterTransactionCompletion(NHibernate.ITransaction)">
            <summary>设置 EmptyInterceptor.AfterTransactionCompletion(ITransaction tx) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Fakes.StubHookDispatcher.AfterTransactionCompletionITransaction">
            <summary>设置 EmptyInterceptor.AfterTransactionCompletion(ITransaction tx) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.StubHookDispatcher.BeforeTransactionCompletion(NHibernate.ITransaction)">
            <summary>设置 EmptyInterceptor.BeforeTransactionCompletion(ITransaction tx) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Fakes.StubHookDispatcher.BeforeTransactionCompletionITransaction">
            <summary>设置 EmptyInterceptor.BeforeTransactionCompletion(ITransaction tx) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.StubHookDispatcher.FindDirty(System.Object,System.Object,System.Object[],System.Object[],System.String[],NHibernate.Type.IType[])">
            <summary>设置 HookDispatcher.FindDirty(Object entity, Object id, Object[] currentState, Object[] previousState, String[] propertyNames, IType[] types) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Fakes.StubHookDispatcher.FindDirtyObjectObjectObjectArrayObjectArrayStringArrayITypeArray">
            <summary>设置 HookDispatcher.FindDirty(Object entity, Object id, Object[] currentState, Object[] previousState, String[] propertyNames, IType[] types) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.StubHookDispatcher.GetEntity(System.String,System.Object)">
            <summary>设置 EmptyInterceptor.GetEntity(String entityName, Object id) 的 存根</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.StubHookDispatcher.GetEntityName(System.Object)">
            <summary>设置 EmptyInterceptor.GetEntityName(Object entity) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Fakes.StubHookDispatcher.GetEntityNameObject">
            <summary>设置 EmptyInterceptor.GetEntityName(Object entity) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Fakes.StubHookDispatcher.GetEntityStringObject">
            <summary>设置 EmptyInterceptor.GetEntity(String entityName, Object id) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.StubHookDispatcher.InitializeStub">
            <summary>初始化 type StubHookDispatcher 的新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.StubHookDispatcher.Instantiate(System.String,NHibernate.EntityMode,System.Object)">
            <summary>设置 HookDispatcher.Instantiate(String entityName, EntityMode entityMode, Object id) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Fakes.StubHookDispatcher.InstantiateStringEntityModeObject">
            <summary>设置 HookDispatcher.Instantiate(String entityName, EntityMode entityMode, Object id) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.StubHookDispatcher.IsTransient(System.Object)">
            <summary>设置 HookDispatcher.IsTransient(Object entity) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Fakes.StubHookDispatcher.IsTransientObject">
            <summary>设置 HookDispatcher.IsTransient(Object entity) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.StubHookDispatcher.OnCollectionRecreate(System.Object,System.Object)">
            <summary>设置 EmptyInterceptor.OnCollectionRecreate(Object collection, Object key) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Fakes.StubHookDispatcher.OnCollectionRecreateObjectObject">
            <summary>设置 EmptyInterceptor.OnCollectionRecreate(Object collection, Object key) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.StubHookDispatcher.OnCollectionRemove(System.Object,System.Object)">
            <summary>设置 EmptyInterceptor.OnCollectionRemove(Object collection, Object key) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Fakes.StubHookDispatcher.OnCollectionRemoveObjectObject">
            <summary>设置 EmptyInterceptor.OnCollectionRemove(Object collection, Object key) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.StubHookDispatcher.OnCollectionUpdate(System.Object,System.Object)">
            <summary>设置 EmptyInterceptor.OnCollectionUpdate(Object collection, Object key) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Fakes.StubHookDispatcher.OnCollectionUpdateObjectObject">
            <summary>设置 EmptyInterceptor.OnCollectionUpdate(Object collection, Object key) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.StubHookDispatcher.OnDelete(System.Object,System.Object,System.Object[],System.String[],NHibernate.Type.IType[])">
            <summary>设置 HookDispatcher.OnDelete(Object entity, Object id, Object[] state, String[] propertyNames, IType[] types) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Fakes.StubHookDispatcher.OnDeleteObjectObjectObjectArrayStringArrayITypeArray">
            <summary>设置 HookDispatcher.OnDelete(Object entity, Object id, Object[] state, String[] propertyNames, IType[] types) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.StubHookDispatcher.OnFlushDirty(System.Object,System.Object,System.Object[],System.Object[],System.String[],NHibernate.Type.IType[])">
            <summary>设置 HookDispatcher.OnFlushDirty(Object entity, Object id, Object[] currentState, Object[] previousState, String[] propertyNames, IType[] types) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Fakes.StubHookDispatcher.OnFlushDirtyObjectObjectObjectArrayObjectArrayStringArrayITypeArray">
            <summary>设置 HookDispatcher.OnFlushDirty(Object entity, Object id, Object[] currentState, Object[] previousState, String[] propertyNames, IType[] types) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.StubHookDispatcher.OnLoad(System.Object,System.Object,System.Object[],System.String[],NHibernate.Type.IType[])">
            <summary>设置 HookDispatcher.OnLoad(Object entity, Object id, Object[] state, String[] propertyNames, IType[] types) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Fakes.StubHookDispatcher.OnLoadObjectObjectObjectArrayStringArrayITypeArray">
            <summary>设置 HookDispatcher.OnLoad(Object entity, Object id, Object[] state, String[] propertyNames, IType[] types) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.StubHookDispatcher.OnPrepareStatement(NHibernate.SqlCommand.SqlString)">
            <summary>设置 EmptyInterceptor.OnPrepareStatement(SqlString sql) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Fakes.StubHookDispatcher.OnPrepareStatementSqlString">
            <summary>设置 EmptyInterceptor.OnPrepareStatement(SqlString sql) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.StubHookDispatcher.OnSave(System.Object,System.Object,System.Object[],System.String[],NHibernate.Type.IType[])">
            <summary>设置 HookDispatcher.OnSave(Object entity, Object id, Object[] state, String[] propertyNames, IType[] types) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Fakes.StubHookDispatcher.OnSaveObjectObjectObjectArrayStringArrayITypeArray">
            <summary>设置 HookDispatcher.OnSave(Object entity, Object id, Object[] state, String[] propertyNames, IType[] types) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.StubHookDispatcher.PostFlush(System.Collections.ICollection)">
            <summary>设置 HookDispatcher.PostFlush(ICollection entities) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Fakes.StubHookDispatcher.PostFlushICollection">
            <summary>设置 HookDispatcher.PostFlush(ICollection entities) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.StubHookDispatcher.PreFlush(System.Collections.ICollection)">
            <summary>设置 HookDispatcher.PreFlush(ICollection entities) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Fakes.StubHookDispatcher.PreFlushICollection">
            <summary>设置 HookDispatcher.PreFlush(ICollection entities) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.StubHookDispatcher.SetSession(NHibernate.ISession)">
            <summary>设置 EmptyInterceptor.SetSession(ISession session) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Fakes.StubHookDispatcher.SetSessionISession">
            <summary>设置 EmptyInterceptor.SetSession(ISession session) 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.StubHookDispatcher.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.StubHookDispatcher.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.StubHookDispatcher.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Fakes.StubIConfigurationSource">
            <summary>Castle.ActiveRecord.Framework.IConfigurationSource 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.StubIConfigurationSource.#ctor">
            <summary>初始化 type StubIConfigurationSource 的新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.StubIConfigurationSource.car::Castle#ActiveRecord#Framework#IConfigurationSource#GetConfiguration(System.Type)">
            <summary>设置 IConfigurationSource.GetConfiguration(Type type) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Fakes.StubIConfigurationSource.DebugGet">
            <summary>设置 IConfigurationSource.get_Debug() 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Fakes.StubIConfigurationSource.DefaultFlushTypeGet">
            <summary>设置 IConfigurationSource.get_DefaultFlushType() 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Fakes.StubIConfigurationSource.GetConfigurationType">
            <summary>设置 IConfigurationSource.GetConfiguration(Type type) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Fakes.StubIConfigurationSource.IsLazyByDefaultGet">
            <summary>设置 IConfigurationSource.get_IsLazyByDefault() 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Fakes.StubIConfigurationSource.NamingStrategyImplementationGet">
            <summary>设置 IConfigurationSource.get_NamingStrategyImplementation() 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Fakes.StubIConfigurationSource.PluralizeTableNamesGet">
            <summary>设置 IConfigurationSource.get_PluralizeTableNames() 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Fakes.StubIConfigurationSource.SearchableGet">
            <summary>设置 IConfigurationSource.get_Searchable() 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Fakes.StubIConfigurationSource.SessionFactoryHolderImplementationGet">
            <summary>设置 IConfigurationSource.get_SessionFactoryHolderImplementation() 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Fakes.StubIConfigurationSource.ThreadScopeInfoImplementationGet">
            <summary>设置 IConfigurationSource.get_ThreadScopeInfoImplementation() 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Fakes.StubIConfigurationSource.VerifyModelsAgainstDBSchemaGet">
            <summary>设置 IConfigurationSource.get_VerifyModelsAgainstDBSchema() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.StubIConfigurationSource.car::Castle#ActiveRecord#Framework#IConfigurationSource#Debug">
            <summary>设置 IConfigurationSource.get_Debug() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.StubIConfigurationSource.car::Castle#ActiveRecord#Framework#IConfigurationSource#DefaultFlushType">
            <summary>设置 IConfigurationSource.get_DefaultFlushType() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.StubIConfigurationSource.car::Castle#ActiveRecord#Framework#IConfigurationSource#IsLazyByDefault">
            <summary>设置 IConfigurationSource.get_IsLazyByDefault() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.StubIConfigurationSource.car::Castle#ActiveRecord#Framework#IConfigurationSource#NamingStrategyImplementation">
            <summary>设置 IConfigurationSource.get_NamingStrategyImplementation() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.StubIConfigurationSource.car::Castle#ActiveRecord#Framework#IConfigurationSource#PluralizeTableNames">
            <summary>设置 IConfigurationSource.get_PluralizeTableNames() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.StubIConfigurationSource.car::Castle#ActiveRecord#Framework#IConfigurationSource#Searchable">
            <summary>设置 IConfigurationSource.get_Searchable() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.StubIConfigurationSource.car::Castle#ActiveRecord#Framework#IConfigurationSource#SessionFactoryHolderImplementation">
            <summary>设置 IConfigurationSource.get_SessionFactoryHolderImplementation() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.StubIConfigurationSource.car::Castle#ActiveRecord#Framework#IConfigurationSource#ThreadScopeInfoImplementation">
            <summary>设置 IConfigurationSource.get_ThreadScopeInfoImplementation() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.StubIConfigurationSource.car::Castle#ActiveRecord#Framework#IConfigurationSource#VerifyModelsAgainstDBSchema">
            <summary>设置 IConfigurationSource.get_VerifyModelsAgainstDBSchema() 的 stub</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Fakes.StubINHContributor">
            <summary>Castle.ActiveRecord.Framework.INHContributor 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.StubINHContributor.#ctor">
            <summary>初始化 type StubINHContributor 的新实例</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Fakes.StubINHContributor.AppliesToRootTypeGet">
            <summary>设置 INHContributor.get_AppliesToRootType() 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Fakes.StubINHContributor.AppliesToRootTypeSetPredicateOfType">
            <summary>设置 INHContributor.set_AppliesToRootType(Predicate`1&lt;Type&gt; value) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.StubINHContributor.AttachBackingFieldToAppliesToRootType">
            <summary>附加委托以将 StubINHContributor.AppliesToRootType 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.StubINHContributor.car::Castle#ActiveRecord#Framework#INHContributor#Contribute(NHibernate.Cfg.Configuration)">
            <summary>设置 INHContributor.Contribute(Configuration configuration) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Fakes.StubINHContributor.ContributeConfiguration">
            <summary>设置 INHContributor.Contribute(Configuration configuration) 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.StubINHContributor.car::Castle#ActiveRecord#Framework#INHContributor#AppliesToRootType">
            <summary>设置 INHContributor.get_AppliesToRootType() 的 stub</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Fakes.StubISessionFactoryHolder">
            <summary>Castle.ActiveRecord.Framework.ISessionFactoryHolder 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.StubISessionFactoryHolder.#ctor">
            <summary>初始化 type StubISessionFactoryHolder 的新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.StubISessionFactoryHolder.AttachBackingFieldToThreadScopeInfo">
            <summary>附加委托以将 StubISessionFactoryHolder.ThreadScopeInfo 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.StubISessionFactoryHolder.car::Castle#ActiveRecord#Framework#ISessionFactoryHolder#CreateSession(System.Type)">
            <summary>设置 ISessionFactoryHolder.CreateSession(Type type) 的 存根</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.StubISessionFactoryHolder.car::Castle#ActiveRecord#Framework#ISessionFactoryHolder#FailSession(NHibernate.ISession)">
            <summary>设置 ISessionFactoryHolder.FailSession(ISession session) 的 存根</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.StubISessionFactoryHolder.car::Castle#ActiveRecord#Framework#ISessionFactoryHolder#GetAllConfigurations">
            <summary>设置 ISessionFactoryHolder.GetAllConfigurations() 的 存根</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.StubISessionFactoryHolder.car::Castle#ActiveRecord#Framework#ISessionFactoryHolder#GetConfiguration(System.Type)">
            <summary>设置 ISessionFactoryHolder.GetConfiguration(Type type) 的 存根</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.StubISessionFactoryHolder.car::Castle#ActiveRecord#Framework#ISessionFactoryHolder#GetRootType(System.Type)">
            <summary>设置 ISessionFactoryHolder.GetRootType(Type type) 的 存根</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.StubISessionFactoryHolder.car::Castle#ActiveRecord#Framework#ISessionFactoryHolder#GetSessionFactories">
            <summary>设置 ISessionFactoryHolder.GetSessionFactories() 的 存根</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.StubISessionFactoryHolder.car::Castle#ActiveRecord#Framework#ISessionFactoryHolder#GetSessionFactory(System.Type)">
            <summary>设置 ISessionFactoryHolder.GetSessionFactory(Type type) 的 存根</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.StubISessionFactoryHolder.car::Castle#ActiveRecord#Framework#ISessionFactoryHolder#Register(System.Type,NHibernate.Cfg.Configuration)">
            <summary>设置 ISessionFactoryHolder.Register(Type rootType, Configuration cfg) 的 存根</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.StubISessionFactoryHolder.car::Castle#ActiveRecord#Framework#ISessionFactoryHolder#RegisterSessionFactory(NHibernate.ISessionFactory,System.Type)">
            <summary>设置 ISessionFactoryHolder.RegisterSessionFactory(ISessionFactory sessionFactory, Type baseType) 的 存根</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.StubISessionFactoryHolder.car::Castle#ActiveRecord#Framework#ISessionFactoryHolder#ReleaseSession(NHibernate.ISession)">
            <summary>设置 ISessionFactoryHolder.ReleaseSession(ISession session) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Fakes.StubISessionFactoryHolder.CreateSessionType">
            <summary>设置 ISessionFactoryHolder.CreateSession(Type type) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Fakes.StubISessionFactoryHolder.FailSessionISession">
            <summary>设置 ISessionFactoryHolder.FailSession(ISession session) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Fakes.StubISessionFactoryHolder.GetAllConfigurations">
            <summary>设置 ISessionFactoryHolder.GetAllConfigurations() 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Fakes.StubISessionFactoryHolder.GetConfigurationType">
            <summary>设置 ISessionFactoryHolder.GetConfiguration(Type type) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Fakes.StubISessionFactoryHolder.GetRootTypeType">
            <summary>设置 ISessionFactoryHolder.GetRootType(Type type) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Fakes.StubISessionFactoryHolder.GetSessionFactories">
            <summary>设置 ISessionFactoryHolder.GetSessionFactories() 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Fakes.StubISessionFactoryHolder.GetSessionFactoryType">
            <summary>设置 ISessionFactoryHolder.GetSessionFactory(Type type) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Fakes.StubISessionFactoryHolder.RegisterSessionFactoryISessionFactoryType">
            <summary>设置 ISessionFactoryHolder.RegisterSessionFactory(ISessionFactory sessionFactory, Type baseType) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Fakes.StubISessionFactoryHolder.RegisterTypeConfiguration">
            <summary>设置 ISessionFactoryHolder.Register(Type rootType, Configuration cfg) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Fakes.StubISessionFactoryHolder.ReleaseSessionISession">
            <summary>设置 ISessionFactoryHolder.ReleaseSession(ISession session) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Fakes.StubISessionFactoryHolder.ThreadScopeInfoGet">
            <summary>设置 ISessionFactoryHolder.get_ThreadScopeInfo() 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Fakes.StubISessionFactoryHolder.ThreadScopeInfoSetIThreadScopeInfo">
            <summary>设置 ISessionFactoryHolder.set_ThreadScopeInfo(IThreadScopeInfo value) 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.StubISessionFactoryHolder.car::Castle#ActiveRecord#Framework#ISessionFactoryHolder#ThreadScopeInfo">
            <summary>设置 ISessionFactoryHolder.get_ThreadScopeInfo() 的 stub</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Fakes.StubIThreadScopeInfo">
            <summary>Castle.ActiveRecord.Framework.IThreadScopeInfo 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.StubIThreadScopeInfo.#ctor">
            <summary>初始化 type StubIThreadScopeInfo 的新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.StubIThreadScopeInfo.car::Castle#ActiveRecord#Framework#IThreadScopeInfo#GetRegisteredScope">
            <summary>设置 IThreadScopeInfo.GetRegisteredScope() 的 存根</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.StubIThreadScopeInfo.car::Castle#ActiveRecord#Framework#IThreadScopeInfo#RegisterScope(Castle.ActiveRecord.ISessionScope)">
            <summary>设置 IThreadScopeInfo.RegisterScope(ISessionScope scope) 的 存根</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.StubIThreadScopeInfo.car::Castle#ActiveRecord#Framework#IThreadScopeInfo#UnRegisterScope(Castle.ActiveRecord.ISessionScope)">
            <summary>设置 IThreadScopeInfo.UnRegisterScope(ISessionScope scope) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Fakes.StubIThreadScopeInfo.CurrentStackGet">
            <summary>设置 IThreadScopeInfo.get_CurrentStack() 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Fakes.StubIThreadScopeInfo.GetRegisteredScope">
            <summary>设置 IThreadScopeInfo.GetRegisteredScope() 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Fakes.StubIThreadScopeInfo.HasInitializedScopeGet">
            <summary>设置 IThreadScopeInfo.get_HasInitializedScope() 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Fakes.StubIThreadScopeInfo.RegisterScopeISessionScope">
            <summary>设置 IThreadScopeInfo.RegisterScope(ISessionScope scope) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Fakes.StubIThreadScopeInfo.UnRegisterScopeISessionScope">
            <summary>设置 IThreadScopeInfo.UnRegisterScope(ISessionScope scope) 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.StubIThreadScopeInfo.car::Castle#ActiveRecord#Framework#IThreadScopeInfo#CurrentStack">
            <summary>设置 IThreadScopeInfo.get_CurrentStack() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.StubIThreadScopeInfo.car::Castle#ActiveRecord#Framework#IThreadScopeInfo#HasInitializedScope">
            <summary>设置 IThreadScopeInfo.get_HasInitializedScope() 的 stub</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Fakes.StubIValidationProvider">
            <summary>Castle.ActiveRecord.Framework.IValidationProvider 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.StubIValidationProvider.#ctor">
            <summary>初始化 type StubIValidationProvider 的新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.StubIValidationProvider.car::Castle#ActiveRecord#Framework#IValidationProvider#IsValid">
            <summary>设置 IValidationProvider.IsValid() 的 存根</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.StubIValidationProvider.car::Castle#ActiveRecord#Framework#IValidationProvider#IsValid(Castle.Components.Validator.RunWhen)">
            <summary>设置 IValidationProvider.IsValid(RunWhen runWhen) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Fakes.StubIValidationProvider.IsValid">
            <summary>设置 IValidationProvider.IsValid() 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Fakes.StubIValidationProvider.IsValidRunWhen">
            <summary>设置 IValidationProvider.IsValid(RunWhen runWhen) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Fakes.StubIValidationProvider.PropertiesValidationErrorMessagesGet">
            <summary>设置 IValidationProvider.get_PropertiesValidationErrorMessages() 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Fakes.StubIValidationProvider.ValidationErrorMessagesGet">
            <summary>设置 IValidationProvider.get_ValidationErrorMessages() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.StubIValidationProvider.car::Castle#ActiveRecord#Framework#IValidationProvider#PropertiesValidationErrorMessages">
            <summary>设置 IValidationProvider.get_PropertiesValidationErrorMessages() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.StubIValidationProvider.car::Castle#ActiveRecord#Framework#IValidationProvider#ValidationErrorMessages">
            <summary>设置 IValidationProvider.get_ValidationErrorMessages() 的 stub</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Fakes.StubIWebThreadScopeInfo">
            <summary>Castle.ActiveRecord.Framework.IWebThreadScopeInfo 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.StubIWebThreadScopeInfo.#ctor">
            <summary>初始化 type StubIWebThreadScopeInfo 的新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.StubIWebThreadScopeInfo.car::Castle#ActiveRecord#Framework#IThreadScopeInfo#GetRegisteredScope">
            <summary>设置 IThreadScopeInfo.GetRegisteredScope() 的 存根</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.StubIWebThreadScopeInfo.car::Castle#ActiveRecord#Framework#IThreadScopeInfo#RegisterScope(Castle.ActiveRecord.ISessionScope)">
            <summary>设置 IThreadScopeInfo.RegisterScope(ISessionScope scope) 的 存根</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.StubIWebThreadScopeInfo.car::Castle#ActiveRecord#Framework#IThreadScopeInfo#UnRegisterScope(Castle.ActiveRecord.ISessionScope)">
            <summary>设置 IThreadScopeInfo.UnRegisterScope(ISessionScope scope) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Fakes.StubIWebThreadScopeInfo.CurrentStackGet">
            <summary>设置 IThreadScopeInfo.get_CurrentStack() 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Fakes.StubIWebThreadScopeInfo.GetRegisteredScope">
            <summary>设置 IThreadScopeInfo.GetRegisteredScope() 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Fakes.StubIWebThreadScopeInfo.HasInitializedScopeGet">
            <summary>设置 IThreadScopeInfo.get_HasInitializedScope() 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Fakes.StubIWebThreadScopeInfo.RegisterScopeISessionScope">
            <summary>设置 IThreadScopeInfo.RegisterScope(ISessionScope scope) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Fakes.StubIWebThreadScopeInfo.UnRegisterScopeISessionScope">
            <summary>设置 IThreadScopeInfo.UnRegisterScope(ISessionScope scope) 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.StubIWebThreadScopeInfo.car::Castle#ActiveRecord#Framework#IThreadScopeInfo#CurrentStack">
            <summary>设置 IThreadScopeInfo.get_CurrentStack() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.StubIWebThreadScopeInfo.car::Castle#ActiveRecord#Framework#IThreadScopeInfo#HasInitializedScope">
            <summary>设置 IThreadScopeInfo.get_HasInitializedScope() 的 stub</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Fakes.StubInterceptorFactory">
            <summary>Castle.ActiveRecord.Framework.InterceptorFactory 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.StubInterceptorFactory.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.StubInterceptorFactory.InitializeStub">
            <summary>初始化 type StubInterceptorFactory 的新实例</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.StubInterceptorFactory.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.StubInterceptorFactory.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.StubInterceptorFactory.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Fakes.StubNHEventListeners">
            <summary>Castle.ActiveRecord.Framework.NHEventListeners 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.StubNHEventListeners.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.StubNHEventListeners.Contribute(NHibernate.Cfg.Configuration)">
            <summary>设置 NHEventListeners.Contribute(Configuration configuration) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Fakes.StubNHEventListeners.ContributeConfiguration">
            <summary>设置 NHEventListeners.Contribute(Configuration configuration) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.StubNHEventListeners.InitializeStub">
            <summary>初始化 type StubNHEventListeners 的新实例</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.StubNHEventListeners.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.StubNHEventListeners.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.StubNHEventListeners.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Fakes.StubNHSearchContributor">
            <summary>Castle.ActiveRecord.Framework.NHSearchContributor 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.StubNHSearchContributor.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.StubNHSearchContributor.Contribute(NHibernate.Cfg.Configuration)">
            <summary>设置 NHSearchContributor.Contribute(Configuration configuration) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Fakes.StubNHSearchContributor.ContributeConfiguration">
            <summary>设置 NHSearchContributor.Contribute(Configuration configuration) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.StubNHSearchContributor.InitializeStub">
            <summary>初始化 type StubNHSearchContributor 的新实例</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.StubNHSearchContributor.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.StubNHSearchContributor.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.StubNHSearchContributor.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Fakes.StubNotWrappedException">
            <summary>Castle.ActiveRecord.Framework.NotWrappedException 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.StubNotWrappedException.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.StubNotWrappedException.AttachBackingFieldToHelpLink">
            <summary>附加委托以将 StubNotWrappedException.HelpLink 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.StubNotWrappedException.AttachBackingFieldToSource">
            <summary>附加委托以将 StubNotWrappedException.Source 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Fakes.StubNotWrappedException.DataGet">
            <summary>设置 Exception.get_Data() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.StubNotWrappedException.GetBaseException">
            <summary>设置 Exception.GetBaseException() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Fakes.StubNotWrappedException.GetBaseException01">
            <summary>设置 Exception.GetBaseException() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.StubNotWrappedException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>设置 Exception.GetObjectData(SerializationInfo info, StreamingContext context) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Fakes.StubNotWrappedException.GetObjectDataSerializationInfoStreamingContext">
            <summary>设置 Exception.GetObjectData(SerializationInfo info, StreamingContext context) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Fakes.StubNotWrappedException.HelpLinkGet">
            <summary>设置 Exception.get_HelpLink() 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Fakes.StubNotWrappedException.HelpLinkSetString">
            <summary>设置 Exception.set_HelpLink(String value) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.StubNotWrappedException.InitializeStub">
            <summary>初始化 type StubNotWrappedException 的新实例</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Fakes.StubNotWrappedException.MessageGet">
            <summary>设置 Exception.get_Message() 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Fakes.StubNotWrappedException.SourceGet">
            <summary>设置 Exception.get_Source() 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Fakes.StubNotWrappedException.SourceSetString">
            <summary>设置 Exception.set_Source(String value) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Fakes.StubNotWrappedException.StackTraceGet">
            <summary>设置 Exception.get_StackTrace() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.StubNotWrappedException.ToString">
            <summary>设置 Exception.ToString() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Fakes.StubNotWrappedException.ToString01">
            <summary>设置 Exception.ToString() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.StubNotWrappedException.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.StubNotWrappedException.Data">
            <summary>设置 Exception.get_Data() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.StubNotWrappedException.HelpLink">
            <summary>设置 Exception.get_HelpLink() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.StubNotWrappedException.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.StubNotWrappedException.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.StubNotWrappedException.Message">
            <summary>设置 Exception.get_Message() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.StubNotWrappedException.Source">
            <summary>设置 Exception.get_Source() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.StubNotWrappedException.StackTrace">
            <summary>设置 Exception.get_StackTrace() 的 stub</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Fakes.StubSessionFactoryHolder">
            <summary>Castle.ActiveRecord.Framework.SessionFactoryHolder 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.StubSessionFactoryHolder.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.StubSessionFactoryHolder.InitializeStub">
            <summary>初始化 type StubSessionFactoryHolder 的新实例</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.StubSessionFactoryHolder.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.StubSessionFactoryHolder.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.StubSessionFactoryHolder.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Fakes.StubStatelessSessionWrapper">
            <summary>Castle.ActiveRecord.Framework.StatelessSessionWrapper 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.StubStatelessSessionWrapper.#ctor(NHibernate.IStatelessSession)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.StubStatelessSessionWrapper.InitializeStub">
            <summary>初始化 type StubStatelessSessionWrapper 的新实例</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.StubStatelessSessionWrapper.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.StubStatelessSessionWrapper.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.StubStatelessSessionWrapper.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Fakes.StubSupportingUtils">
            <summary>Castle.ActiveRecord.Framework.SupportingUtils 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.StubSupportingUtils.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.StubSupportingUtils.InitializeStub">
            <summary>初始化 type StubSupportingUtils 的新实例</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.StubSupportingUtils.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.StubSupportingUtils.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.StubSupportingUtils.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Fakes.StubTransactionException">
            <summary>Castle.ActiveRecord.Framework.TransactionException 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.StubTransactionException.#ctor(System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.StubTransactionException.#ctor(System.String,System.Exception)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.StubTransactionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.StubTransactionException.AttachBackingFieldToHelpLink">
            <summary>附加委托以将 StubTransactionException.HelpLink 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.StubTransactionException.AttachBackingFieldToSource">
            <summary>附加委托以将 StubTransactionException.Source 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Fakes.StubTransactionException.DataGet">
            <summary>设置 Exception.get_Data() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.StubTransactionException.GetBaseException">
            <summary>设置 Exception.GetBaseException() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Fakes.StubTransactionException.GetBaseException01">
            <summary>设置 Exception.GetBaseException() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.StubTransactionException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>设置 Exception.GetObjectData(SerializationInfo info, StreamingContext context) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Fakes.StubTransactionException.GetObjectDataSerializationInfoStreamingContext">
            <summary>设置 Exception.GetObjectData(SerializationInfo info, StreamingContext context) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Fakes.StubTransactionException.HelpLinkGet">
            <summary>设置 Exception.get_HelpLink() 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Fakes.StubTransactionException.HelpLinkSetString">
            <summary>设置 Exception.set_HelpLink(String value) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.StubTransactionException.InitializeStub">
            <summary>初始化 type StubTransactionException 的新实例</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Fakes.StubTransactionException.MessageGet">
            <summary>设置 Exception.get_Message() 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Fakes.StubTransactionException.SourceGet">
            <summary>设置 Exception.get_Source() 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Fakes.StubTransactionException.SourceSetString">
            <summary>设置 Exception.set_Source(String value) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Fakes.StubTransactionException.StackTraceGet">
            <summary>设置 Exception.get_StackTrace() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Fakes.StubTransactionException.ToString">
            <summary>设置 Exception.ToString() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Fakes.StubTransactionException.ToString01">
            <summary>设置 Exception.ToString() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.StubTransactionException.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.StubTransactionException.Data">
            <summary>设置 Exception.get_Data() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.StubTransactionException.HelpLink">
            <summary>设置 Exception.get_HelpLink() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.StubTransactionException.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.StubTransactionException.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.StubTransactionException.Message">
            <summary>设置 Exception.get_Message() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.StubTransactionException.Source">
            <summary>设置 Exception.get_Source() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Fakes.StubTransactionException.StackTrace">
            <summary>设置 Exception.get_StackTrace() 的 stub</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Internal.EventListener.Fakes.ShimEventListenerConfig">
            <summary>Castle.ActiveRecord.Framework.Internal.EventListener.EventListenerConfig 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.EventListener.Fakes.ShimEventListenerConfig.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.EventListener.Fakes.ShimEventListenerConfig.#ctor(Castle.ActiveRecord.Framework.Internal.EventListener.EventListenerConfig)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.EventListener.Fakes.ShimEventListenerConfig.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.EventListener.Fakes.ShimEventListenerConfig.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.EventListener.Fakes.ShimEventListenerConfig.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.EventListener.Fakes.ShimEventListenerConfig.ConstructorObject">
            <summary>设置 EventListenerConfig.EventListenerConfig(Object listenerInstance) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.EventListener.Fakes.ShimEventListenerConfig.ConstructorType">
            <summary>设置 EventListenerConfig.EventListenerConfig(Type listenerType) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.EventListener.Fakes.ShimEventListenerConfig.CreateSingletonInstance">
            <summary>设置 EventListenerConfig.CreateSingletonInstance() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.EventListener.Fakes.ShimEventListenerConfig.EqualsObject">
            <summary>设置 EventListenerConfig.Equals(Object obj) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.EventListener.Fakes.ShimEventListenerConfig.ExcludeGet">
            <summary>设置 EventListenerConfig.get_Exclude() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.EventListener.Fakes.ShimEventListenerConfig.ExcludeSetTypeArray">
            <summary>设置 EventListenerConfig.set_Exclude(Type[] value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.EventListener.Fakes.ShimEventListenerConfig.GetHashCode">
            <summary>设置 EventListenerConfig.GetHashCode() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.EventListener.Fakes.ShimEventListenerConfig.IgnoreGet">
            <summary>设置 EventListenerConfig.get_Ignore() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.EventListener.Fakes.ShimEventListenerConfig.IgnoreSetBoolean">
            <summary>设置 EventListenerConfig.set_Ignore(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.EventListener.Fakes.ShimEventListenerConfig.IncludeGet">
            <summary>设置 EventListenerConfig.get_Include() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.EventListener.Fakes.ShimEventListenerConfig.IncludeSetTypeArray">
            <summary>设置 EventListenerConfig.set_Include(Type[] value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.EventListener.Fakes.ShimEventListenerConfig.ListenerInstanceGet">
            <summary>设置 EventListenerConfig.get_ListenerInstance() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.EventListener.Fakes.ShimEventListenerConfig.ListenerInstanceSetObject">
            <summary>设置 EventListenerConfig.set_ListenerInstance(Object value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.EventListener.Fakes.ShimEventListenerConfig.ListenerTypeGet">
            <summary>设置 EventListenerConfig.get_ListenerType() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.EventListener.Fakes.ShimEventListenerConfig.ListenerTypeSetType">
            <summary>设置 EventListenerConfig.set_ListenerType(Type value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.EventListener.Fakes.ShimEventListenerConfig.ReplaceExistingGet">
            <summary>设置 EventListenerConfig.get_ReplaceExisting() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.EventListener.Fakes.ShimEventListenerConfig.ReplaceExistingSetBoolean">
            <summary>设置 EventListenerConfig.set_ReplaceExisting(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.EventListener.Fakes.ShimEventListenerConfig.SetSingletonInstanceObject">
            <summary>设置 EventListenerConfig.SetSingletonInstance(Object instance) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.EventListener.Fakes.ShimEventListenerConfig.SingletonGet">
            <summary>设置 EventListenerConfig.get_Singleton() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.EventListener.Fakes.ShimEventListenerConfig.SingletonSetBoolean">
            <summary>设置 EventListenerConfig.set_Singleton(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.EventListener.Fakes.ShimEventListenerConfig.SkipEventGet">
            <summary>设置 EventListenerConfig.get_SkipEvent() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.EventListener.Fakes.ShimEventListenerConfig.SkipEventSetTypeArray">
            <summary>设置 EventListenerConfig.set_SkipEvent(Type[] value) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Internal.EventListener.Fakes.ShimEventListenerConfig.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.EventListener.Fakes.ShimEventListenerConfig.AllInstances.CreateSingletonInstance">
            <summary>设置 EventListenerConfig.CreateSingletonInstance() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.EventListener.Fakes.ShimEventListenerConfig.AllInstances.EqualsObject">
            <summary>设置 EventListenerConfig.Equals(Object obj) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.EventListener.Fakes.ShimEventListenerConfig.AllInstances.ExcludeGet">
            <summary>设置 EventListenerConfig.get_Exclude() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.EventListener.Fakes.ShimEventListenerConfig.AllInstances.ExcludeSetTypeArray">
            <summary>设置 EventListenerConfig.set_Exclude(Type[] value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.EventListener.Fakes.ShimEventListenerConfig.AllInstances.GetHashCode01">
            <summary>设置 EventListenerConfig.GetHashCode() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.EventListener.Fakes.ShimEventListenerConfig.AllInstances.IgnoreGet">
            <summary>设置 EventListenerConfig.get_Ignore() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.EventListener.Fakes.ShimEventListenerConfig.AllInstances.IgnoreSetBoolean">
            <summary>设置 EventListenerConfig.set_Ignore(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.EventListener.Fakes.ShimEventListenerConfig.AllInstances.IncludeGet">
            <summary>设置 EventListenerConfig.get_Include() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.EventListener.Fakes.ShimEventListenerConfig.AllInstances.IncludeSetTypeArray">
            <summary>设置 EventListenerConfig.set_Include(Type[] value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.EventListener.Fakes.ShimEventListenerConfig.AllInstances.ListenerInstanceGet">
            <summary>设置 EventListenerConfig.get_ListenerInstance() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.EventListener.Fakes.ShimEventListenerConfig.AllInstances.ListenerInstanceSetObject">
            <summary>设置 EventListenerConfig.set_ListenerInstance(Object value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.EventListener.Fakes.ShimEventListenerConfig.AllInstances.ListenerTypeGet">
            <summary>设置 EventListenerConfig.get_ListenerType() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.EventListener.Fakes.ShimEventListenerConfig.AllInstances.ListenerTypeSetType">
            <summary>设置 EventListenerConfig.set_ListenerType(Type value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.EventListener.Fakes.ShimEventListenerConfig.AllInstances.ReplaceExistingGet">
            <summary>设置 EventListenerConfig.get_ReplaceExisting() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.EventListener.Fakes.ShimEventListenerConfig.AllInstances.ReplaceExistingSetBoolean">
            <summary>设置 EventListenerConfig.set_ReplaceExisting(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.EventListener.Fakes.ShimEventListenerConfig.AllInstances.SetSingletonInstanceObject">
            <summary>设置 EventListenerConfig.SetSingletonInstance(Object instance) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.EventListener.Fakes.ShimEventListenerConfig.AllInstances.SingletonGet">
            <summary>设置 EventListenerConfig.get_Singleton() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.EventListener.Fakes.ShimEventListenerConfig.AllInstances.SingletonSetBoolean">
            <summary>设置 EventListenerConfig.set_Singleton(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.EventListener.Fakes.ShimEventListenerConfig.AllInstances.SkipEventGet">
            <summary>设置 EventListenerConfig.get_SkipEvent() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.EventListener.Fakes.ShimEventListenerConfig.AllInstances.SkipEventSetTypeArray">
            <summary>设置 EventListenerConfig.set_SkipEvent(Type[] value) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Internal.EventListener.Fakes.ShimEventListenerContributor">
            <summary>Castle.ActiveRecord.Framework.Internal.EventListener.EventListenerContributor 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.EventListener.Fakes.ShimEventListenerContributor.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.EventListener.Fakes.ShimEventListenerContributor.#ctor(Castle.ActiveRecord.Framework.Internal.EventListener.EventListenerContributor)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.EventListener.Fakes.ShimEventListenerContributor.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.EventListener.Fakes.ShimEventListenerContributor.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.EventListener.Fakes.ShimEventListenerContributor.Bind(Castle.ActiveRecord.Framework.INHContributor)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.EventListener.Fakes.ShimEventListenerContributor.AddEventListenerConfig">
            <summary>设置 EventListenerContributor.Add(EventListenerConfig config) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.EventListener.Fakes.ShimEventListenerContributor.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.EventListener.Fakes.ShimEventListenerContributor.CollectListenersType">
            <summary>设置 EventListenerContributor.CollectListeners(Type type) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.EventListener.Fakes.ShimEventListenerContributor.Constructor">
            <summary>设置 EventListenerContributor.EventListenerContributor() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.EventListener.Fakes.ShimEventListenerContributor.ContributeConfiguration">
            <summary>设置 EventListenerContributor.Contribute(Configuration configuration) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.EventListener.Fakes.ShimEventListenerContributor.GetEventTypesType">
            <summary>设置 EventListenerContributor.GetEventTypes(Type listenerType) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.EventListener.Fakes.ShimEventListenerContributor.GetExistingListenersConfigurationType">
            <summary>设置 EventListenerContributor.GetExistingListeners(Configuration configuration, Type eventType) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.EventListener.Fakes.ShimEventListenerContributor.GetInstanceEventListenerConfig">
            <summary>设置 EventListenerContributor.GetInstance(EventListenerConfig config) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.EventListener.Fakes.ShimEventListenerContributor.GetType">
            <summary>设置 EventListenerContributor.Get(Type listenerType) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.EventListener.Fakes.ShimEventListenerContributor.RemoveType">
            <summary>设置 EventListenerContributor.Remove(Type listenerType) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.EventListener.Fakes.ShimEventListenerContributor.SetListenersConfigurationTypeArray">
            <summary>设置 EventListenerContributor.SetListeners(Configuration configuration, Type eventType, Array listenersToSet) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.EventListener.Fakes.ShimEventListenerContributor.StaticConstructor">
            <summary>设置 EventListenerContributor.EventListenerContributor() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.EventListener.Fakes.ShimEventListenerContributor._CollectListenersb__5Type">
            <summary>设置 EventListenerContributor.&lt;CollectListeners&gt;b__5(Type t) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.EventListener.Fakes.ShimEventListenerContributor._CollectListenersb__6Type">
            <summary>设置 EventListenerContributor.&lt;CollectListeners&gt;b__6(Type t) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.EventListener.Fakes.ShimEventListenerContributor._Contributeb__0EventListenerConfig">
            <summary>设置 EventListenerContributor.&lt;Contribute&gt;b__0(EventListenerConfig config) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.EventListener.Fakes.ShimEventListenerContributor._Contributeb__1EventListenerConfig">
            <summary>设置 EventListenerContributor.&lt;Contribute&gt;b__1(EventListenerConfig config) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.EventListener.Fakes.ShimEventListenerContributor._GetEventTypesb__eType">
            <summary>设置 EventListenerContributor.&lt;GetEventTypes&gt;b__e(Type type) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.EventListener.Fakes.ShimEventListenerContributor._ctorb__cType">
            <summary>设置 EventListenerContributor.&lt;.ctor&gt;b__c(Type rootType) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Internal.EventListener.Fakes.ShimEventListenerContributor.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.EventListener.Fakes.ShimEventListenerContributor.AllInstances.AddEventListenerConfig">
            <summary>设置 EventListenerContributor.Add(EventListenerConfig config) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.EventListener.Fakes.ShimEventListenerContributor.AllInstances.CollectListenersType">
            <summary>设置 EventListenerContributor.CollectListeners(Type type) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.EventListener.Fakes.ShimEventListenerContributor.AllInstances.ContributeConfiguration">
            <summary>设置 EventListenerContributor.Contribute(Configuration configuration) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.EventListener.Fakes.ShimEventListenerContributor.AllInstances.GetType01">
            <summary>设置 EventListenerContributor.Get(Type listenerType) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.EventListener.Fakes.ShimEventListenerContributor.AllInstances.RemoveType">
            <summary>设置 EventListenerContributor.Remove(Type listenerType) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.EventListener.Fakes.ShimEventListenerContributor.AllInstances._CollectListenersb__5Type">
            <summary>设置 EventListenerContributor.&lt;CollectListeners&gt;b__5(Type t) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.EventListener.Fakes.ShimEventListenerContributor.AllInstances._CollectListenersb__6Type">
            <summary>设置 EventListenerContributor.&lt;CollectListeners&gt;b__6(Type t) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.EventListener.Fakes.ShimEventListenerContributor.AllInstances._ctorb__cType">
            <summary>设置 EventListenerContributor.&lt;.ctor&gt;b__c(Type rootType) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Internal.EventListener.Fakes.StubEventListenerConfig">
            <summary>Castle.ActiveRecord.Framework.Internal.EventListener.EventListenerConfig 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.EventListener.Fakes.StubEventListenerConfig.#ctor(System.Object)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.EventListener.Fakes.StubEventListenerConfig.#ctor(System.Type)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.EventListener.Fakes.StubEventListenerConfig.Equals(System.Object)">
            <summary>设置 EventListenerConfig.Equals(Object obj) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Internal.EventListener.Fakes.StubEventListenerConfig.EqualsObject">
            <summary>设置 EventListenerConfig.Equals(Object obj) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.EventListener.Fakes.StubEventListenerConfig.GetHashCode">
            <summary>设置 EventListenerConfig.GetHashCode() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Internal.EventListener.Fakes.StubEventListenerConfig.GetHashCode01">
            <summary>设置 EventListenerConfig.GetHashCode() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.EventListener.Fakes.StubEventListenerConfig.InitializeStub">
            <summary>初始化 type StubEventListenerConfig 的新实例</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.EventListener.Fakes.StubEventListenerConfig.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.EventListener.Fakes.StubEventListenerConfig.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.EventListener.Fakes.StubEventListenerConfig.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Internal.EventListener.Fakes.StubEventListenerContributor">
            <summary>Castle.ActiveRecord.Framework.Internal.EventListener.EventListenerContributor 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.EventListener.Fakes.StubEventListenerContributor.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.EventListener.Fakes.StubEventListenerContributor.Contribute(NHibernate.Cfg.Configuration)">
            <summary>设置 EventListenerContributor.Contribute(Configuration configuration) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Internal.EventListener.Fakes.StubEventListenerContributor.ContributeConfiguration">
            <summary>设置 EventListenerContributor.Contribute(Configuration configuration) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.EventListener.Fakes.StubEventListenerContributor.InitializeStub">
            <summary>初始化 type StubEventListenerContributor 的新实例</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.EventListener.Fakes.StubEventListenerContributor.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.EventListener.Fakes.StubEventListenerContributor.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.EventListener.Fakes.StubEventListenerContributor.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Internal.Fakes.ShimARSchemaCreator">
            <summary>Castle.ActiveRecord.Framework.Internal.ARSchemaCreator 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimARSchemaCreator.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimARSchemaCreator.#ctor(Castle.ActiveRecord.Framework.Internal.ARSchemaCreator)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimARSchemaCreator.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimARSchemaCreator.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimARSchemaCreator.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimARSchemaCreator.ConstructorConfiguration">
            <summary>设置 ARSchemaCreator.ARSchemaCreator(Configuration config) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimARSchemaCreator.CreateConnectionProperties">
            <summary>设置 ARSchemaCreator.CreateConnectionProperties() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimARSchemaCreator.ExecuteScriptPartsIDbConnectionStringArray">
            <summary>设置 ARSchemaCreator.ExecuteScriptParts(IDbConnection connection, String[] parts) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimARSchemaCreator.ExecuteScriptStringArray">
            <summary>设置 ARSchemaCreator.ExecuteScript(String[] parts) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimARSchemaCreator.ExecuteString">
            <summary>设置 ARSchemaCreator.Execute(String scriptFileName) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimARSchemaCreator.NormalizeString">
            <summary>设置 ARSchemaCreator.Normalize(String fileName) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimARSchemaCreator.OpenFileAndStripContentsString">
            <summary>设置 ARSchemaCreator.OpenFileAndStripContents(String scriptFileName) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimARSchemaCreator.SplitStringStringString">
            <summary>设置 ARSchemaCreator.SplitString(String sqlScript, String split) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Internal.Fakes.ShimARSchemaCreator.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimARSchemaCreator.AllInstances.CreateConnectionProperties">
            <summary>设置 ARSchemaCreator.CreateConnectionProperties() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimARSchemaCreator.AllInstances.ExecuteScriptStringArray">
            <summary>设置 ARSchemaCreator.ExecuteScript(String[] parts) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimARSchemaCreator.AllInstances.ExecuteString">
            <summary>设置 ARSchemaCreator.Execute(String scriptFileName) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Internal.Fakes.ShimAbstractDepthFirstVisitor">
            <summary>Castle.ActiveRecord.Framework.Internal.AbstractDepthFirstVisitor 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimAbstractDepthFirstVisitor.#ctor(Castle.ActiveRecord.Framework.Internal.AbstractDepthFirstVisitor)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimAbstractDepthFirstVisitor.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimAbstractDepthFirstVisitor.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimAbstractDepthFirstVisitor.Bind(Castle.ActiveRecord.Framework.Internal.IVisitor)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimAbstractDepthFirstVisitor.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimAbstractDepthFirstVisitor.Constructor">
            <summary>设置 AbstractDepthFirstVisitor.AbstractDepthFirstVisitor() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimAbstractDepthFirstVisitor.GuessTypeTypeType">
            <summary>设置 AbstractDepthFirstVisitor.GuessType(Type type, Type propertyType) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimAbstractDepthFirstVisitor.VisitAnyAnyModel">
            <summary>设置 AbstractDepthFirstVisitor.VisitAny(AnyModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimAbstractDepthFirstVisitor.VisitBelongsToBelongsToModel">
            <summary>设置 AbstractDepthFirstVisitor.VisitBelongsTo(BelongsToModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimAbstractDepthFirstVisitor.VisitCollectionIDCollectionIDModel">
            <summary>设置 AbstractDepthFirstVisitor.VisitCollectionID(CollectionIDModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimAbstractDepthFirstVisitor.VisitCompositePrimaryKeyCompositeKeyModel">
            <summary>设置 AbstractDepthFirstVisitor.VisitCompositePrimaryKey(CompositeKeyModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimAbstractDepthFirstVisitor.VisitCompositeUserTypeCompositeUserTypeModel">
            <summary>设置 AbstractDepthFirstVisitor.VisitCompositeUserType(CompositeUserTypeModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimAbstractDepthFirstVisitor.VisitDependentObjectDependentObjectModel">
            <summary>设置 AbstractDepthFirstVisitor.VisitDependentObject(DependentObjectModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimAbstractDepthFirstVisitor.VisitFieldFieldModel">
            <summary>设置 AbstractDepthFirstVisitor.VisitField(FieldModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimAbstractDepthFirstVisitor.VisitHasAndBelongsToManyHasAndBelongsToManyModel">
            <summary>设置 AbstractDepthFirstVisitor.VisitHasAndBelongsToMany(HasAndBelongsToManyModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimAbstractDepthFirstVisitor.VisitHasManyHasManyModel">
            <summary>设置 AbstractDepthFirstVisitor.VisitHasMany(HasManyModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimAbstractDepthFirstVisitor.VisitHasManyToAnyConfigHasManyToAnyModelConfig">
            <summary>设置 AbstractDepthFirstVisitor.VisitHasManyToAnyConfig(Config hasManyToAnyConfigModel) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimAbstractDepthFirstVisitor.VisitHasManyToAnyHasManyToAnyModel">
            <summary>设置 AbstractDepthFirstVisitor.VisitHasManyToAny(HasManyToAnyModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimAbstractDepthFirstVisitor.VisitHiloHiloModel">
            <summary>设置 AbstractDepthFirstVisitor.VisitHilo(HiloModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimAbstractDepthFirstVisitor.VisitImportImportModel">
            <summary>设置 AbstractDepthFirstVisitor.VisitImport(ImportModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimAbstractDepthFirstVisitor.VisitJoinedTableJoinedTableModel">
            <summary>设置 AbstractDepthFirstVisitor.VisitJoinedTable(JoinedTableModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimAbstractDepthFirstVisitor.VisitKeyKeyModel">
            <summary>设置 AbstractDepthFirstVisitor.VisitKey(KeyModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimAbstractDepthFirstVisitor.VisitModelActiveRecordModel">
            <summary>设置 AbstractDepthFirstVisitor.VisitModel(ActiveRecordModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimAbstractDepthFirstVisitor.VisitNestedNestedModel">
            <summary>设置 AbstractDepthFirstVisitor.VisitNested(NestedModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimAbstractDepthFirstVisitor.VisitNestedParentReferenceNestedParentReferenceModel">
            <summary>设置 AbstractDepthFirstVisitor.VisitNestedParentReference(NestedParentReferenceModel referenceModel) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimAbstractDepthFirstVisitor.VisitNodeIVisitable">
            <summary>设置 AbstractDepthFirstVisitor.VisitNode(IVisitable visitable) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimAbstractDepthFirstVisitor.VisitNodesIEnumerable">
            <summary>设置 AbstractDepthFirstVisitor.VisitNodes(IEnumerable nodes) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimAbstractDepthFirstVisitor.VisitOneToOneOneToOneModel">
            <summary>设置 AbstractDepthFirstVisitor.VisitOneToOne(OneToOneModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimAbstractDepthFirstVisitor.VisitPrimaryKeyPrimaryKeyModel">
            <summary>设置 AbstractDepthFirstVisitor.VisitPrimaryKey(PrimaryKeyModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimAbstractDepthFirstVisitor.VisitPropertyPropertyModel">
            <summary>设置 AbstractDepthFirstVisitor.VisitProperty(PropertyModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimAbstractDepthFirstVisitor.VisitTimestampTimestampModel">
            <summary>设置 AbstractDepthFirstVisitor.VisitTimestamp(TimestampModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimAbstractDepthFirstVisitor.VisitVersionVersionModel">
            <summary>设置 AbstractDepthFirstVisitor.VisitVersion(VersionModel model) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Internal.Fakes.ShimAbstractDepthFirstVisitor.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimAbstractDepthFirstVisitor.AllInstances.VisitAnyAnyModel">
            <summary>设置 AbstractDepthFirstVisitor.VisitAny(AnyModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimAbstractDepthFirstVisitor.AllInstances.VisitBelongsToBelongsToModel">
            <summary>设置 AbstractDepthFirstVisitor.VisitBelongsTo(BelongsToModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimAbstractDepthFirstVisitor.AllInstances.VisitCollectionIDCollectionIDModel">
            <summary>设置 AbstractDepthFirstVisitor.VisitCollectionID(CollectionIDModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimAbstractDepthFirstVisitor.AllInstances.VisitCompositePrimaryKeyCompositeKeyModel">
            <summary>设置 AbstractDepthFirstVisitor.VisitCompositePrimaryKey(CompositeKeyModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimAbstractDepthFirstVisitor.AllInstances.VisitCompositeUserTypeCompositeUserTypeModel">
            <summary>设置 AbstractDepthFirstVisitor.VisitCompositeUserType(CompositeUserTypeModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimAbstractDepthFirstVisitor.AllInstances.VisitDependentObjectDependentObjectModel">
            <summary>设置 AbstractDepthFirstVisitor.VisitDependentObject(DependentObjectModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimAbstractDepthFirstVisitor.AllInstances.VisitFieldFieldModel">
            <summary>设置 AbstractDepthFirstVisitor.VisitField(FieldModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimAbstractDepthFirstVisitor.AllInstances.VisitHasAndBelongsToManyHasAndBelongsToManyModel">
            <summary>设置 AbstractDepthFirstVisitor.VisitHasAndBelongsToMany(HasAndBelongsToManyModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimAbstractDepthFirstVisitor.AllInstances.VisitHasManyHasManyModel">
            <summary>设置 AbstractDepthFirstVisitor.VisitHasMany(HasManyModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimAbstractDepthFirstVisitor.AllInstances.VisitHasManyToAnyConfigHasManyToAnyModelConfig">
            <summary>设置 AbstractDepthFirstVisitor.VisitHasManyToAnyConfig(Config hasManyToAnyConfigModel) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimAbstractDepthFirstVisitor.AllInstances.VisitHasManyToAnyHasManyToAnyModel">
            <summary>设置 AbstractDepthFirstVisitor.VisitHasManyToAny(HasManyToAnyModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimAbstractDepthFirstVisitor.AllInstances.VisitHiloHiloModel">
            <summary>设置 AbstractDepthFirstVisitor.VisitHilo(HiloModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimAbstractDepthFirstVisitor.AllInstances.VisitImportImportModel">
            <summary>设置 AbstractDepthFirstVisitor.VisitImport(ImportModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimAbstractDepthFirstVisitor.AllInstances.VisitJoinedTableJoinedTableModel">
            <summary>设置 AbstractDepthFirstVisitor.VisitJoinedTable(JoinedTableModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimAbstractDepthFirstVisitor.AllInstances.VisitKeyKeyModel">
            <summary>设置 AbstractDepthFirstVisitor.VisitKey(KeyModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimAbstractDepthFirstVisitor.AllInstances.VisitModelActiveRecordModel">
            <summary>设置 AbstractDepthFirstVisitor.VisitModel(ActiveRecordModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimAbstractDepthFirstVisitor.AllInstances.VisitNestedNestedModel">
            <summary>设置 AbstractDepthFirstVisitor.VisitNested(NestedModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimAbstractDepthFirstVisitor.AllInstances.VisitNestedParentReferenceNestedParentReferenceModel">
            <summary>设置 AbstractDepthFirstVisitor.VisitNestedParentReference(NestedParentReferenceModel referenceModel) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimAbstractDepthFirstVisitor.AllInstances.VisitNodeIVisitable">
            <summary>设置 AbstractDepthFirstVisitor.VisitNode(IVisitable visitable) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimAbstractDepthFirstVisitor.AllInstances.VisitNodesIEnumerable">
            <summary>设置 AbstractDepthFirstVisitor.VisitNodes(IEnumerable nodes) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimAbstractDepthFirstVisitor.AllInstances.VisitOneToOneOneToOneModel">
            <summary>设置 AbstractDepthFirstVisitor.VisitOneToOne(OneToOneModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimAbstractDepthFirstVisitor.AllInstances.VisitPrimaryKeyPrimaryKeyModel">
            <summary>设置 AbstractDepthFirstVisitor.VisitPrimaryKey(PrimaryKeyModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimAbstractDepthFirstVisitor.AllInstances.VisitPropertyPropertyModel">
            <summary>设置 AbstractDepthFirstVisitor.VisitProperty(PropertyModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimAbstractDepthFirstVisitor.AllInstances.VisitTimestampTimestampModel">
            <summary>设置 AbstractDepthFirstVisitor.VisitTimestamp(TimestampModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimAbstractDepthFirstVisitor.AllInstances.VisitVersionVersionModel">
            <summary>设置 AbstractDepthFirstVisitor.VisitVersion(VersionModel model) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModel">
            <summary>Castle.ActiveRecord.Framework.Internal.ActiveRecordModel 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModel.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModel.#ctor(Castle.ActiveRecord.Framework.Internal.ActiveRecordModel)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModel.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModel.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModel.Bind(Castle.ActiveRecord.Framework.Internal.IVisitable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModel.AcceptIVisitor">
            <summary>设置 ActiveRecordModel.Accept(IVisitor visitor) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModel.ActiveRecordAttGet">
            <summary>设置 ActiveRecordModel.get_ActiveRecordAtt() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModel.ActiveRecordAttSetActiveRecordAttribute">
            <summary>设置 ActiveRecordModel.set_ActiveRecordAtt(ActiveRecordAttribute value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModel.AnysGet">
            <summary>设置 ActiveRecordModel.get_Anys() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModel.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModel.BelongsToDictionaryGet">
            <summary>设置 ActiveRecordModel.get_BelongsToDictionary() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModel.BelongsToGet">
            <summary>设置 ActiveRecordModel.get_BelongsTo() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModel.ClassesGet">
            <summary>设置 ActiveRecordModel.get_Classes() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModel.CollectionIDsGet">
            <summary>设置 ActiveRecordModel.get_CollectionIDs() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModel.ComponentParentGet">
            <summary>设置 ActiveRecordModel.get_ComponentParent() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModel.ComponentsGet">
            <summary>设置 ActiveRecordModel.get_Components() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModel.CompositeKeyGet">
            <summary>设置 ActiveRecordModel.get_CompositeKey() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModel.CompositeKeySetCompositeKeyModel">
            <summary>设置 ActiveRecordModel.set_CompositeKey(CompositeKeyModel value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModel.CompositeUserTypeGet">
            <summary>设置 ActiveRecordModel.get_CompositeUserType() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModel.ConstructorType">
            <summary>设置 ActiveRecordModel.ActiveRecordModel(Type type) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModel.ExtendedPropertiesGet">
            <summary>设置 ActiveRecordModel.get_ExtendedProperties() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModel.FieldsGet">
            <summary>设置 ActiveRecordModel.get_Fields() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModel.GetModelType">
            <summary>设置 ActiveRecordModel.GetModel(Type arType) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModel.GetModels">
            <summary>设置 ActiveRecordModel.GetModels() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModel.GetNonProxyType">
            <summary>设置 ActiveRecordModel.GetNonProxy(Type type) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModel.HasAndBelongsToManyDictionaryGet">
            <summary>设置 ActiveRecordModel.get_HasAndBelongsToManyDictionary() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModel.HasAndBelongsToManyGet">
            <summary>设置 ActiveRecordModel.get_HasAndBelongsToMany() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModel.HasManyDictionaryGet">
            <summary>设置 ActiveRecordModel.get_HasManyDictionary() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModel.HasManyGet">
            <summary>设置 ActiveRecordModel.get_HasMany() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModel.HasManyToAnyDictionaryGet">
            <summary>设置 ActiveRecordModel.get_HasManyToAnyDictionary() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModel.HasManyToAnyGet">
            <summary>设置 ActiveRecordModel.get_HasManyToAny() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModel.HilosGet">
            <summary>设置 ActiveRecordModel.get_Hilos() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModel.ImportsGet">
            <summary>设置 ActiveRecordModel.get_Imports() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModel.IsDiscriminatorBaseGet">
            <summary>设置 ActiveRecordModel.get_IsDiscriminatorBase() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModel.IsDiscriminatorBaseSetBoolean">
            <summary>设置 ActiveRecordModel.set_IsDiscriminatorBase(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModel.IsDiscriminatorSubClassGet">
            <summary>设置 ActiveRecordModel.get_IsDiscriminatorSubClass() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModel.IsDiscriminatorSubClassSetBoolean">
            <summary>设置 ActiveRecordModel.set_IsDiscriminatorSubClass(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModel.IsJoinedSubClassBaseGet">
            <summary>设置 ActiveRecordModel.get_IsJoinedSubClassBase() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModel.IsJoinedSubClassBaseSetBoolean">
            <summary>设置 ActiveRecordModel.set_IsJoinedSubClassBase(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModel.IsJoinedSubClassGet">
            <summary>设置 ActiveRecordModel.get_IsJoinedSubClass() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModel.IsJoinedSubClassSetBoolean">
            <summary>设置 ActiveRecordModel.set_IsJoinedSubClass(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModel.IsNestedCompositeTypeGet">
            <summary>设置 ActiveRecordModel.get_IsNestedCompositeType() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModel.IsNestedCompositeTypeSetBoolean">
            <summary>设置 ActiveRecordModel.set_IsNestedCompositeType(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModel.IsNestedTypeGet">
            <summary>设置 ActiveRecordModel.get_IsNestedType() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModel.IsNestedTypeSetBoolean">
            <summary>设置 ActiveRecordModel.set_IsNestedType(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModel.JoinedClassesGet">
            <summary>设置 ActiveRecordModel.get_JoinedClasses() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModel.JoinedTablesGet">
            <summary>设置 ActiveRecordModel.get_JoinedTables() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModel.KeyGet">
            <summary>设置 ActiveRecordModel.get_Key() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModel.KeySetKeyModel">
            <summary>设置 ActiveRecordModel.set_Key(KeyModel value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModel.NotMappedPropertiesGet">
            <summary>设置 ActiveRecordModel.get_NotMappedProperties() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModel.OneToOnesGet">
            <summary>设置 ActiveRecordModel.get_OneToOnes() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModel.ParentGet">
            <summary>设置 ActiveRecordModel.get_Parent() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModel.ParentNestedGet">
            <summary>设置 ActiveRecordModel.get_ParentNested() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModel.ParentNestedSetNestedModel">
            <summary>设置 ActiveRecordModel.set_ParentNested(NestedModel value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModel.ParentSetActiveRecordModel">
            <summary>设置 ActiveRecordModel.set_Parent(ActiveRecordModel value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModel.PrimaryKeyGet">
            <summary>设置 ActiveRecordModel.get_PrimaryKey() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModel.PrimaryKeySetPrimaryKeyModel">
            <summary>设置 ActiveRecordModel.set_PrimaryKey(PrimaryKeyModel value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModel.PropertiesGet">
            <summary>设置 ActiveRecordModel.get_Properties() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModel.PropertyDictionaryGet">
            <summary>设置 ActiveRecordModel.get_PropertyDictionary() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModel.RegisterTypeActiveRecordModel">
            <summary>设置 ActiveRecordModel.Register(Type arType, ActiveRecordModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModel.StaticConstructor">
            <summary>设置 ActiveRecordModel.ActiveRecordModel() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModel.TimestampGet">
            <summary>设置 ActiveRecordModel.get_Timestamp() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModel.TimestampSetTimestampModel">
            <summary>设置 ActiveRecordModel.set_Timestamp(TimestampModel value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModel.TypeGet">
            <summary>设置 ActiveRecordModel.get_Type() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModel.UseAutoImportGet">
            <summary>设置 ActiveRecordModel.get_UseAutoImport() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModel.ValidatorsGet">
            <summary>设置 ActiveRecordModel.get_Validators() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModel.VersionGet">
            <summary>设置 ActiveRecordModel.get_Version() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModel.VersionSetVersionModel">
            <summary>设置 ActiveRecordModel.set_Version(VersionModel value) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModel.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModel.AllInstances.AcceptIVisitor">
            <summary>设置 ActiveRecordModel.Accept(IVisitor visitor) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModel.AllInstances.ActiveRecordAttGet">
            <summary>设置 ActiveRecordModel.get_ActiveRecordAtt() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModel.AllInstances.ActiveRecordAttSetActiveRecordAttribute">
            <summary>设置 ActiveRecordModel.set_ActiveRecordAtt(ActiveRecordAttribute value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModel.AllInstances.AnysGet">
            <summary>设置 ActiveRecordModel.get_Anys() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModel.AllInstances.BelongsToDictionaryGet">
            <summary>设置 ActiveRecordModel.get_BelongsToDictionary() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModel.AllInstances.BelongsToGet">
            <summary>设置 ActiveRecordModel.get_BelongsTo() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModel.AllInstances.ClassesGet">
            <summary>设置 ActiveRecordModel.get_Classes() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModel.AllInstances.CollectionIDsGet">
            <summary>设置 ActiveRecordModel.get_CollectionIDs() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModel.AllInstances.ComponentParentGet">
            <summary>设置 ActiveRecordModel.get_ComponentParent() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModel.AllInstances.ComponentsGet">
            <summary>设置 ActiveRecordModel.get_Components() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModel.AllInstances.CompositeKeyGet">
            <summary>设置 ActiveRecordModel.get_CompositeKey() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModel.AllInstances.CompositeKeySetCompositeKeyModel">
            <summary>设置 ActiveRecordModel.set_CompositeKey(CompositeKeyModel value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModel.AllInstances.CompositeUserTypeGet">
            <summary>设置 ActiveRecordModel.get_CompositeUserType() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModel.AllInstances.ExtendedPropertiesGet">
            <summary>设置 ActiveRecordModel.get_ExtendedProperties() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModel.AllInstances.FieldsGet">
            <summary>设置 ActiveRecordModel.get_Fields() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModel.AllInstances.HasAndBelongsToManyDictionaryGet">
            <summary>设置 ActiveRecordModel.get_HasAndBelongsToManyDictionary() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModel.AllInstances.HasAndBelongsToManyGet">
            <summary>设置 ActiveRecordModel.get_HasAndBelongsToMany() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModel.AllInstances.HasManyDictionaryGet">
            <summary>设置 ActiveRecordModel.get_HasManyDictionary() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModel.AllInstances.HasManyGet">
            <summary>设置 ActiveRecordModel.get_HasMany() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModel.AllInstances.HasManyToAnyDictionaryGet">
            <summary>设置 ActiveRecordModel.get_HasManyToAnyDictionary() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModel.AllInstances.HasManyToAnyGet">
            <summary>设置 ActiveRecordModel.get_HasManyToAny() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModel.AllInstances.HilosGet">
            <summary>设置 ActiveRecordModel.get_Hilos() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModel.AllInstances.ImportsGet">
            <summary>设置 ActiveRecordModel.get_Imports() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModel.AllInstances.IsDiscriminatorBaseGet">
            <summary>设置 ActiveRecordModel.get_IsDiscriminatorBase() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModel.AllInstances.IsDiscriminatorBaseSetBoolean">
            <summary>设置 ActiveRecordModel.set_IsDiscriminatorBase(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModel.AllInstances.IsDiscriminatorSubClassGet">
            <summary>设置 ActiveRecordModel.get_IsDiscriminatorSubClass() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModel.AllInstances.IsDiscriminatorSubClassSetBoolean">
            <summary>设置 ActiveRecordModel.set_IsDiscriminatorSubClass(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModel.AllInstances.IsJoinedSubClassBaseGet">
            <summary>设置 ActiveRecordModel.get_IsJoinedSubClassBase() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModel.AllInstances.IsJoinedSubClassBaseSetBoolean">
            <summary>设置 ActiveRecordModel.set_IsJoinedSubClassBase(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModel.AllInstances.IsJoinedSubClassGet">
            <summary>设置 ActiveRecordModel.get_IsJoinedSubClass() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModel.AllInstances.IsJoinedSubClassSetBoolean">
            <summary>设置 ActiveRecordModel.set_IsJoinedSubClass(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModel.AllInstances.IsNestedCompositeTypeGet">
            <summary>设置 ActiveRecordModel.get_IsNestedCompositeType() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModel.AllInstances.IsNestedCompositeTypeSetBoolean">
            <summary>设置 ActiveRecordModel.set_IsNestedCompositeType(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModel.AllInstances.IsNestedTypeGet">
            <summary>设置 ActiveRecordModel.get_IsNestedType() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModel.AllInstances.IsNestedTypeSetBoolean">
            <summary>设置 ActiveRecordModel.set_IsNestedType(Boolean value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModel.AllInstances.JoinedClassesGet">
            <summary>设置 ActiveRecordModel.get_JoinedClasses() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModel.AllInstances.JoinedTablesGet">
            <summary>设置 ActiveRecordModel.get_JoinedTables() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModel.AllInstances.KeyGet">
            <summary>设置 ActiveRecordModel.get_Key() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModel.AllInstances.KeySetKeyModel">
            <summary>设置 ActiveRecordModel.set_Key(KeyModel value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModel.AllInstances.NotMappedPropertiesGet">
            <summary>设置 ActiveRecordModel.get_NotMappedProperties() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModel.AllInstances.OneToOnesGet">
            <summary>设置 ActiveRecordModel.get_OneToOnes() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModel.AllInstances.ParentGet">
            <summary>设置 ActiveRecordModel.get_Parent() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModel.AllInstances.ParentNestedGet">
            <summary>设置 ActiveRecordModel.get_ParentNested() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModel.AllInstances.ParentNestedSetNestedModel">
            <summary>设置 ActiveRecordModel.set_ParentNested(NestedModel value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModel.AllInstances.ParentSetActiveRecordModel">
            <summary>设置 ActiveRecordModel.set_Parent(ActiveRecordModel value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModel.AllInstances.PrimaryKeyGet">
            <summary>设置 ActiveRecordModel.get_PrimaryKey() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModel.AllInstances.PrimaryKeySetPrimaryKeyModel">
            <summary>设置 ActiveRecordModel.set_PrimaryKey(PrimaryKeyModel value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModel.AllInstances.PropertiesGet">
            <summary>设置 ActiveRecordModel.get_Properties() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModel.AllInstances.PropertyDictionaryGet">
            <summary>设置 ActiveRecordModel.get_PropertyDictionary() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModel.AllInstances.TimestampGet">
            <summary>设置 ActiveRecordModel.get_Timestamp() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModel.AllInstances.TimestampSetTimestampModel">
            <summary>设置 ActiveRecordModel.set_Timestamp(TimestampModel value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModel.AllInstances.TypeGet">
            <summary>设置 ActiveRecordModel.get_Type() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModel.AllInstances.UseAutoImportGet">
            <summary>设置 ActiveRecordModel.get_UseAutoImport() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModel.AllInstances.ValidatorsGet">
            <summary>设置 ActiveRecordModel.get_Validators() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModel.AllInstances.VersionGet">
            <summary>设置 ActiveRecordModel.get_Version() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModel.AllInstances.VersionSetVersionModel">
            <summary>设置 ActiveRecordModel.set_Version(VersionModel value) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModelBuilder">
            <summary>Castle.ActiveRecord.Framework.Internal.ActiveRecordModelBuilder 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModelBuilder.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModelBuilder.#ctor(Castle.ActiveRecord.Framework.Internal.ActiveRecordModelBuilder)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModelBuilder.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModelBuilder.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModelBuilder.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModelBuilder.CollectMetaValuesIListOfAnyMetaValueAttributePropertyInfo">
            <summary>设置 ActiveRecordModelBuilder.CollectMetaValues(IList`1&lt;MetaValueAttribute&gt; metaStore, PropertyInfo prop) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModelBuilder.Constructor">
            <summary>设置 ActiveRecordModelBuilder.ActiveRecordModelBuilder() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModelBuilder.CreateDummyModelForType">
            <summary>设置 ActiveRecordModelBuilder.CreateDummyModelFor(Type type) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModelBuilder.CreateType">
            <summary>设置 ActiveRecordModelBuilder.Create(Type type) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModelBuilder.GetSafeNameString">
            <summary>设置 ActiveRecordModelBuilder.GetSafeName(String name) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModelBuilder.HasJoinedBaseType">
            <summary>设置 ActiveRecordModelBuilder.HasJoinedBase(Type type) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModelBuilder.IsRootTypeType">
            <summary>设置 ActiveRecordModelBuilder.IsRootType(Type type) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModelBuilder.ModelsGet">
            <summary>设置 ActiveRecordModelBuilder.get_Models() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModelBuilder.PopulateActiveRecordAttributeActiveRecordAttributeActiveRecordModel">
            <summary>设置 ActiveRecordModelBuilder.PopulateActiveRecordAttribute(ActiveRecordAttribute attribute, ActiveRecordModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModelBuilder.PopulateModelActiveRecordModelType">
            <summary>设置 ActiveRecordModelBuilder.PopulateModel(ActiveRecordModel model, Type type) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModelBuilder.ProcessActiveRecordAttributeTypeActiveRecordModel">
            <summary>设置 ActiveRecordModelBuilder.ProcessActiveRecordAttribute(Type type, ActiveRecordModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModelBuilder.ProcessFieldsTypeActiveRecordModel">
            <summary>设置 ActiveRecordModelBuilder.ProcessFields(Type type, ActiveRecordModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModelBuilder.ProcessImportsTypeActiveRecordModel">
            <summary>设置 ActiveRecordModelBuilder.ProcessImports(Type type, ActiveRecordModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModelBuilder.ProcessJoinedBaseAttributeTypeActiveRecordModel">
            <summary>设置 ActiveRecordModelBuilder.ProcessJoinedBaseAttribute(Type type, ActiveRecordModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModelBuilder.ProcessJoinedTablesTypeActiveRecordModel">
            <summary>设置 ActiveRecordModelBuilder.ProcessJoinedTables(Type type, ActiveRecordModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModelBuilder.ProcessPropertiesTypeActiveRecordModel">
            <summary>设置 ActiveRecordModelBuilder.ProcessProperties(Type type, ActiveRecordModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModelBuilder.SetExtensionIModelBuilderExtension">
            <summary>设置 ActiveRecordModelBuilder.SetExtension(IModelBuilderExtension extension) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModelBuilder.ShouldCheckBaseType">
            <summary>设置 ActiveRecordModelBuilder.ShouldCheckBase(Type type) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModelBuilder.StaticConstructor">
            <summary>设置 ActiveRecordModelBuilder.ActiveRecordModelBuilder() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModelBuilder.ValidatorRegistryGet">
            <summary>设置 ActiveRecordModelBuilder.get_ValidatorRegistry() 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModelBuilder.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModelBuilder.AllInstances.CreateDummyModelForType">
            <summary>设置 ActiveRecordModelBuilder.CreateDummyModelFor(Type type) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModelBuilder.AllInstances.CreateType">
            <summary>设置 ActiveRecordModelBuilder.Create(Type type) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModelBuilder.AllInstances.ModelsGet">
            <summary>设置 ActiveRecordModelBuilder.get_Models() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModelBuilder.AllInstances.PopulateModelActiveRecordModelType">
            <summary>设置 ActiveRecordModelBuilder.PopulateModel(ActiveRecordModel model, Type type) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModelBuilder.AllInstances.ProcessFieldsTypeActiveRecordModel">
            <summary>设置 ActiveRecordModelBuilder.ProcessFields(Type type, ActiveRecordModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModelBuilder.AllInstances.ProcessPropertiesTypeActiveRecordModel">
            <summary>设置 ActiveRecordModelBuilder.ProcessProperties(Type type, ActiveRecordModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModelBuilder.AllInstances.SetExtensionIModelBuilderExtension">
            <summary>设置 ActiveRecordModelBuilder.SetExtension(IModelBuilderExtension extension) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModelCollection">
            <summary>Castle.ActiveRecord.Framework.Internal.ActiveRecordModelCollection 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModelCollection.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModelCollection.#ctor(Castle.ActiveRecord.Framework.Internal.ActiveRecordModelCollection)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModelCollection.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModelCollection.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModelCollection.Bind(System.Collections.ICollection)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModelCollection.Bind(System.Collections.IDictionary)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModelCollection.Bind(System.Collections.IEnumerable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModelCollection.AddActiveRecordModel">
            <summary>设置 ActiveRecordModelCollection.Add(ActiveRecordModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModelCollection.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModelCollection.Constructor">
            <summary>设置 ActiveRecordModelCollection.ActiveRecordModelCollection() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModelCollection.ContainsType">
            <summary>设置 ActiveRecordModelCollection.Contains(Type type) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModelCollection.GetEnumerator">
            <summary>设置 ActiveRecordModelCollection.GetEnumerator() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModelCollection.ItemGetType">
            <summary>设置 ActiveRecordModelCollection.get_Item(Type type) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModelCollection.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModelCollection.AllInstances.AddActiveRecordModel">
            <summary>设置 ActiveRecordModelCollection.Add(ActiveRecordModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModelCollection.AllInstances.ContainsType">
            <summary>设置 ActiveRecordModelCollection.Contains(Type type) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModelCollection.AllInstances.GetEnumerator">
            <summary>设置 ActiveRecordModelCollection.GetEnumerator() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimActiveRecordModelCollection.AllInstances.ItemGetType">
            <summary>设置 ActiveRecordModelCollection.get_Item(Type type) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Internal.Fakes.ShimAnyModel">
            <summary>Castle.ActiveRecord.Framework.Internal.AnyModel 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimAnyModel.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimAnyModel.#ctor(Castle.ActiveRecord.Framework.Internal.AnyModel)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimAnyModel.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimAnyModel.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimAnyModel.Bind(Castle.ActiveRecord.Framework.Internal.IVisitable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimAnyModel.AcceptIVisitor">
            <summary>设置 AnyModel.Accept(IVisitor visitor) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimAnyModel.AnyAttGet">
            <summary>设置 AnyModel.get_AnyAtt() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimAnyModel.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimAnyModel.ConstructorPropertyInfoAnyAttribute">
            <summary>设置 AnyModel.AnyModel(PropertyInfo prop, AnyAttribute anyAtt) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimAnyModel.MetaValuesGet">
            <summary>设置 AnyModel.get_MetaValues() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimAnyModel.MetaValuesSetIListOfAnyMetaValueAttribute">
            <summary>设置 AnyModel.set_MetaValues(IList`1&lt;MetaValueAttribute&gt; value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimAnyModel.PropertyGet">
            <summary>设置 AnyModel.get_Property() 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Internal.Fakes.ShimAnyModel.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimAnyModel.AllInstances.AcceptIVisitor">
            <summary>设置 AnyModel.Accept(IVisitor visitor) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimAnyModel.AllInstances.AnyAttGet">
            <summary>设置 AnyModel.get_AnyAtt() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimAnyModel.AllInstances.MetaValuesGet">
            <summary>设置 AnyModel.get_MetaValues() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimAnyModel.AllInstances.MetaValuesSetIListOfAnyMetaValueAttribute">
            <summary>设置 AnyModel.set_MetaValues(IList`1&lt;MetaValueAttribute&gt; value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimAnyModel.AllInstances.PropertyGet">
            <summary>设置 AnyModel.get_Property() 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Internal.Fakes.ShimAssemblyXmlGenerator">
            <summary>Castle.ActiveRecord.Framework.Internal.AssemblyXmlGenerator 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimAssemblyXmlGenerator.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimAssemblyXmlGenerator.#ctor(Castle.ActiveRecord.Framework.Internal.AssemblyXmlGenerator)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimAssemblyXmlGenerator.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimAssemblyXmlGenerator.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimAssemblyXmlGenerator.AppendImportImportAttribute">
            <summary>设置 AssemblyXmlGenerator.AppendImport(ImportAttribute attribute) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimAssemblyXmlGenerator.AppendNamedHqlQueryHqlNamedQueryAttributeAssembly">
            <summary>设置 AssemblyXmlGenerator.AppendNamedHqlQuery(HqlNamedQueryAttribute attribute, Assembly assembly) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimAssemblyXmlGenerator.AppendNamedSqlQuerySqlNamedQueryAttributeAssembly">
            <summary>设置 AssemblyXmlGenerator.AppendNamedSqlQuery(SqlNamedQueryAttribute attribute, Assembly assembly) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimAssemblyXmlGenerator.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimAssemblyXmlGenerator.Constructor">
            <summary>设置 AssemblyXmlGenerator.AssemblyXmlGenerator() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimAssemblyXmlGenerator.CreateXmlConfigurationsAssembly">
            <summary>设置 AssemblyXmlGenerator.CreateXmlConfigurations(Assembly assembly) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimAssemblyXmlGenerator.Reset">
            <summary>设置 AssemblyXmlGenerator.Reset() 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Internal.Fakes.ShimAssemblyXmlGenerator.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimAssemblyXmlGenerator.AllInstances.AppendImportImportAttribute">
            <summary>设置 AssemblyXmlGenerator.AppendImport(ImportAttribute attribute) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimAssemblyXmlGenerator.AllInstances.AppendNamedHqlQueryHqlNamedQueryAttributeAssembly">
            <summary>设置 AssemblyXmlGenerator.AppendNamedHqlQuery(HqlNamedQueryAttribute attribute, Assembly assembly) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimAssemblyXmlGenerator.AllInstances.AppendNamedSqlQuerySqlNamedQueryAttributeAssembly">
            <summary>设置 AssemblyXmlGenerator.AppendNamedSqlQuery(SqlNamedQueryAttribute attribute, Assembly assembly) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimAssemblyXmlGenerator.AllInstances.CreateXmlConfigurationsAssembly">
            <summary>设置 AssemblyXmlGenerator.CreateXmlConfigurations(Assembly assembly) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimAssemblyXmlGenerator.AllInstances.Reset">
            <summary>设置 AssemblyXmlGenerator.Reset() 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Internal.Fakes.ShimBelongsToModel">
            <summary>Castle.ActiveRecord.Framework.Internal.BelongsToModel 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimBelongsToModel.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimBelongsToModel.#ctor(Castle.ActiveRecord.Framework.Internal.BelongsToModel)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimBelongsToModel.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimBelongsToModel.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimBelongsToModel.Bind(Castle.ActiveRecord.Framework.Internal.IVisitable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimBelongsToModel.AcceptIVisitor">
            <summary>设置 BelongsToModel.Accept(IVisitor visitor) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimBelongsToModel.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimBelongsToModel.BelongsToAttGet">
            <summary>设置 BelongsToModel.get_BelongsToAtt() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimBelongsToModel.ConstructorPropertyInfoBelongsToAttribute">
            <summary>设置 BelongsToModel.BelongsToModel(PropertyInfo propInfo, BelongsToAttribute belongsToAtt) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimBelongsToModel.PropertyGet">
            <summary>设置 BelongsToModel.get_Property() 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Internal.Fakes.ShimBelongsToModel.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimBelongsToModel.AllInstances.AcceptIVisitor">
            <summary>设置 BelongsToModel.Accept(IVisitor visitor) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimBelongsToModel.AllInstances.BelongsToAttGet">
            <summary>设置 BelongsToModel.get_BelongsToAtt() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimBelongsToModel.AllInstances.PropertyGet">
            <summary>设置 BelongsToModel.get_Property() 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Internal.Fakes.ShimCollectionIDModel">
            <summary>Castle.ActiveRecord.Framework.Internal.CollectionIDModel 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimCollectionIDModel.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimCollectionIDModel.#ctor(Castle.ActiveRecord.Framework.Internal.CollectionIDModel)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimCollectionIDModel.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimCollectionIDModel.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimCollectionIDModel.Bind(Castle.ActiveRecord.Framework.Internal.IVisitable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimCollectionIDModel.AcceptIVisitor">
            <summary>设置 CollectionIDModel.Accept(IVisitor visitor) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimCollectionIDModel.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimCollectionIDModel.CollectionIDAttGet">
            <summary>设置 CollectionIDModel.get_CollectionIDAtt() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimCollectionIDModel.ConstructorPropertyInfoCollectionIDAttribute">
            <summary>设置 CollectionIDModel.CollectionIDModel(PropertyInfo propInfo, CollectionIDAttribute collAtt) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimCollectionIDModel.HiloGet">
            <summary>设置 CollectionIDModel.get_Hilo() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimCollectionIDModel.HiloSetHiloModel">
            <summary>设置 CollectionIDModel.set_Hilo(HiloModel value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimCollectionIDModel.PropertyGet">
            <summary>设置 CollectionIDModel.get_Property() 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Internal.Fakes.ShimCollectionIDModel.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimCollectionIDModel.AllInstances.AcceptIVisitor">
            <summary>设置 CollectionIDModel.Accept(IVisitor visitor) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimCollectionIDModel.AllInstances.CollectionIDAttGet">
            <summary>设置 CollectionIDModel.get_CollectionIDAtt() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimCollectionIDModel.AllInstances.HiloGet">
            <summary>设置 CollectionIDModel.get_Hilo() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimCollectionIDModel.AllInstances.HiloSetHiloModel">
            <summary>设置 CollectionIDModel.set_Hilo(HiloModel value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimCollectionIDModel.AllInstances.PropertyGet">
            <summary>设置 CollectionIDModel.get_Property() 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Internal.Fakes.ShimCompositeKeyModel">
            <summary>Castle.ActiveRecord.Framework.Internal.CompositeKeyModel 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimCompositeKeyModel.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimCompositeKeyModel.#ctor(Castle.ActiveRecord.Framework.Internal.CompositeKeyModel)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimCompositeKeyModel.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimCompositeKeyModel.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimCompositeKeyModel.Bind(Castle.ActiveRecord.Framework.Internal.IVisitable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimCompositeKeyModel.AcceptIVisitor">
            <summary>设置 CompositeKeyModel.Accept(IVisitor visitor) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimCompositeKeyModel.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimCompositeKeyModel.CompositeKeyAttGet">
            <summary>设置 CompositeKeyModel.get_CompositeKeyAtt() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimCompositeKeyModel.ConstructorPropertyInfoCompositeKeyAttribute">
            <summary>设置 CompositeKeyModel.CompositeKeyModel(PropertyInfo propInfo, CompositeKeyAttribute pkAtt) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimCompositeKeyModel.PropertyGet">
            <summary>设置 CompositeKeyModel.get_Property() 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Internal.Fakes.ShimCompositeKeyModel.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimCompositeKeyModel.AllInstances.AcceptIVisitor">
            <summary>设置 CompositeKeyModel.Accept(IVisitor visitor) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimCompositeKeyModel.AllInstances.CompositeKeyAttGet">
            <summary>设置 CompositeKeyModel.get_CompositeKeyAtt() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimCompositeKeyModel.AllInstances.PropertyGet">
            <summary>设置 CompositeKeyModel.get_Property() 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Internal.Fakes.ShimCompositeUserTypeModel">
            <summary>Castle.ActiveRecord.Framework.Internal.CompositeUserTypeModel 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimCompositeUserTypeModel.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimCompositeUserTypeModel.#ctor(Castle.ActiveRecord.Framework.Internal.CompositeUserTypeModel)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimCompositeUserTypeModel.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimCompositeUserTypeModel.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimCompositeUserTypeModel.Bind(Castle.ActiveRecord.Framework.Internal.IVisitable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimCompositeUserTypeModel.AcceptIVisitor">
            <summary>设置 CompositeUserTypeModel.Accept(IVisitor visitor) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimCompositeUserTypeModel.AttributeGet">
            <summary>设置 CompositeUserTypeModel.get_Attribute() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimCompositeUserTypeModel.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimCompositeUserTypeModel.ConstructorMemberInfoTypeCompositeUserTypeAttribute">
            <summary>设置 CompositeUserTypeModel.CompositeUserTypeModel(MemberInfo member, Type memberType, CompositeUserTypeAttribute attribute) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimCompositeUserTypeModel.MemberGet">
            <summary>设置 CompositeUserTypeModel.get_Member() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimCompositeUserTypeModel.MemberTypeGet">
            <summary>设置 CompositeUserTypeModel.get_MemberType() 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Internal.Fakes.ShimCompositeUserTypeModel.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimCompositeUserTypeModel.AllInstances.AcceptIVisitor">
            <summary>设置 CompositeUserTypeModel.Accept(IVisitor visitor) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimCompositeUserTypeModel.AllInstances.AttributeGet">
            <summary>设置 CompositeUserTypeModel.get_Attribute() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimCompositeUserTypeModel.AllInstances.MemberGet">
            <summary>设置 CompositeUserTypeModel.get_Member() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimCompositeUserTypeModel.AllInstances.MemberTypeGet">
            <summary>设置 CompositeUserTypeModel.get_MemberType() 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Internal.Fakes.ShimDependentObjectModel">
            <summary>Castle.ActiveRecord.Framework.Internal.DependentObjectModel 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimDependentObjectModel.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimDependentObjectModel.#ctor(Castle.ActiveRecord.Framework.Internal.DependentObjectModel)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimDependentObjectModel.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimDependentObjectModel.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimDependentObjectModel.Bind(Castle.ActiveRecord.Framework.Internal.IVisitable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimDependentObjectModel.AcceptIVisitor">
            <summary>设置 DependentObjectModel.Accept(IVisitor visitor) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimDependentObjectModel.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimDependentObjectModel.ConstructorPropertyInfoHasManyAttributeActiveRecordModel">
            <summary>设置 DependentObjectModel.DependentObjectModel(PropertyInfo propInfo, HasManyAttribute hasManyAtt, ActiveRecordModel dependentObjectModel) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimDependentObjectModel.HasManyAttGet">
            <summary>设置 DependentObjectModel.get_HasManyAtt() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimDependentObjectModel.ModelGet">
            <summary>设置 DependentObjectModel.get_Model() 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Internal.Fakes.ShimDependentObjectModel.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimDependentObjectModel.AllInstances.AcceptIVisitor">
            <summary>设置 DependentObjectModel.Accept(IVisitor visitor) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimDependentObjectModel.AllInstances.HasManyAttGet">
            <summary>设置 DependentObjectModel.get_HasManyAtt() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimDependentObjectModel.AllInstances.ModelGet">
            <summary>设置 DependentObjectModel.get_Model() 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Internal.Fakes.ShimFieldModel">
            <summary>Castle.ActiveRecord.Framework.Internal.FieldModel 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimFieldModel.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimFieldModel.#ctor(Castle.ActiveRecord.Framework.Internal.FieldModel)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimFieldModel.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimFieldModel.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimFieldModel.Bind(Castle.ActiveRecord.Framework.Internal.IVisitable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimFieldModel.AcceptIVisitor">
            <summary>设置 FieldModel.Accept(IVisitor visitor) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimFieldModel.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimFieldModel.ConstructorFieldInfoFieldAttribute">
            <summary>设置 FieldModel.FieldModel(FieldInfo field, FieldAttribute att) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimFieldModel.FieldAttGet">
            <summary>设置 FieldModel.get_FieldAtt() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimFieldModel.FieldGet">
            <summary>设置 FieldModel.get_Field() 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Internal.Fakes.ShimFieldModel.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimFieldModel.AllInstances.AcceptIVisitor">
            <summary>设置 FieldModel.Accept(IVisitor visitor) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimFieldModel.AllInstances.FieldAttGet">
            <summary>设置 FieldModel.get_FieldAtt() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimFieldModel.AllInstances.FieldGet">
            <summary>设置 FieldModel.get_Field() 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Internal.Fakes.ShimGraphConnectorVisitor">
            <summary>Castle.ActiveRecord.Framework.Internal.GraphConnectorVisitor 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimGraphConnectorVisitor.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimGraphConnectorVisitor.#ctor(Castle.ActiveRecord.Framework.Internal.GraphConnectorVisitor)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimGraphConnectorVisitor.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimGraphConnectorVisitor.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimGraphConnectorVisitor.Bind(Castle.ActiveRecord.Framework.Internal.IVisitor)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimGraphConnectorVisitor.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimGraphConnectorVisitor.ConstructorActiveRecordModelCollection">
            <summary>设置 GraphConnectorVisitor.GraphConnectorVisitor(ActiveRecordModelCollection arCollection) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimGraphConnectorVisitor.FindCollectionIDPropertyInfo">
            <summary>设置 GraphConnectorVisitor.FindCollectionID(PropertyInfo property) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimGraphConnectorVisitor.FindHasAndBelongsToManyPropertyInfo">
            <summary>设置 GraphConnectorVisitor.FindHasAndBelongsToMany(PropertyInfo property) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimGraphConnectorVisitor.IsChildClassActiveRecordModelActiveRecordModel">
            <summary>设置 GraphConnectorVisitor.IsChildClass(ActiveRecordModel model, ActiveRecordModel child) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimGraphConnectorVisitor.VisitCollectionIDCollectionIDModel">
            <summary>设置 GraphConnectorVisitor.VisitCollectionID(CollectionIDModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimGraphConnectorVisitor.VisitHiloHiloModel">
            <summary>设置 GraphConnectorVisitor.VisitHilo(HiloModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimGraphConnectorVisitor.VisitModelActiveRecordModel">
            <summary>设置 GraphConnectorVisitor.VisitModel(ActiveRecordModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimGraphConnectorVisitor.VisitNestedNestedModel">
            <summary>设置 GraphConnectorVisitor.VisitNested(NestedModel model) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Internal.Fakes.ShimGraphConnectorVisitor.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimGraphConnectorVisitor.AllInstances.FindCollectionIDPropertyInfo">
            <summary>设置 GraphConnectorVisitor.FindCollectionID(PropertyInfo property) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimGraphConnectorVisitor.AllInstances.FindHasAndBelongsToManyPropertyInfo">
            <summary>设置 GraphConnectorVisitor.FindHasAndBelongsToMany(PropertyInfo property) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimGraphConnectorVisitor.AllInstances.VisitCollectionIDCollectionIDModel">
            <summary>设置 GraphConnectorVisitor.VisitCollectionID(CollectionIDModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimGraphConnectorVisitor.AllInstances.VisitHiloHiloModel">
            <summary>设置 GraphConnectorVisitor.VisitHilo(HiloModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimGraphConnectorVisitor.AllInstances.VisitModelActiveRecordModel">
            <summary>设置 GraphConnectorVisitor.VisitModel(ActiveRecordModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimGraphConnectorVisitor.AllInstances.VisitNestedNestedModel">
            <summary>设置 GraphConnectorVisitor.VisitNested(NestedModel model) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Internal.Fakes.ShimHasAndBelongsToManyModel">
            <summary>Castle.ActiveRecord.Framework.Internal.HasAndBelongsToManyModel 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimHasAndBelongsToManyModel.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimHasAndBelongsToManyModel.#ctor(Castle.ActiveRecord.Framework.Internal.HasAndBelongsToManyModel)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimHasAndBelongsToManyModel.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimHasAndBelongsToManyModel.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimHasAndBelongsToManyModel.Bind(Castle.ActiveRecord.Framework.Internal.IVisitable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimHasAndBelongsToManyModel.AcceptIVisitor">
            <summary>设置 HasAndBelongsToManyModel.Accept(IVisitor visitor) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimHasAndBelongsToManyModel.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimHasAndBelongsToManyModel.CollectionIDGet">
            <summary>设置 HasAndBelongsToManyModel.get_CollectionID() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimHasAndBelongsToManyModel.CollectionIDSetCollectionIDModel">
            <summary>设置 HasAndBelongsToManyModel.set_CollectionID(CollectionIDModel value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimHasAndBelongsToManyModel.ConstructorPropertyInfoHasAndBelongsToManyAttribute">
            <summary>设置 HasAndBelongsToManyModel.HasAndBelongsToManyModel(PropertyInfo propInfo, HasAndBelongsToManyAttribute hasManyAtt) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimHasAndBelongsToManyModel.HasManyAttGet">
            <summary>设置 HasAndBelongsToManyModel.get_HasManyAtt() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimHasAndBelongsToManyModel.PropertyGet">
            <summary>设置 HasAndBelongsToManyModel.get_Property() 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Internal.Fakes.ShimHasAndBelongsToManyModel.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimHasAndBelongsToManyModel.AllInstances.AcceptIVisitor">
            <summary>设置 HasAndBelongsToManyModel.Accept(IVisitor visitor) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimHasAndBelongsToManyModel.AllInstances.CollectionIDGet">
            <summary>设置 HasAndBelongsToManyModel.get_CollectionID() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimHasAndBelongsToManyModel.AllInstances.CollectionIDSetCollectionIDModel">
            <summary>设置 HasAndBelongsToManyModel.set_CollectionID(CollectionIDModel value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimHasAndBelongsToManyModel.AllInstances.HasManyAttGet">
            <summary>设置 HasAndBelongsToManyModel.get_HasManyAtt() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimHasAndBelongsToManyModel.AllInstances.PropertyGet">
            <summary>设置 HasAndBelongsToManyModel.get_Property() 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Internal.Fakes.ShimHasManyModel">
            <summary>Castle.ActiveRecord.Framework.Internal.HasManyModel 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimHasManyModel.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimHasManyModel.#ctor(Castle.ActiveRecord.Framework.Internal.HasManyModel)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimHasManyModel.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimHasManyModel.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimHasManyModel.Bind(Castle.ActiveRecord.Framework.Internal.IVisitable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimHasManyModel.AcceptIVisitor">
            <summary>设置 HasManyModel.Accept(IVisitor visitor) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimHasManyModel.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimHasManyModel.ConstructorPropertyInfoHasManyAttributeActiveRecordModel">
            <summary>设置 HasManyModel.HasManyModel(PropertyInfo propInfo, HasManyAttribute hasManyAtt, ActiveRecordModel containingTypeModel) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimHasManyModel.ContainingTypeModelGet">
            <summary>设置 HasManyModel.get_ContainingTypeModel() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimHasManyModel.DependentObjectModelGet">
            <summary>设置 HasManyModel.get_DependentObjectModel() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimHasManyModel.DependentObjectModelSetDependentObjectModel">
            <summary>设置 HasManyModel.set_DependentObjectModel(DependentObjectModel value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimHasManyModel.HasManyAttGet">
            <summary>设置 HasManyModel.get_HasManyAtt() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimHasManyModel.PropertyGet">
            <summary>设置 HasManyModel.get_Property() 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Internal.Fakes.ShimHasManyModel.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimHasManyModel.AllInstances.AcceptIVisitor">
            <summary>设置 HasManyModel.Accept(IVisitor visitor) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimHasManyModel.AllInstances.ContainingTypeModelGet">
            <summary>设置 HasManyModel.get_ContainingTypeModel() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimHasManyModel.AllInstances.DependentObjectModelGet">
            <summary>设置 HasManyModel.get_DependentObjectModel() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimHasManyModel.AllInstances.DependentObjectModelSetDependentObjectModel">
            <summary>设置 HasManyModel.set_DependentObjectModel(DependentObjectModel value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimHasManyModel.AllInstances.HasManyAttGet">
            <summary>设置 HasManyModel.get_HasManyAtt() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimHasManyModel.AllInstances.PropertyGet">
            <summary>设置 HasManyModel.get_Property() 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Internal.Fakes.ShimHasManyToAnyModel">
            <summary>Castle.ActiveRecord.Framework.Internal.HasManyToAnyModel 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimHasManyToAnyModel.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimHasManyToAnyModel.#ctor(Castle.ActiveRecord.Framework.Internal.HasManyToAnyModel)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimHasManyToAnyModel.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimHasManyToAnyModel.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimHasManyToAnyModel.Bind(Castle.ActiveRecord.Framework.Internal.IVisitable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimHasManyToAnyModel.AcceptIVisitor">
            <summary>设置 HasManyToAnyModel.Accept(IVisitor visitor) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimHasManyToAnyModel.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimHasManyToAnyModel.ConfigurationGet">
            <summary>设置 HasManyToAnyModel.get_Configuration() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimHasManyToAnyModel.ConstructorPropertyInfoHasManyToAnyAttribute">
            <summary>设置 HasManyToAnyModel.HasManyToAnyModel(PropertyInfo prop, HasManyToAnyAttribute hasManyToAnyAtt) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimHasManyToAnyModel.HasManyToAnyAttGet">
            <summary>设置 HasManyToAnyModel.get_HasManyToAnyAtt() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimHasManyToAnyModel.MetaValuesGet">
            <summary>设置 HasManyToAnyModel.get_MetaValues() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimHasManyToAnyModel.MetaValuesSetIListOfAnyMetaValueAttribute">
            <summary>设置 HasManyToAnyModel.set_MetaValues(IList`1&lt;MetaValueAttribute&gt; value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimHasManyToAnyModel.PropertyGet">
            <summary>设置 HasManyToAnyModel.get_Property() 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Internal.Fakes.ShimHasManyToAnyModel.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimHasManyToAnyModel.AllInstances.AcceptIVisitor">
            <summary>设置 HasManyToAnyModel.Accept(IVisitor visitor) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimHasManyToAnyModel.AllInstances.ConfigurationGet">
            <summary>设置 HasManyToAnyModel.get_Configuration() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimHasManyToAnyModel.AllInstances.HasManyToAnyAttGet">
            <summary>设置 HasManyToAnyModel.get_HasManyToAnyAtt() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimHasManyToAnyModel.AllInstances.MetaValuesGet">
            <summary>设置 HasManyToAnyModel.get_MetaValues() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimHasManyToAnyModel.AllInstances.MetaValuesSetIListOfAnyMetaValueAttribute">
            <summary>设置 HasManyToAnyModel.set_MetaValues(IList`1&lt;MetaValueAttribute&gt; value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimHasManyToAnyModel.AllInstances.PropertyGet">
            <summary>设置 HasManyToAnyModel.get_Property() 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Internal.Fakes.ShimHasManyToAnyModel.ShimConfig">
            <summary>Castle.ActiveRecord.Framework.Internal.HasManyToAnyModel+Config 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimHasManyToAnyModel.ShimConfig.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimHasManyToAnyModel.ShimConfig.#ctor(Castle.ActiveRecord.Framework.Internal.HasManyToAnyModel.Config)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimHasManyToAnyModel.ShimConfig.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimHasManyToAnyModel.ShimConfig.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimHasManyToAnyModel.ShimConfig.Bind(Castle.ActiveRecord.Framework.Internal.IVisitable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimHasManyToAnyModel.ShimConfig.AcceptIVisitor">
            <summary>设置 Config.Accept(IVisitor visitor) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimHasManyToAnyModel.ShimConfig.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimHasManyToAnyModel.ShimConfig.ConstructorHasManyToAnyModel">
            <summary>设置 Config.Config(HasManyToAnyModel parent) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimHasManyToAnyModel.ShimConfig.ParentGet">
            <summary>设置 Config.get_Parent() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimHasManyToAnyModel.ShimConfig.ParentSetHasManyToAnyModel">
            <summary>设置 Config.set_Parent(HasManyToAnyModel value) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Internal.Fakes.ShimHasManyToAnyModel.ShimConfig.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimHasManyToAnyModel.ShimConfig.AllInstances.AcceptIVisitor">
            <summary>设置 Config.Accept(IVisitor visitor) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimHasManyToAnyModel.ShimConfig.AllInstances.ParentGet">
            <summary>设置 Config.get_Parent() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimHasManyToAnyModel.ShimConfig.AllInstances.ParentSetHasManyToAnyModel">
            <summary>设置 Config.set_Parent(HasManyToAnyModel value) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Internal.Fakes.ShimHiloModel">
            <summary>Castle.ActiveRecord.Framework.Internal.HiloModel 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimHiloModel.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimHiloModel.#ctor(Castle.ActiveRecord.Framework.Internal.HiloModel)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimHiloModel.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimHiloModel.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimHiloModel.Bind(Castle.ActiveRecord.Framework.Internal.IVisitable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimHiloModel.AcceptIVisitor">
            <summary>设置 HiloModel.Accept(IVisitor visitor) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimHiloModel.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimHiloModel.ConstructorPropertyInfoHiloAttribute">
            <summary>设置 HiloModel.HiloModel(PropertyInfo propInfo, HiloAttribute hiloAtt) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimHiloModel.HiloAttGet">
            <summary>设置 HiloModel.get_HiloAtt() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimHiloModel.PropertyGet">
            <summary>设置 HiloModel.get_Property() 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Internal.Fakes.ShimHiloModel.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimHiloModel.AllInstances.AcceptIVisitor">
            <summary>设置 HiloModel.Accept(IVisitor visitor) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimHiloModel.AllInstances.HiloAttGet">
            <summary>设置 HiloModel.get_HiloAtt() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimHiloModel.AllInstances.PropertyGet">
            <summary>设置 HiloModel.get_Property() 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Internal.Fakes.ShimImportModel">
            <summary>Castle.ActiveRecord.Framework.Internal.ImportModel 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimImportModel.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimImportModel.#ctor(Castle.ActiveRecord.Framework.Internal.ImportModel)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimImportModel.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimImportModel.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimImportModel.Bind(Castle.ActiveRecord.Framework.Internal.IVisitable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimImportModel.AcceptIVisitor">
            <summary>设置 ImportModel.Accept(IVisitor visitor) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimImportModel.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimImportModel.ConstructorImportAttribute">
            <summary>设置 ImportModel.ImportModel(ImportAttribute att) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimImportModel.ImportAttGet">
            <summary>设置 ImportModel.get_ImportAtt() 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Internal.Fakes.ShimImportModel.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimImportModel.AllInstances.AcceptIVisitor">
            <summary>设置 ImportModel.Accept(IVisitor visitor) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimImportModel.AllInstances.ImportAttGet">
            <summary>设置 ImportModel.get_ImportAtt() 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Internal.Fakes.ShimInflector">
            <summary>Castle.ActiveRecord.Framework.Internal.Inflector 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimInflector.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimInflector.#ctor(Castle.ActiveRecord.Framework.Internal.Inflector)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimInflector.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimInflector.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimInflector.AddIrregularStringString">
            <summary>设置 Inflector.AddIrregular(String singular, String plural) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimInflector.AddPluralStringString">
            <summary>设置 Inflector.AddPlural(String rule, String replacement) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimInflector.AddSingularStringString">
            <summary>设置 Inflector.AddSingular(String rule, String replacement) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimInflector.AddUncountableString">
            <summary>设置 Inflector.AddUncountable(String word) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimInflector.ApplyRulesIListString">
            <summary>设置 Inflector.ApplyRules(IList rules, String word) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimInflector.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimInflector.CapitalizeString">
            <summary>设置 Inflector.Capitalize(String word) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimInflector.Constructor">
            <summary>设置 Inflector.Inflector() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimInflector.PluralizeString">
            <summary>设置 Inflector.Pluralize(String word) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimInflector.SingularizeString">
            <summary>设置 Inflector.Singularize(String word) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimInflector.StaticConstructor">
            <summary>设置 Inflector.Inflector() 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Internal.Fakes.ShimInflector.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Internal.Fakes.ShimJoinedTableModel">
            <summary>Castle.ActiveRecord.Framework.Internal.JoinedTableModel 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimJoinedTableModel.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimJoinedTableModel.#ctor(Castle.ActiveRecord.Framework.Internal.JoinedTableModel)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimJoinedTableModel.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimJoinedTableModel.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimJoinedTableModel.Bind(Castle.ActiveRecord.Framework.Internal.IVisitable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimJoinedTableModel.AcceptIVisitor">
            <summary>设置 JoinedTableModel.Accept(IVisitor visitor) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimJoinedTableModel.AnysGet">
            <summary>设置 JoinedTableModel.get_Anys() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimJoinedTableModel.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimJoinedTableModel.BelongsToGet">
            <summary>设置 JoinedTableModel.get_BelongsTo() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimJoinedTableModel.ComponentsGet">
            <summary>设置 JoinedTableModel.get_Components() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimJoinedTableModel.ConstructorJoinedTableAttribute">
            <summary>设置 JoinedTableModel.JoinedTableModel(JoinedTableAttribute att) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimJoinedTableModel.FieldsGet">
            <summary>设置 JoinedTableModel.get_Fields() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimJoinedTableModel.JoinedTableAttributeGet">
            <summary>设置 JoinedTableModel.get_JoinedTableAttribute() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimJoinedTableModel.PropertiesGet">
            <summary>设置 JoinedTableModel.get_Properties() 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Internal.Fakes.ShimJoinedTableModel.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimJoinedTableModel.AllInstances.AcceptIVisitor">
            <summary>设置 JoinedTableModel.Accept(IVisitor visitor) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimJoinedTableModel.AllInstances.AnysGet">
            <summary>设置 JoinedTableModel.get_Anys() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimJoinedTableModel.AllInstances.BelongsToGet">
            <summary>设置 JoinedTableModel.get_BelongsTo() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimJoinedTableModel.AllInstances.ComponentsGet">
            <summary>设置 JoinedTableModel.get_Components() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimJoinedTableModel.AllInstances.FieldsGet">
            <summary>设置 JoinedTableModel.get_Fields() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimJoinedTableModel.AllInstances.JoinedTableAttributeGet">
            <summary>设置 JoinedTableModel.get_JoinedTableAttribute() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimJoinedTableModel.AllInstances.PropertiesGet">
            <summary>设置 JoinedTableModel.get_Properties() 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Internal.Fakes.ShimKeyModel">
            <summary>Castle.ActiveRecord.Framework.Internal.KeyModel 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimKeyModel.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimKeyModel.#ctor(Castle.ActiveRecord.Framework.Internal.KeyModel)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimKeyModel.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimKeyModel.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimKeyModel.Bind(Castle.ActiveRecord.Framework.Internal.IVisitable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimKeyModel.AcceptIVisitor">
            <summary>设置 KeyModel.Accept(IVisitor visitor) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimKeyModel.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimKeyModel.ConstructorPropertyInfoJoinedKeyAttribute">
            <summary>设置 KeyModel.KeyModel(PropertyInfo propInfo, JoinedKeyAttribute att) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimKeyModel.JoinedKeyAttGet">
            <summary>设置 KeyModel.get_JoinedKeyAtt() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimKeyModel.PropertyGet">
            <summary>设置 KeyModel.get_Property() 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Internal.Fakes.ShimKeyModel.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimKeyModel.AllInstances.AcceptIVisitor">
            <summary>设置 KeyModel.Accept(IVisitor visitor) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimKeyModel.AllInstances.JoinedKeyAttGet">
            <summary>设置 KeyModel.get_JoinedKeyAtt() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimKeyModel.AllInstances.PropertyGet">
            <summary>设置 KeyModel.get_Property() 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Internal.Fakes.ShimModelBuilderExtensionComposite">
            <summary>Castle.ActiveRecord.Framework.Internal.ModelBuilderExtensionComposite 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimModelBuilderExtensionComposite.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimModelBuilderExtensionComposite.#ctor(Castle.ActiveRecord.Framework.Internal.ModelBuilderExtensionComposite)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimModelBuilderExtensionComposite.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimModelBuilderExtensionComposite.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimModelBuilderExtensionComposite.Bind(Castle.ActiveRecord.Framework.Internal.IModelBuilderExtension)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimModelBuilderExtensionComposite.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimModelBuilderExtensionComposite.ConstructorIListOfIModelBuilderExtension">
            <summary>设置 ModelBuilderExtensionComposite.ModelBuilderExtensionComposite(IList`1&lt;IModelBuilderExtension&gt; extensions) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimModelBuilderExtensionComposite.ProcessBelongsToPropertyInfoBelongsToModelActiveRecordModel">
            <summary>设置 ModelBuilderExtensionComposite.ProcessBelongsTo(PropertyInfo pi, BelongsToModel belongsToModel, ActiveRecordModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimModelBuilderExtensionComposite.ProcessClassTypeActiveRecordModel">
            <summary>设置 ModelBuilderExtensionComposite.ProcessClass(Type type, ActiveRecordModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimModelBuilderExtensionComposite.ProcessFieldFieldInfoActiveRecordModel">
            <summary>设置 ModelBuilderExtensionComposite.ProcessField(FieldInfo fi, ActiveRecordModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimModelBuilderExtensionComposite.ProcessHasAndBelongsToManyPropertyInfoHasAndBelongsToManyModelActiveRecordModel">
            <summary>设置 ModelBuilderExtensionComposite.ProcessHasAndBelongsToMany(PropertyInfo pi, HasAndBelongsToManyModel hasAndBelongManyModel, ActiveRecordModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimModelBuilderExtensionComposite.ProcessHasManyPropertyInfoHasManyModelActiveRecordModel">
            <summary>设置 ModelBuilderExtensionComposite.ProcessHasMany(PropertyInfo pi, HasManyModel hasManyModel, ActiveRecordModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimModelBuilderExtensionComposite.ProcessHasManyToAnyPropertyInfoHasManyToAnyModelActiveRecordModel">
            <summary>设置 ModelBuilderExtensionComposite.ProcessHasManyToAny(PropertyInfo pi, HasManyToAnyModel hasManyModel, ActiveRecordModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimModelBuilderExtensionComposite.ProcessPropertyPropertyInfoActiveRecordModel">
            <summary>设置 ModelBuilderExtensionComposite.ProcessProperty(PropertyInfo pi, ActiveRecordModel model) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Internal.Fakes.ShimModelBuilderExtensionComposite.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimModelBuilderExtensionComposite.AllInstances.ProcessBelongsToPropertyInfoBelongsToModelActiveRecordModel">
            <summary>设置 ModelBuilderExtensionComposite.ProcessBelongsTo(PropertyInfo pi, BelongsToModel belongsToModel, ActiveRecordModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimModelBuilderExtensionComposite.AllInstances.ProcessClassTypeActiveRecordModel">
            <summary>设置 ModelBuilderExtensionComposite.ProcessClass(Type type, ActiveRecordModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimModelBuilderExtensionComposite.AllInstances.ProcessFieldFieldInfoActiveRecordModel">
            <summary>设置 ModelBuilderExtensionComposite.ProcessField(FieldInfo fi, ActiveRecordModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimModelBuilderExtensionComposite.AllInstances.ProcessHasAndBelongsToManyPropertyInfoHasAndBelongsToManyModelActiveRecordModel">
            <summary>设置 ModelBuilderExtensionComposite.ProcessHasAndBelongsToMany(PropertyInfo pi, HasAndBelongsToManyModel hasAndBelongManyModel, ActiveRecordModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimModelBuilderExtensionComposite.AllInstances.ProcessHasManyPropertyInfoHasManyModelActiveRecordModel">
            <summary>设置 ModelBuilderExtensionComposite.ProcessHasMany(PropertyInfo pi, HasManyModel hasManyModel, ActiveRecordModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimModelBuilderExtensionComposite.AllInstances.ProcessHasManyToAnyPropertyInfoHasManyToAnyModelActiveRecordModel">
            <summary>设置 ModelBuilderExtensionComposite.ProcessHasManyToAny(PropertyInfo pi, HasManyToAnyModel hasManyModel, ActiveRecordModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimModelBuilderExtensionComposite.AllInstances.ProcessPropertyPropertyInfoActiveRecordModel">
            <summary>设置 ModelBuilderExtensionComposite.ProcessProperty(PropertyInfo pi, ActiveRecordModel model) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Internal.Fakes.ShimNestedModel">
            <summary>Castle.ActiveRecord.Framework.Internal.NestedModel 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimNestedModel.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimNestedModel.#ctor(Castle.ActiveRecord.Framework.Internal.NestedModel)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimNestedModel.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimNestedModel.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimNestedModel.Bind(Castle.ActiveRecord.Framework.Internal.IVisitable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimNestedModel.AcceptIVisitor">
            <summary>设置 NestedModel.Accept(IVisitor visitor) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimNestedModel.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimNestedModel.ConstructorPropertyInfoNestedAttributeActiveRecordModel">
            <summary>设置 NestedModel.NestedModel(PropertyInfo propInfo, NestedAttribute nestedAtt, ActiveRecordModel nestedModel) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimNestedModel.ModelGet">
            <summary>设置 NestedModel.get_Model() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimNestedModel.NestedAttGet">
            <summary>设置 NestedModel.get_NestedAtt() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimNestedModel.PropertyGet">
            <summary>设置 NestedModel.get_Property() 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Internal.Fakes.ShimNestedModel.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimNestedModel.AllInstances.AcceptIVisitor">
            <summary>设置 NestedModel.Accept(IVisitor visitor) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimNestedModel.AllInstances.ModelGet">
            <summary>设置 NestedModel.get_Model() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimNestedModel.AllInstances.NestedAttGet">
            <summary>设置 NestedModel.get_NestedAtt() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimNestedModel.AllInstances.PropertyGet">
            <summary>设置 NestedModel.get_Property() 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Internal.Fakes.ShimNestedParentReferenceModel">
            <summary>Castle.ActiveRecord.Framework.Internal.NestedParentReferenceModel 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimNestedParentReferenceModel.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimNestedParentReferenceModel.#ctor(Castle.ActiveRecord.Framework.Internal.NestedParentReferenceModel)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimNestedParentReferenceModel.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimNestedParentReferenceModel.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimNestedParentReferenceModel.Bind(Castle.ActiveRecord.Framework.Internal.IVisitable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimNestedParentReferenceModel.AcceptIVisitor">
            <summary>设置 NestedParentReferenceModel.Accept(IVisitor visitor) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimNestedParentReferenceModel.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimNestedParentReferenceModel.ConstructorPropertyInfoNestedParentReferenceAttribute">
            <summary>设置 NestedParentReferenceModel.NestedParentReferenceModel(PropertyInfo propInfo, NestedParentReferenceAttribute nestedParentAtt) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimNestedParentReferenceModel.NestedParentAttGet">
            <summary>设置 NestedParentReferenceModel.get_NestedParentAtt() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimNestedParentReferenceModel.PropertyGet">
            <summary>设置 NestedParentReferenceModel.get_Property() 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Internal.Fakes.ShimNestedParentReferenceModel.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimNestedParentReferenceModel.AllInstances.AcceptIVisitor">
            <summary>设置 NestedParentReferenceModel.Accept(IVisitor visitor) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimNestedParentReferenceModel.AllInstances.NestedParentAttGet">
            <summary>设置 NestedParentReferenceModel.get_NestedParentAtt() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimNestedParentReferenceModel.AllInstances.PropertyGet">
            <summary>设置 NestedParentReferenceModel.get_Property() 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Internal.Fakes.ShimOneToOneModel">
            <summary>Castle.ActiveRecord.Framework.Internal.OneToOneModel 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimOneToOneModel.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimOneToOneModel.#ctor(Castle.ActiveRecord.Framework.Internal.OneToOneModel)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimOneToOneModel.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimOneToOneModel.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimOneToOneModel.Bind(Castle.ActiveRecord.Framework.Internal.IVisitable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimOneToOneModel.AcceptIVisitor">
            <summary>设置 OneToOneModel.Accept(IVisitor visitor) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimOneToOneModel.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimOneToOneModel.ConstructorPropertyInfoOneToOneAttribute">
            <summary>设置 OneToOneModel.OneToOneModel(PropertyInfo propInfo, OneToOneAttribute att) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimOneToOneModel.OneToOneAttGet">
            <summary>设置 OneToOneModel.get_OneToOneAtt() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimOneToOneModel.PropertyGet">
            <summary>设置 OneToOneModel.get_Property() 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Internal.Fakes.ShimOneToOneModel.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimOneToOneModel.AllInstances.AcceptIVisitor">
            <summary>设置 OneToOneModel.Accept(IVisitor visitor) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimOneToOneModel.AllInstances.OneToOneAttGet">
            <summary>设置 OneToOneModel.get_OneToOneAtt() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimOneToOneModel.AllInstances.PropertyGet">
            <summary>设置 OneToOneModel.get_Property() 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Internal.Fakes.ShimPrimaryKeyModel">
            <summary>Castle.ActiveRecord.Framework.Internal.PrimaryKeyModel 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimPrimaryKeyModel.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimPrimaryKeyModel.#ctor(Castle.ActiveRecord.Framework.Internal.PrimaryKeyModel)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimPrimaryKeyModel.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimPrimaryKeyModel.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimPrimaryKeyModel.Bind(Castle.ActiveRecord.Framework.Internal.IVisitable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimPrimaryKeyModel.AcceptIVisitor">
            <summary>设置 PrimaryKeyModel.Accept(IVisitor visitor) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimPrimaryKeyModel.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimPrimaryKeyModel.ConstructorPropertyInfoPrimaryKeyAttribute">
            <summary>设置 PrimaryKeyModel.PrimaryKeyModel(PropertyInfo propInfo, PrimaryKeyAttribute pkAtt) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimPrimaryKeyModel.PrimaryKeyAttGet">
            <summary>设置 PrimaryKeyModel.get_PrimaryKeyAtt() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimPrimaryKeyModel.PropertyGet">
            <summary>设置 PrimaryKeyModel.get_Property() 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Internal.Fakes.ShimPrimaryKeyModel.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimPrimaryKeyModel.AllInstances.AcceptIVisitor">
            <summary>设置 PrimaryKeyModel.Accept(IVisitor visitor) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimPrimaryKeyModel.AllInstances.PrimaryKeyAttGet">
            <summary>设置 PrimaryKeyModel.get_PrimaryKeyAtt() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimPrimaryKeyModel.AllInstances.PropertyGet">
            <summary>设置 PrimaryKeyModel.get_Property() 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Internal.Fakes.ShimPropertyModel">
            <summary>Castle.ActiveRecord.Framework.Internal.PropertyModel 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimPropertyModel.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimPropertyModel.#ctor(Castle.ActiveRecord.Framework.Internal.PropertyModel)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimPropertyModel.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimPropertyModel.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimPropertyModel.Bind(Castle.ActiveRecord.Framework.Internal.IVisitable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimPropertyModel.AcceptIVisitor">
            <summary>设置 PropertyModel.Accept(IVisitor visitor) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimPropertyModel.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimPropertyModel.Constructor">
            <summary>设置 PropertyModel.PropertyModel() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimPropertyModel.ConstructorPropertyInfoPropertyAttribute">
            <summary>设置 PropertyModel.PropertyModel(PropertyInfo prop, PropertyAttribute att) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimPropertyModel.PropertyAttGet">
            <summary>设置 PropertyModel.get_PropertyAtt() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimPropertyModel.PropertyGet">
            <summary>设置 PropertyModel.get_Property() 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Internal.Fakes.ShimPropertyModel.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimPropertyModel.AllInstances.AcceptIVisitor">
            <summary>设置 PropertyModel.Accept(IVisitor visitor) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimPropertyModel.AllInstances.PropertyAttGet">
            <summary>设置 PropertyModel.get_PropertyAtt() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimPropertyModel.AllInstances.PropertyGet">
            <summary>设置 PropertyModel.get_Property() 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Internal.Fakes.ShimSemanticVerifierVisitor">
            <summary>Castle.ActiveRecord.Framework.Internal.SemanticVerifierVisitor 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimSemanticVerifierVisitor.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimSemanticVerifierVisitor.#ctor(Castle.ActiveRecord.Framework.Internal.SemanticVerifierVisitor)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimSemanticVerifierVisitor.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimSemanticVerifierVisitor.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimSemanticVerifierVisitor.Bind(Castle.ActiveRecord.Framework.Internal.IVisitor)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimSemanticVerifierVisitor.AssertHasValidKeyActiveRecordModel">
            <summary>设置 SemanticVerifierVisitor.AssertHasValidKey(ActiveRecordModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimSemanticVerifierVisitor.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimSemanticVerifierVisitor.ConstructorActiveRecordModelCollection">
            <summary>设置 SemanticVerifierVisitor.SemanticVerifierVisitor(ActiveRecordModelCollection arCollection) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimSemanticVerifierVisitor.GetIndexTypeFromDictionaryType">
            <summary>设置 SemanticVerifierVisitor.GetIndexTypeFromDictionary(Type propertyType) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimSemanticVerifierVisitor.GetMapTypeFromDictionaryType">
            <summary>设置 SemanticVerifierVisitor.GetMapTypeFromDictionary(Type propertyType) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimSemanticVerifierVisitor.GuessElementMappingBasedOnEnumHasManyModel">
            <summary>设置 SemanticVerifierVisitor.GuessElementMappingBasedOnEnum(HasManyModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimSemanticVerifierVisitor.GuessRelationPropertyInfoRelationType">
            <summary>设置 SemanticVerifierVisitor.GuessRelation(PropertyInfo property, RelationType type) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimSemanticVerifierVisitor.ObtainJoinedTableIfPresentMemberInfoWithAccessOptionalTableAttribute">
            <summary>设置 SemanticVerifierVisitor.ObtainJoinedTableIfPresent(MemberInfo propertyOrField, WithAccessOptionalTableAttribute access) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimSemanticVerifierVisitor.ObtainNullableTypeNameForCLRNullableType">
            <summary>设置 SemanticVerifierVisitor.ObtainNullableTypeNameForCLRNullable(Type type) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimSemanticVerifierVisitor.VisitAnyAnyModel">
            <summary>设置 SemanticVerifierVisitor.VisitAny(AnyModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimSemanticVerifierVisitor.VisitBelongsToBelongsToModel">
            <summary>设置 SemanticVerifierVisitor.VisitBelongsTo(BelongsToModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimSemanticVerifierVisitor.VisitCompositePrimaryKeyCompositeKeyModel">
            <summary>设置 SemanticVerifierVisitor.VisitCompositePrimaryKey(CompositeKeyModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimSemanticVerifierVisitor.VisitCompositeUserTypeCompositeUserTypeModel">
            <summary>设置 SemanticVerifierVisitor.VisitCompositeUserType(CompositeUserTypeModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimSemanticVerifierVisitor.VisitFieldFieldModel">
            <summary>设置 SemanticVerifierVisitor.VisitField(FieldModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimSemanticVerifierVisitor.VisitHasAndBelongsToManyHasAndBelongsToManyModel">
            <summary>设置 SemanticVerifierVisitor.VisitHasAndBelongsToMany(HasAndBelongsToManyModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimSemanticVerifierVisitor.VisitHasManyHasManyModel">
            <summary>设置 SemanticVerifierVisitor.VisitHasMany(HasManyModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimSemanticVerifierVisitor.VisitHasManyToAnyHasManyToAnyModel">
            <summary>设置 SemanticVerifierVisitor.VisitHasManyToAny(HasManyToAnyModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimSemanticVerifierVisitor.VisitJoinedTableJoinedTableModel">
            <summary>设置 SemanticVerifierVisitor.VisitJoinedTable(JoinedTableModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimSemanticVerifierVisitor.VisitKeyKeyModel">
            <summary>设置 SemanticVerifierVisitor.VisitKey(KeyModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimSemanticVerifierVisitor.VisitModelActiveRecordModel">
            <summary>设置 SemanticVerifierVisitor.VisitModel(ActiveRecordModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimSemanticVerifierVisitor.VisitNestedNestedModel">
            <summary>设置 SemanticVerifierVisitor.VisitNested(NestedModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimSemanticVerifierVisitor.VisitOneToOneOneToOneModel">
            <summary>设置 SemanticVerifierVisitor.VisitOneToOne(OneToOneModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimSemanticVerifierVisitor.VisitPrimaryKeyPrimaryKeyModel">
            <summary>设置 SemanticVerifierVisitor.VisitPrimaryKey(PrimaryKeyModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimSemanticVerifierVisitor.VisitPropertyPropertyModel">
            <summary>设置 SemanticVerifierVisitor.VisitProperty(PropertyModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimSemanticVerifierVisitor.VisitTimestampTimestampModel">
            <summary>设置 SemanticVerifierVisitor.VisitTimestamp(TimestampModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimSemanticVerifierVisitor.VisitVersionVersionModel">
            <summary>设置 SemanticVerifierVisitor.VisitVersion(VersionModel model) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Internal.Fakes.ShimSemanticVerifierVisitor.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimSemanticVerifierVisitor.AllInstances.ObtainJoinedTableIfPresentMemberInfoWithAccessOptionalTableAttribute">
            <summary>设置 SemanticVerifierVisitor.ObtainJoinedTableIfPresent(MemberInfo propertyOrField, WithAccessOptionalTableAttribute access) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimSemanticVerifierVisitor.AllInstances.VisitAnyAnyModel">
            <summary>设置 SemanticVerifierVisitor.VisitAny(AnyModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimSemanticVerifierVisitor.AllInstances.VisitBelongsToBelongsToModel">
            <summary>设置 SemanticVerifierVisitor.VisitBelongsTo(BelongsToModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimSemanticVerifierVisitor.AllInstances.VisitCompositePrimaryKeyCompositeKeyModel">
            <summary>设置 SemanticVerifierVisitor.VisitCompositePrimaryKey(CompositeKeyModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimSemanticVerifierVisitor.AllInstances.VisitCompositeUserTypeCompositeUserTypeModel">
            <summary>设置 SemanticVerifierVisitor.VisitCompositeUserType(CompositeUserTypeModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimSemanticVerifierVisitor.AllInstances.VisitFieldFieldModel">
            <summary>设置 SemanticVerifierVisitor.VisitField(FieldModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimSemanticVerifierVisitor.AllInstances.VisitHasAndBelongsToManyHasAndBelongsToManyModel">
            <summary>设置 SemanticVerifierVisitor.VisitHasAndBelongsToMany(HasAndBelongsToManyModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimSemanticVerifierVisitor.AllInstances.VisitHasManyHasManyModel">
            <summary>设置 SemanticVerifierVisitor.VisitHasMany(HasManyModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimSemanticVerifierVisitor.AllInstances.VisitHasManyToAnyHasManyToAnyModel">
            <summary>设置 SemanticVerifierVisitor.VisitHasManyToAny(HasManyToAnyModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimSemanticVerifierVisitor.AllInstances.VisitJoinedTableJoinedTableModel">
            <summary>设置 SemanticVerifierVisitor.VisitJoinedTable(JoinedTableModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimSemanticVerifierVisitor.AllInstances.VisitKeyKeyModel">
            <summary>设置 SemanticVerifierVisitor.VisitKey(KeyModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimSemanticVerifierVisitor.AllInstances.VisitModelActiveRecordModel">
            <summary>设置 SemanticVerifierVisitor.VisitModel(ActiveRecordModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimSemanticVerifierVisitor.AllInstances.VisitNestedNestedModel">
            <summary>设置 SemanticVerifierVisitor.VisitNested(NestedModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimSemanticVerifierVisitor.AllInstances.VisitOneToOneOneToOneModel">
            <summary>设置 SemanticVerifierVisitor.VisitOneToOne(OneToOneModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimSemanticVerifierVisitor.AllInstances.VisitPrimaryKeyPrimaryKeyModel">
            <summary>设置 SemanticVerifierVisitor.VisitPrimaryKey(PrimaryKeyModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimSemanticVerifierVisitor.AllInstances.VisitPropertyPropertyModel">
            <summary>设置 SemanticVerifierVisitor.VisitProperty(PropertyModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimSemanticVerifierVisitor.AllInstances.VisitTimestampTimestampModel">
            <summary>设置 SemanticVerifierVisitor.VisitTimestamp(TimestampModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimSemanticVerifierVisitor.AllInstances.VisitVersionVersionModel">
            <summary>设置 SemanticVerifierVisitor.VisitVersion(VersionModel model) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Internal.Fakes.ShimTimestampModel">
            <summary>Castle.ActiveRecord.Framework.Internal.TimestampModel 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimTimestampModel.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimTimestampModel.#ctor(Castle.ActiveRecord.Framework.Internal.TimestampModel)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimTimestampModel.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimTimestampModel.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimTimestampModel.Bind(Castle.ActiveRecord.Framework.Internal.IVisitable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimTimestampModel.AcceptIVisitor">
            <summary>设置 TimestampModel.Accept(IVisitor visitor) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimTimestampModel.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimTimestampModel.ConstructorPropertyInfoTimestampAttribute">
            <summary>设置 TimestampModel.TimestampModel(PropertyInfo prop, TimestampAttribute att) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimTimestampModel.PropertyGet">
            <summary>设置 TimestampModel.get_Property() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimTimestampModel.TimestampAttGet">
            <summary>设置 TimestampModel.get_TimestampAtt() 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Internal.Fakes.ShimTimestampModel.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimTimestampModel.AllInstances.AcceptIVisitor">
            <summary>设置 TimestampModel.Accept(IVisitor visitor) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimTimestampModel.AllInstances.PropertyGet">
            <summary>设置 TimestampModel.get_Property() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimTimestampModel.AllInstances.TimestampAttGet">
            <summary>设置 TimestampModel.get_TimestampAtt() 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Internal.Fakes.ShimVersionModel">
            <summary>Castle.ActiveRecord.Framework.Internal.VersionModel 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimVersionModel.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimVersionModel.#ctor(Castle.ActiveRecord.Framework.Internal.VersionModel)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimVersionModel.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimVersionModel.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimVersionModel.Bind(Castle.ActiveRecord.Framework.Internal.IVisitable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimVersionModel.AcceptIVisitor">
            <summary>设置 VersionModel.Accept(IVisitor visitor) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimVersionModel.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimVersionModel.ConstructorPropertyInfoVersionAttribute">
            <summary>设置 VersionModel.VersionModel(PropertyInfo prop, VersionAttribute att) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimVersionModel.PropertyGet">
            <summary>设置 VersionModel.get_Property() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimVersionModel.VersionAttGet">
            <summary>设置 VersionModel.get_VersionAtt() 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Internal.Fakes.ShimVersionModel.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimVersionModel.AllInstances.AcceptIVisitor">
            <summary>设置 VersionModel.Accept(IVisitor visitor) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimVersionModel.AllInstances.PropertyGet">
            <summary>设置 VersionModel.get_Property() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimVersionModel.AllInstances.VersionAttGet">
            <summary>设置 VersionModel.get_VersionAtt() 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor">
            <summary>Castle.ActiveRecord.Framework.Internal.XmlGenerationVisitor 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.#ctor(Castle.ActiveRecord.Framework.Internal.XmlGenerationVisitor)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.Bind(Castle.ActiveRecord.Framework.Internal.IVisitor)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.AppendFStringObjectArray">
            <summary>设置 XmlGenerationVisitor.AppendF(String xml, Object[] args) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.AppendFullTagStringStringArray">
            <summary>设置 XmlGenerationVisitor.AppendFullTag(String tagName, String[] attributeFragments) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.AppendIdentation">
            <summary>设置 XmlGenerationVisitor.AppendIdentation() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.AppendStartTagStringStringArray">
            <summary>设置 XmlGenerationVisitor.AppendStartTag(String tagName, String[] attributeFragments) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.AppendString">
            <summary>设置 XmlGenerationVisitor.Append(String xml) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.AppliesToCurrentTableWithAccessOptionalTableAttribute">
            <summary>设置 XmlGenerationVisitor.AppliesToCurrentTable(WithAccessOptionalTableAttribute access) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.BeginWritePropertyStringStringBooleanStringTypeBooleanBooleanBoolean">
            <summary>设置 XmlGenerationVisitor.BeginWriteProperty(String accessString, String columnType, Boolean insert, String name, Type propType, Boolean update, Boolean optimisticLock, Boolean lazy) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.ConditionalWriteStringStringBoolean">
            <summary>设置 XmlGenerationVisitor.ConditionalWrite(String attName, String value, Boolean condition) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.Constructor">
            <summary>设置 XmlGenerationVisitor.XmlGenerationVisitor() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.CreateXmlActiveRecordModel">
            <summary>设置 XmlGenerationVisitor.CreateXml(ActiveRecordModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.CreateXmlPI">
            <summary>设置 XmlGenerationVisitor.CreateXmlPI() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.Dedent">
            <summary>设置 XmlGenerationVisitor.Dedent() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.EndMappingNode">
            <summary>设置 XmlGenerationVisitor.EndMappingNode() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.EndWriteProperty">
            <summary>设置 XmlGenerationVisitor.EndWriteProperty() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.GetCollectionIDGeneratorNameCollectionIDType">
            <summary>设置 XmlGenerationVisitor.GetCollectionIDGeneratorName(CollectionIDType idType) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.GetGeneratorClassNamePrimaryKeyModel">
            <summary>设置 XmlGenerationVisitor.GetGeneratorClassName(PrimaryKeyModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.GuessGeneratorClassNamePrimaryKeyModel">
            <summary>设置 XmlGenerationVisitor.GuessGeneratorClassName(PrimaryKeyModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.Ident">
            <summary>设置 XmlGenerationVisitor.Ident() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.MakeAttStringBoolean">
            <summary>设置 XmlGenerationVisitor.MakeAtt(String attName, Boolean value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.MakeAttStringBooleanBoolean">
            <summary>设置 XmlGenerationVisitor.MakeAtt(String attName, Boolean value, Boolean output) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.MakeAttStringString">
            <summary>设置 XmlGenerationVisitor.MakeAtt(String attName, String value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.MakeClassAttType">
            <summary>设置 XmlGenerationVisitor.MakeClassAtt(Type type) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.MakeCustomTypeAttIfNotNullStringType">
            <summary>设置 XmlGenerationVisitor.MakeCustomTypeAttIfNotNull(String attName, Type type) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.MakeCustomTypeAttStringType">
            <summary>设置 XmlGenerationVisitor.MakeCustomTypeAtt(String attName, Type type) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.MakeTypeAttTypeString">
            <summary>设置 XmlGenerationVisitor.MakeTypeAtt(Type type, String typeName) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.MakeTypeNameType">
            <summary>设置 XmlGenerationVisitor.MakeTypeName(Type type) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.Reset">
            <summary>设置 XmlGenerationVisitor.Reset() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.StartMappingNodeBoolean">
            <summary>设置 XmlGenerationVisitor.StartMappingNode(Boolean useAutoImport) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.TranslateCacheEnumCacheEnum">
            <summary>设置 XmlGenerationVisitor.TranslateCacheEnum(CacheEnum cacheEnum) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.TranslateCascadeEnumCascadeEnum">
            <summary>设置 XmlGenerationVisitor.TranslateCascadeEnum(CascadeEnum cascadeEnum) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.TranslateCascadeEnumManyRelationCascadeEnum">
            <summary>设置 XmlGenerationVisitor.TranslateCascadeEnum(ManyRelationCascadeEnum cascadeEnum) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.TranslateFetchFetchEnum">
            <summary>设置 XmlGenerationVisitor.TranslateFetch(FetchEnum fetch) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.TranslateLazyFetchWhen">
            <summary>设置 XmlGenerationVisitor.TranslateLazy(FetchWhen fetchWhen) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.TranslateNotFoundBehaviourEnumNotFoundBehaviour">
            <summary>设置 XmlGenerationVisitor.TranslateNotFoundBehaviourEnum(NotFoundBehaviour notFoundBehaviourEnum) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.VisitAnyAnyModel">
            <summary>设置 XmlGenerationVisitor.VisitAny(AnyModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.VisitBelongsToBelongsToModel">
            <summary>设置 XmlGenerationVisitor.VisitBelongsTo(BelongsToModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.VisitCollectionIDCollectionIDModel">
            <summary>设置 XmlGenerationVisitor.VisitCollectionID(CollectionIDModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.VisitCompositePrimaryKeyCompositeKeyModel">
            <summary>设置 XmlGenerationVisitor.VisitCompositePrimaryKey(CompositeKeyModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.VisitCompositeUserTypeCompositeUserTypeModel">
            <summary>设置 XmlGenerationVisitor.VisitCompositeUserType(CompositeUserTypeModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.VisitDependentObjectDependentObjectModel">
            <summary>设置 XmlGenerationVisitor.VisitDependentObject(DependentObjectModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.VisitFieldFieldModel">
            <summary>设置 XmlGenerationVisitor.VisitField(FieldModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.VisitHasAndBelongsToManyHasAndBelongsToManyModel">
            <summary>设置 XmlGenerationVisitor.VisitHasAndBelongsToMany(HasAndBelongsToManyModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.VisitHasManyHasManyModel">
            <summary>设置 XmlGenerationVisitor.VisitHasMany(HasManyModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.VisitHasManyToAnyConfigHasManyToAnyModelConfig">
            <summary>设置 XmlGenerationVisitor.VisitHasManyToAnyConfig(Config model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.VisitHasManyToAnyHasManyToAnyModel">
            <summary>设置 XmlGenerationVisitor.VisitHasManyToAny(HasManyToAnyModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.VisitHiloHiloModel">
            <summary>设置 XmlGenerationVisitor.VisitHilo(HiloModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.VisitImportImportModel">
            <summary>设置 XmlGenerationVisitor.VisitImport(ImportModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.VisitJoinedTableJoinedTableModel">
            <summary>设置 XmlGenerationVisitor.VisitJoinedTable(JoinedTableModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.VisitKeyKeyModel">
            <summary>设置 XmlGenerationVisitor.VisitKey(KeyModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.VisitModelActiveRecordModel">
            <summary>设置 XmlGenerationVisitor.VisitModel(ActiveRecordModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.VisitNestedNestedModel">
            <summary>设置 XmlGenerationVisitor.VisitNested(NestedModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.VisitNestedParentReferenceNestedParentReferenceModel">
            <summary>设置 XmlGenerationVisitor.VisitNestedParentReference(NestedParentReferenceModel referenceModel) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.VisitOneToOneOneToOneModel">
            <summary>设置 XmlGenerationVisitor.VisitOneToOne(OneToOneModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.VisitPrimaryKeyPrimaryKeyModel">
            <summary>设置 XmlGenerationVisitor.VisitPrimaryKey(PrimaryKeyModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.VisitPropertyPropertyModel">
            <summary>设置 XmlGenerationVisitor.VisitProperty(PropertyModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.VisitTimestampTimestampModel">
            <summary>设置 XmlGenerationVisitor.VisitTimestamp(TimestampModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.VisitVersionVersionModel">
            <summary>设置 XmlGenerationVisitor.VisitVersion(VersionModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.WriteCacheCacheEnumString">
            <summary>设置 XmlGenerationVisitor.WriteCache(CacheEnum cacheEnum, String cacheregion) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.WriteColumnStringStringStringInt32BooleanStringBooleanStringString">
            <summary>设置 XmlGenerationVisitor.WriteColumn(String check, String column, String index, Int32 length, Boolean notNull, String sqlType, Boolean unique, String uniqueKey, String default) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.WriteCompositeColumnsStringArray">
            <summary>设置 XmlGenerationVisitor.WriteCompositeColumns(String[] columns) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.WriteDiscriminatorActiveRecordModel">
            <summary>设置 XmlGenerationVisitor.WriteDiscriminator(ActiveRecordModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.WriteElementStringTypeType">
            <summary>设置 XmlGenerationVisitor.WriteElement(String element, Type elementType, Type targetType) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.WriteFormulaString">
            <summary>设置 XmlGenerationVisitor.WriteFormula(String formula) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.WriteIfFalseStringBoolean">
            <summary>设置 XmlGenerationVisitor.WriteIfFalse(String attName, Boolean value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.WriteIfNonNullStringString">
            <summary>设置 XmlGenerationVisitor.WriteIfNonNull(String attName, String value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.WriteIfNotOneStringInt32">
            <summary>设置 XmlGenerationVisitor.WriteIfNotOne(String attName, Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.WriteIfNotZeroStringInt32">
            <summary>设置 XmlGenerationVisitor.WriteIfNotZero(String attName, Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.WriteIfTrueStringBoolean">
            <summary>设置 XmlGenerationVisitor.WriteIfTrue(String attName, Boolean value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.WriteIndexStringString">
            <summary>设置 XmlGenerationVisitor.WriteIndex(String column, String type) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.WriteKeyString">
            <summary>设置 XmlGenerationVisitor.WriteKey(String column) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.WriteManyToManyTypeStringArrayStringString">
            <summary>设置 XmlGenerationVisitor.WriteManyToMany(Type type, String[] compositeKeyColumnRefs, String notFoundMode, String foreignKey) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.WriteManyToManyTypeStringStringString">
            <summary>设置 XmlGenerationVisitor.WriteManyToMany(Type type, String columnRef, String notFoundMode, String foreignKey) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.WriteOneToManyTypeString">
            <summary>设置 XmlGenerationVisitor.WriteOneToMany(Type type, String notFoundMode) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.WritePropertyStringTypeStringStringBooleanBooleanBooleanStringStringInt32BooleanBooleanStringStringStringStringStringBoolean">
            <summary>设置 XmlGenerationVisitor.WriteProperty(String name, Type propType, String accessString, String columnType, Boolean insert, Boolean update, Boolean lazy, String formula, String column, Int32 length, Boolean notNull, Boolean unique, String uniqueKey, String sqlType, String index, String check, String default, Boolean optimisticLock) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.WriteTuplizerType">
            <summary>设置 XmlGenerationVisitor.WriteTuplizer(Type tuplizer) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.XmlGet">
            <summary>设置 XmlGenerationVisitor.get_Xml() 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.AllInstances.AppendFStringObjectArray">
            <summary>设置 XmlGenerationVisitor.AppendF(String xml, Object[] args) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.AllInstances.AppendFullTagStringStringArray">
            <summary>设置 XmlGenerationVisitor.AppendFullTag(String tagName, String[] attributeFragments) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.AllInstances.AppendIdentation">
            <summary>设置 XmlGenerationVisitor.AppendIdentation() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.AllInstances.AppendStartTagStringStringArray">
            <summary>设置 XmlGenerationVisitor.AppendStartTag(String tagName, String[] attributeFragments) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.AllInstances.AppendString">
            <summary>设置 XmlGenerationVisitor.Append(String xml) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.AllInstances.AppliesToCurrentTableWithAccessOptionalTableAttribute">
            <summary>设置 XmlGenerationVisitor.AppliesToCurrentTable(WithAccessOptionalTableAttribute access) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.AllInstances.BeginWritePropertyStringStringBooleanStringTypeBooleanBooleanBoolean">
            <summary>设置 XmlGenerationVisitor.BeginWriteProperty(String accessString, String columnType, Boolean insert, String name, Type propType, Boolean update, Boolean optimisticLock, Boolean lazy) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.AllInstances.ConditionalWriteStringStringBoolean">
            <summary>设置 XmlGenerationVisitor.ConditionalWrite(String attName, String value, Boolean condition) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.AllInstances.CreateXmlActiveRecordModel">
            <summary>设置 XmlGenerationVisitor.CreateXml(ActiveRecordModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.AllInstances.CreateXmlPI">
            <summary>设置 XmlGenerationVisitor.CreateXmlPI() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.AllInstances.Dedent">
            <summary>设置 XmlGenerationVisitor.Dedent() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.AllInstances.EndMappingNode">
            <summary>设置 XmlGenerationVisitor.EndMappingNode() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.AllInstances.EndWriteProperty">
            <summary>设置 XmlGenerationVisitor.EndWriteProperty() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.AllInstances.GetCollectionIDGeneratorNameCollectionIDType">
            <summary>设置 XmlGenerationVisitor.GetCollectionIDGeneratorName(CollectionIDType idType) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.AllInstances.Ident">
            <summary>设置 XmlGenerationVisitor.Ident() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.AllInstances.MakeAttStringBoolean">
            <summary>设置 XmlGenerationVisitor.MakeAtt(String attName, Boolean value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.AllInstances.MakeAttStringBooleanBoolean">
            <summary>设置 XmlGenerationVisitor.MakeAtt(String attName, Boolean value, Boolean output) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.AllInstances.MakeAttStringString">
            <summary>设置 XmlGenerationVisitor.MakeAtt(String attName, String value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.AllInstances.MakeClassAttType">
            <summary>设置 XmlGenerationVisitor.MakeClassAtt(Type type) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.AllInstances.MakeCustomTypeAttIfNotNullStringType">
            <summary>设置 XmlGenerationVisitor.MakeCustomTypeAttIfNotNull(String attName, Type type) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.AllInstances.MakeCustomTypeAttStringType">
            <summary>设置 XmlGenerationVisitor.MakeCustomTypeAtt(String attName, Type type) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.AllInstances.MakeTypeAttTypeString">
            <summary>设置 XmlGenerationVisitor.MakeTypeAtt(Type type, String typeName) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.AllInstances.Reset">
            <summary>设置 XmlGenerationVisitor.Reset() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.AllInstances.StartMappingNodeBoolean">
            <summary>设置 XmlGenerationVisitor.StartMappingNode(Boolean useAutoImport) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.AllInstances.VisitAnyAnyModel">
            <summary>设置 XmlGenerationVisitor.VisitAny(AnyModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.AllInstances.VisitBelongsToBelongsToModel">
            <summary>设置 XmlGenerationVisitor.VisitBelongsTo(BelongsToModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.AllInstances.VisitCollectionIDCollectionIDModel">
            <summary>设置 XmlGenerationVisitor.VisitCollectionID(CollectionIDModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.AllInstances.VisitCompositePrimaryKeyCompositeKeyModel">
            <summary>设置 XmlGenerationVisitor.VisitCompositePrimaryKey(CompositeKeyModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.AllInstances.VisitCompositeUserTypeCompositeUserTypeModel">
            <summary>设置 XmlGenerationVisitor.VisitCompositeUserType(CompositeUserTypeModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.AllInstances.VisitDependentObjectDependentObjectModel">
            <summary>设置 XmlGenerationVisitor.VisitDependentObject(DependentObjectModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.AllInstances.VisitFieldFieldModel">
            <summary>设置 XmlGenerationVisitor.VisitField(FieldModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.AllInstances.VisitHasAndBelongsToManyHasAndBelongsToManyModel">
            <summary>设置 XmlGenerationVisitor.VisitHasAndBelongsToMany(HasAndBelongsToManyModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.AllInstances.VisitHasManyHasManyModel">
            <summary>设置 XmlGenerationVisitor.VisitHasMany(HasManyModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.AllInstances.VisitHasManyToAnyConfigHasManyToAnyModelConfig">
            <summary>设置 XmlGenerationVisitor.VisitHasManyToAnyConfig(Config model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.AllInstances.VisitHasManyToAnyHasManyToAnyModel">
            <summary>设置 XmlGenerationVisitor.VisitHasManyToAny(HasManyToAnyModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.AllInstances.VisitHiloHiloModel">
            <summary>设置 XmlGenerationVisitor.VisitHilo(HiloModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.AllInstances.VisitImportImportModel">
            <summary>设置 XmlGenerationVisitor.VisitImport(ImportModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.AllInstances.VisitJoinedTableJoinedTableModel">
            <summary>设置 XmlGenerationVisitor.VisitJoinedTable(JoinedTableModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.AllInstances.VisitKeyKeyModel">
            <summary>设置 XmlGenerationVisitor.VisitKey(KeyModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.AllInstances.VisitModelActiveRecordModel">
            <summary>设置 XmlGenerationVisitor.VisitModel(ActiveRecordModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.AllInstances.VisitNestedNestedModel">
            <summary>设置 XmlGenerationVisitor.VisitNested(NestedModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.AllInstances.VisitNestedParentReferenceNestedParentReferenceModel">
            <summary>设置 XmlGenerationVisitor.VisitNestedParentReference(NestedParentReferenceModel referenceModel) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.AllInstances.VisitOneToOneOneToOneModel">
            <summary>设置 XmlGenerationVisitor.VisitOneToOne(OneToOneModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.AllInstances.VisitPrimaryKeyPrimaryKeyModel">
            <summary>设置 XmlGenerationVisitor.VisitPrimaryKey(PrimaryKeyModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.AllInstances.VisitPropertyPropertyModel">
            <summary>设置 XmlGenerationVisitor.VisitProperty(PropertyModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.AllInstances.VisitTimestampTimestampModel">
            <summary>设置 XmlGenerationVisitor.VisitTimestamp(TimestampModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.AllInstances.VisitVersionVersionModel">
            <summary>设置 XmlGenerationVisitor.VisitVersion(VersionModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.AllInstances.WriteCacheCacheEnumString">
            <summary>设置 XmlGenerationVisitor.WriteCache(CacheEnum cacheEnum, String cacheregion) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.AllInstances.WriteCollectionManyRelationCascadeEnumTypeRelationTypeStringStringStringStringStringBooleanStringStringStringStringStringArrayStringTypeStringStringArrayIVisitableStringStringCacheEnumStringNotFoundBehaviourFetchEnumInt32TypeStringBoolean">
            <summary>设置 XmlGenerationVisitor.WriteCollection(ManyRelationCascadeEnum cascadeEnum, Type targetType, RelationType type, String name, String accessString, String table, String schema, String lazy, Boolean inverse, String orderBy, String where, String sort, String columnKey, String[] compositeKeyColumnKeys, String element, Type elementType, String columnRef, String[] compositeKeyColumnRefs, IVisitable extraModel, String index, String indexType, CacheEnum cache, String cacheregion, NotFoundBehaviour notFoundBehaviour, FetchEnum fetch, Int32 batchSize, Type collectionType, String foreignKey, Boolean optimisticLock) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.AllInstances.WriteColumnStringStringStringInt32BooleanStringBooleanStringString">
            <summary>设置 XmlGenerationVisitor.WriteColumn(String check, String column, String index, Int32 length, Boolean notNull, String sqlType, Boolean unique, String uniqueKey, String default) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.AllInstances.WriteCompositeColumnsStringArray">
            <summary>设置 XmlGenerationVisitor.WriteCompositeColumns(String[] columns) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.AllInstances.WriteDiscriminatorActiveRecordModel">
            <summary>设置 XmlGenerationVisitor.WriteDiscriminator(ActiveRecordModel model) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.AllInstances.WriteElementStringTypeType">
            <summary>设置 XmlGenerationVisitor.WriteElement(String element, Type elementType, Type targetType) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.AllInstances.WriteFormulaString">
            <summary>设置 XmlGenerationVisitor.WriteFormula(String formula) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.AllInstances.WriteIfFalseStringBoolean">
            <summary>设置 XmlGenerationVisitor.WriteIfFalse(String attName, Boolean value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.AllInstances.WriteIfNonNullStringString">
            <summary>设置 XmlGenerationVisitor.WriteIfNonNull(String attName, String value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.AllInstances.WriteIfNotOneStringInt32">
            <summary>设置 XmlGenerationVisitor.WriteIfNotOne(String attName, Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.AllInstances.WriteIfNotZeroStringInt32">
            <summary>设置 XmlGenerationVisitor.WriteIfNotZero(String attName, Int32 value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.AllInstances.WriteIfTrueStringBoolean">
            <summary>设置 XmlGenerationVisitor.WriteIfTrue(String attName, Boolean value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.AllInstances.WriteIndexStringString">
            <summary>设置 XmlGenerationVisitor.WriteIndex(String column, String type) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.AllInstances.WriteKeyString">
            <summary>设置 XmlGenerationVisitor.WriteKey(String column) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.AllInstances.WriteManyToManyTypeStringArrayStringString">
            <summary>设置 XmlGenerationVisitor.WriteManyToMany(Type type, String[] compositeKeyColumnRefs, String notFoundMode, String foreignKey) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.AllInstances.WriteManyToManyTypeStringStringString">
            <summary>设置 XmlGenerationVisitor.WriteManyToMany(Type type, String columnRef, String notFoundMode, String foreignKey) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.AllInstances.WriteOneToManyTypeString">
            <summary>设置 XmlGenerationVisitor.WriteOneToMany(Type type, String notFoundMode) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.AllInstances.WritePropertyStringTypeStringStringBooleanBooleanBooleanStringStringInt32BooleanBooleanStringStringStringStringStringBoolean">
            <summary>设置 XmlGenerationVisitor.WriteProperty(String name, Type propType, String accessString, String columnType, Boolean insert, Boolean update, Boolean lazy, String formula, String column, Int32 length, Boolean notNull, Boolean unique, String uniqueKey, String sqlType, String index, String check, String default, Boolean optimisticLock) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.AllInstances.WriteTuplizerType">
            <summary>设置 XmlGenerationVisitor.WriteTuplizer(Type tuplizer) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.ShimXmlGenerationVisitor.AllInstances.XmlGet">
            <summary>设置 XmlGenerationVisitor.get_Xml() 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Internal.Fakes.StubARSchemaCreator">
            <summary>Castle.ActiveRecord.Framework.Internal.ARSchemaCreator 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubARSchemaCreator.#ctor(NHibernate.Cfg.Configuration)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubARSchemaCreator.InitializeStub">
            <summary>初始化 type StubARSchemaCreator 的新实例</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.StubARSchemaCreator.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.StubARSchemaCreator.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.StubARSchemaCreator.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Internal.Fakes.StubAbstractDepthFirstVisitor">
            <summary>Castle.ActiveRecord.Framework.Internal.AbstractDepthFirstVisitor 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubAbstractDepthFirstVisitor.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubAbstractDepthFirstVisitor.InitializeStub">
            <summary>初始化 type StubAbstractDepthFirstVisitor 的新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubAbstractDepthFirstVisitor.VisitAny(Castle.ActiveRecord.Framework.Internal.AnyModel)">
            <summary>设置 AbstractDepthFirstVisitor.VisitAny(AnyModel model) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Internal.Fakes.StubAbstractDepthFirstVisitor.VisitAnyAnyModel">
            <summary>设置 AbstractDepthFirstVisitor.VisitAny(AnyModel model) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubAbstractDepthFirstVisitor.VisitBelongsTo(Castle.ActiveRecord.Framework.Internal.BelongsToModel)">
            <summary>设置 AbstractDepthFirstVisitor.VisitBelongsTo(BelongsToModel model) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Internal.Fakes.StubAbstractDepthFirstVisitor.VisitBelongsToBelongsToModel">
            <summary>设置 AbstractDepthFirstVisitor.VisitBelongsTo(BelongsToModel model) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubAbstractDepthFirstVisitor.VisitCollectionID(Castle.ActiveRecord.Framework.Internal.CollectionIDModel)">
            <summary>设置 AbstractDepthFirstVisitor.VisitCollectionID(CollectionIDModel model) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Internal.Fakes.StubAbstractDepthFirstVisitor.VisitCollectionIDCollectionIDModel">
            <summary>设置 AbstractDepthFirstVisitor.VisitCollectionID(CollectionIDModel model) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubAbstractDepthFirstVisitor.VisitCompositePrimaryKey(Castle.ActiveRecord.Framework.Internal.CompositeKeyModel)">
            <summary>设置 AbstractDepthFirstVisitor.VisitCompositePrimaryKey(CompositeKeyModel model) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Internal.Fakes.StubAbstractDepthFirstVisitor.VisitCompositePrimaryKeyCompositeKeyModel">
            <summary>设置 AbstractDepthFirstVisitor.VisitCompositePrimaryKey(CompositeKeyModel model) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubAbstractDepthFirstVisitor.VisitCompositeUserType(Castle.ActiveRecord.Framework.Internal.CompositeUserTypeModel)">
            <summary>设置 AbstractDepthFirstVisitor.VisitCompositeUserType(CompositeUserTypeModel model) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Internal.Fakes.StubAbstractDepthFirstVisitor.VisitCompositeUserTypeCompositeUserTypeModel">
            <summary>设置 AbstractDepthFirstVisitor.VisitCompositeUserType(CompositeUserTypeModel model) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubAbstractDepthFirstVisitor.VisitDependentObject(Castle.ActiveRecord.Framework.Internal.DependentObjectModel)">
            <summary>设置 AbstractDepthFirstVisitor.VisitDependentObject(DependentObjectModel model) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Internal.Fakes.StubAbstractDepthFirstVisitor.VisitDependentObjectDependentObjectModel">
            <summary>设置 AbstractDepthFirstVisitor.VisitDependentObject(DependentObjectModel model) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubAbstractDepthFirstVisitor.VisitField(Castle.ActiveRecord.Framework.Internal.FieldModel)">
            <summary>设置 AbstractDepthFirstVisitor.VisitField(FieldModel model) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Internal.Fakes.StubAbstractDepthFirstVisitor.VisitFieldFieldModel">
            <summary>设置 AbstractDepthFirstVisitor.VisitField(FieldModel model) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubAbstractDepthFirstVisitor.VisitHasAndBelongsToMany(Castle.ActiveRecord.Framework.Internal.HasAndBelongsToManyModel)">
            <summary>设置 AbstractDepthFirstVisitor.VisitHasAndBelongsToMany(HasAndBelongsToManyModel model) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Internal.Fakes.StubAbstractDepthFirstVisitor.VisitHasAndBelongsToManyHasAndBelongsToManyModel">
            <summary>设置 AbstractDepthFirstVisitor.VisitHasAndBelongsToMany(HasAndBelongsToManyModel model) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubAbstractDepthFirstVisitor.VisitHasMany(Castle.ActiveRecord.Framework.Internal.HasManyModel)">
            <summary>设置 AbstractDepthFirstVisitor.VisitHasMany(HasManyModel model) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Internal.Fakes.StubAbstractDepthFirstVisitor.VisitHasManyHasManyModel">
            <summary>设置 AbstractDepthFirstVisitor.VisitHasMany(HasManyModel model) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubAbstractDepthFirstVisitor.VisitHasManyToAny(Castle.ActiveRecord.Framework.Internal.HasManyToAnyModel)">
            <summary>设置 AbstractDepthFirstVisitor.VisitHasManyToAny(HasManyToAnyModel model) 的 存根</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubAbstractDepthFirstVisitor.VisitHasManyToAnyConfig(Castle.ActiveRecord.Framework.Internal.HasManyToAnyModel.Config)">
            <summary>设置 AbstractDepthFirstVisitor.VisitHasManyToAnyConfig(Config hasManyToAnyConfigModel) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Internal.Fakes.StubAbstractDepthFirstVisitor.VisitHasManyToAnyConfigHasManyToAnyModelConfig">
            <summary>设置 AbstractDepthFirstVisitor.VisitHasManyToAnyConfig(Config hasManyToAnyConfigModel) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Internal.Fakes.StubAbstractDepthFirstVisitor.VisitHasManyToAnyHasManyToAnyModel">
            <summary>设置 AbstractDepthFirstVisitor.VisitHasManyToAny(HasManyToAnyModel model) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubAbstractDepthFirstVisitor.VisitHilo(Castle.ActiveRecord.Framework.Internal.HiloModel)">
            <summary>设置 AbstractDepthFirstVisitor.VisitHilo(HiloModel model) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Internal.Fakes.StubAbstractDepthFirstVisitor.VisitHiloHiloModel">
            <summary>设置 AbstractDepthFirstVisitor.VisitHilo(HiloModel model) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubAbstractDepthFirstVisitor.VisitImport(Castle.ActiveRecord.Framework.Internal.ImportModel)">
            <summary>设置 AbstractDepthFirstVisitor.VisitImport(ImportModel model) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Internal.Fakes.StubAbstractDepthFirstVisitor.VisitImportImportModel">
            <summary>设置 AbstractDepthFirstVisitor.VisitImport(ImportModel model) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubAbstractDepthFirstVisitor.VisitJoinedTable(Castle.ActiveRecord.Framework.Internal.JoinedTableModel)">
            <summary>设置 AbstractDepthFirstVisitor.VisitJoinedTable(JoinedTableModel model) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Internal.Fakes.StubAbstractDepthFirstVisitor.VisitJoinedTableJoinedTableModel">
            <summary>设置 AbstractDepthFirstVisitor.VisitJoinedTable(JoinedTableModel model) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubAbstractDepthFirstVisitor.VisitKey(Castle.ActiveRecord.Framework.Internal.KeyModel)">
            <summary>设置 AbstractDepthFirstVisitor.VisitKey(KeyModel model) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Internal.Fakes.StubAbstractDepthFirstVisitor.VisitKeyKeyModel">
            <summary>设置 AbstractDepthFirstVisitor.VisitKey(KeyModel model) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubAbstractDepthFirstVisitor.VisitModel(Castle.ActiveRecord.Framework.Internal.ActiveRecordModel)">
            <summary>设置 AbstractDepthFirstVisitor.VisitModel(ActiveRecordModel model) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Internal.Fakes.StubAbstractDepthFirstVisitor.VisitModelActiveRecordModel">
            <summary>设置 AbstractDepthFirstVisitor.VisitModel(ActiveRecordModel model) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubAbstractDepthFirstVisitor.VisitNested(Castle.ActiveRecord.Framework.Internal.NestedModel)">
            <summary>设置 AbstractDepthFirstVisitor.VisitNested(NestedModel model) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Internal.Fakes.StubAbstractDepthFirstVisitor.VisitNestedNestedModel">
            <summary>设置 AbstractDepthFirstVisitor.VisitNested(NestedModel model) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubAbstractDepthFirstVisitor.VisitNestedParentReference(Castle.ActiveRecord.Framework.Internal.NestedParentReferenceModel)">
            <summary>设置 AbstractDepthFirstVisitor.VisitNestedParentReference(NestedParentReferenceModel referenceModel) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Internal.Fakes.StubAbstractDepthFirstVisitor.VisitNestedParentReferenceNestedParentReferenceModel">
            <summary>设置 AbstractDepthFirstVisitor.VisitNestedParentReference(NestedParentReferenceModel referenceModel) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubAbstractDepthFirstVisitor.VisitOneToOne(Castle.ActiveRecord.Framework.Internal.OneToOneModel)">
            <summary>设置 AbstractDepthFirstVisitor.VisitOneToOne(OneToOneModel model) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Internal.Fakes.StubAbstractDepthFirstVisitor.VisitOneToOneOneToOneModel">
            <summary>设置 AbstractDepthFirstVisitor.VisitOneToOne(OneToOneModel model) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubAbstractDepthFirstVisitor.VisitPrimaryKey(Castle.ActiveRecord.Framework.Internal.PrimaryKeyModel)">
            <summary>设置 AbstractDepthFirstVisitor.VisitPrimaryKey(PrimaryKeyModel model) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Internal.Fakes.StubAbstractDepthFirstVisitor.VisitPrimaryKeyPrimaryKeyModel">
            <summary>设置 AbstractDepthFirstVisitor.VisitPrimaryKey(PrimaryKeyModel model) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubAbstractDepthFirstVisitor.VisitProperty(Castle.ActiveRecord.Framework.Internal.PropertyModel)">
            <summary>设置 AbstractDepthFirstVisitor.VisitProperty(PropertyModel model) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Internal.Fakes.StubAbstractDepthFirstVisitor.VisitPropertyPropertyModel">
            <summary>设置 AbstractDepthFirstVisitor.VisitProperty(PropertyModel model) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubAbstractDepthFirstVisitor.VisitTimestamp(Castle.ActiveRecord.Framework.Internal.TimestampModel)">
            <summary>设置 AbstractDepthFirstVisitor.VisitTimestamp(TimestampModel model) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Internal.Fakes.StubAbstractDepthFirstVisitor.VisitTimestampTimestampModel">
            <summary>设置 AbstractDepthFirstVisitor.VisitTimestamp(TimestampModel model) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubAbstractDepthFirstVisitor.VisitVersion(Castle.ActiveRecord.Framework.Internal.VersionModel)">
            <summary>设置 AbstractDepthFirstVisitor.VisitVersion(VersionModel model) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Internal.Fakes.StubAbstractDepthFirstVisitor.VisitVersionVersionModel">
            <summary>设置 AbstractDepthFirstVisitor.VisitVersion(VersionModel model) 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.StubAbstractDepthFirstVisitor.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.StubAbstractDepthFirstVisitor.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.StubAbstractDepthFirstVisitor.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Internal.Fakes.StubActiveRecordModel">
            <summary>Castle.ActiveRecord.Framework.Internal.ActiveRecordModel 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubActiveRecordModel.#ctor(System.Type)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubActiveRecordModel.InitializeStub">
            <summary>初始化 type StubActiveRecordModel 的新实例</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.StubActiveRecordModel.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.StubActiveRecordModel.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.StubActiveRecordModel.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Internal.Fakes.StubActiveRecordModelBuilder">
            <summary>Castle.ActiveRecord.Framework.Internal.ActiveRecordModelBuilder 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubActiveRecordModelBuilder.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubActiveRecordModelBuilder.InitializeStub">
            <summary>初始化 type StubActiveRecordModelBuilder 的新实例</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.StubActiveRecordModelBuilder.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.StubActiveRecordModelBuilder.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.StubActiveRecordModelBuilder.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Internal.Fakes.StubActiveRecordModelCollection">
            <summary>Castle.ActiveRecord.Framework.Internal.ActiveRecordModelCollection 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubActiveRecordModelCollection.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubActiveRecordModelCollection.InitializeStub">
            <summary>初始化 type StubActiveRecordModelCollection 的新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubActiveRecordModelCollection.OnClear">
            <summary>设置 DictionaryBase.OnClear() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Internal.Fakes.StubActiveRecordModelCollection.OnClear01">
            <summary>设置 DictionaryBase.OnClear() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubActiveRecordModelCollection.OnClearComplete">
            <summary>设置 DictionaryBase.OnClearComplete() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Internal.Fakes.StubActiveRecordModelCollection.OnClearComplete01">
            <summary>设置 DictionaryBase.OnClearComplete() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubActiveRecordModelCollection.OnGet(System.Object,System.Object)">
            <summary>设置 DictionaryBase.OnGet(Object key, Object currentValue) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Internal.Fakes.StubActiveRecordModelCollection.OnGetObjectObject">
            <summary>设置 DictionaryBase.OnGet(Object key, Object currentValue) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubActiveRecordModelCollection.OnInsert(System.Object,System.Object)">
            <summary>设置 DictionaryBase.OnInsert(Object key, Object value) 的 存根</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubActiveRecordModelCollection.OnInsertComplete(System.Object,System.Object)">
            <summary>设置 DictionaryBase.OnInsertComplete(Object key, Object value) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Internal.Fakes.StubActiveRecordModelCollection.OnInsertCompleteObjectObject">
            <summary>设置 DictionaryBase.OnInsertComplete(Object key, Object value) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Internal.Fakes.StubActiveRecordModelCollection.OnInsertObjectObject">
            <summary>设置 DictionaryBase.OnInsert(Object key, Object value) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubActiveRecordModelCollection.OnRemove(System.Object,System.Object)">
            <summary>设置 DictionaryBase.OnRemove(Object key, Object value) 的 存根</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubActiveRecordModelCollection.OnRemoveComplete(System.Object,System.Object)">
            <summary>设置 DictionaryBase.OnRemoveComplete(Object key, Object value) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Internal.Fakes.StubActiveRecordModelCollection.OnRemoveCompleteObjectObject">
            <summary>设置 DictionaryBase.OnRemoveComplete(Object key, Object value) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Internal.Fakes.StubActiveRecordModelCollection.OnRemoveObjectObject">
            <summary>设置 DictionaryBase.OnRemove(Object key, Object value) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubActiveRecordModelCollection.OnSet(System.Object,System.Object,System.Object)">
            <summary>设置 DictionaryBase.OnSet(Object key, Object oldValue, Object newValue) 的 存根</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubActiveRecordModelCollection.OnSetComplete(System.Object,System.Object,System.Object)">
            <summary>设置 DictionaryBase.OnSetComplete(Object key, Object oldValue, Object newValue) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Internal.Fakes.StubActiveRecordModelCollection.OnSetCompleteObjectObjectObject">
            <summary>设置 DictionaryBase.OnSetComplete(Object key, Object oldValue, Object newValue) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Internal.Fakes.StubActiveRecordModelCollection.OnSetObjectObjectObject">
            <summary>设置 DictionaryBase.OnSet(Object key, Object oldValue, Object newValue) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubActiveRecordModelCollection.OnValidate(System.Object,System.Object)">
            <summary>设置 DictionaryBase.OnValidate(Object key, Object value) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Internal.Fakes.StubActiveRecordModelCollection.OnValidateObjectObject">
            <summary>设置 DictionaryBase.OnValidate(Object key, Object value) 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.StubActiveRecordModelCollection.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.StubActiveRecordModelCollection.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.StubActiveRecordModelCollection.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Internal.Fakes.StubAnyModel">
            <summary>Castle.ActiveRecord.Framework.Internal.AnyModel 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubAnyModel.#ctor(System.Reflection.PropertyInfo,Castle.ActiveRecord.AnyAttribute)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubAnyModel.InitializeStub">
            <summary>初始化 type StubAnyModel 的新实例</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.StubAnyModel.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.StubAnyModel.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.StubAnyModel.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Internal.Fakes.StubAssemblyXmlGenerator">
            <summary>Castle.ActiveRecord.Framework.Internal.AssemblyXmlGenerator 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubAssemblyXmlGenerator.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubAssemblyXmlGenerator.InitializeStub">
            <summary>初始化 type StubAssemblyXmlGenerator 的新实例</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.StubAssemblyXmlGenerator.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.StubAssemblyXmlGenerator.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.StubAssemblyXmlGenerator.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Internal.Fakes.StubBelongsToModel">
            <summary>Castle.ActiveRecord.Framework.Internal.BelongsToModel 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubBelongsToModel.#ctor(System.Reflection.PropertyInfo,Castle.ActiveRecord.BelongsToAttribute)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubBelongsToModel.InitializeStub">
            <summary>初始化 type StubBelongsToModel 的新实例</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.StubBelongsToModel.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.StubBelongsToModel.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.StubBelongsToModel.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Internal.Fakes.StubCollectionIDModel">
            <summary>Castle.ActiveRecord.Framework.Internal.CollectionIDModel 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubCollectionIDModel.#ctor(System.Reflection.PropertyInfo,Castle.ActiveRecord.CollectionIDAttribute)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubCollectionIDModel.InitializeStub">
            <summary>初始化 type StubCollectionIDModel 的新实例</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.StubCollectionIDModel.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.StubCollectionIDModel.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.StubCollectionIDModel.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Internal.Fakes.StubCompositeKeyModel">
            <summary>Castle.ActiveRecord.Framework.Internal.CompositeKeyModel 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubCompositeKeyModel.#ctor(System.Reflection.PropertyInfo,Castle.ActiveRecord.CompositeKeyAttribute)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubCompositeKeyModel.InitializeStub">
            <summary>初始化 type StubCompositeKeyModel 的新实例</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.StubCompositeKeyModel.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.StubCompositeKeyModel.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.StubCompositeKeyModel.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Internal.Fakes.StubCompositeUserTypeModel">
            <summary>Castle.ActiveRecord.Framework.Internal.CompositeUserTypeModel 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubCompositeUserTypeModel.#ctor(System.Reflection.MemberInfo,System.Type,Castle.ActiveRecord.CompositeUserTypeAttribute)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubCompositeUserTypeModel.InitializeStub">
            <summary>初始化 type StubCompositeUserTypeModel 的新实例</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.StubCompositeUserTypeModel.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.StubCompositeUserTypeModel.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.StubCompositeUserTypeModel.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Internal.Fakes.StubDependentObjectModel">
            <summary>Castle.ActiveRecord.Framework.Internal.DependentObjectModel 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubDependentObjectModel.#ctor(System.Reflection.PropertyInfo,Castle.ActiveRecord.HasManyAttribute,Castle.ActiveRecord.Framework.Internal.ActiveRecordModel)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubDependentObjectModel.InitializeStub">
            <summary>初始化 type StubDependentObjectModel 的新实例</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.StubDependentObjectModel.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.StubDependentObjectModel.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.StubDependentObjectModel.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Internal.Fakes.StubFieldModel">
            <summary>Castle.ActiveRecord.Framework.Internal.FieldModel 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubFieldModel.#ctor(System.Reflection.FieldInfo,Castle.ActiveRecord.FieldAttribute)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubFieldModel.InitializeStub">
            <summary>初始化 type StubFieldModel 的新实例</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.StubFieldModel.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.StubFieldModel.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.StubFieldModel.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Internal.Fakes.StubGraphConnectorVisitor">
            <summary>Castle.ActiveRecord.Framework.Internal.GraphConnectorVisitor 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubGraphConnectorVisitor.#ctor(Castle.ActiveRecord.Framework.Internal.ActiveRecordModelCollection)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubGraphConnectorVisitor.InitializeStub">
            <summary>初始化 type StubGraphConnectorVisitor 的新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubGraphConnectorVisitor.VisitAny(Castle.ActiveRecord.Framework.Internal.AnyModel)">
            <summary>设置 AbstractDepthFirstVisitor.VisitAny(AnyModel model) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Internal.Fakes.StubGraphConnectorVisitor.VisitAnyAnyModel">
            <summary>设置 AbstractDepthFirstVisitor.VisitAny(AnyModel model) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubGraphConnectorVisitor.VisitBelongsTo(Castle.ActiveRecord.Framework.Internal.BelongsToModel)">
            <summary>设置 AbstractDepthFirstVisitor.VisitBelongsTo(BelongsToModel model) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Internal.Fakes.StubGraphConnectorVisitor.VisitBelongsToBelongsToModel">
            <summary>设置 AbstractDepthFirstVisitor.VisitBelongsTo(BelongsToModel model) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubGraphConnectorVisitor.VisitCollectionID(Castle.ActiveRecord.Framework.Internal.CollectionIDModel)">
            <summary>设置 GraphConnectorVisitor.VisitCollectionID(CollectionIDModel model) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Internal.Fakes.StubGraphConnectorVisitor.VisitCollectionIDCollectionIDModel">
            <summary>设置 GraphConnectorVisitor.VisitCollectionID(CollectionIDModel model) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubGraphConnectorVisitor.VisitCompositePrimaryKey(Castle.ActiveRecord.Framework.Internal.CompositeKeyModel)">
            <summary>设置 AbstractDepthFirstVisitor.VisitCompositePrimaryKey(CompositeKeyModel model) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Internal.Fakes.StubGraphConnectorVisitor.VisitCompositePrimaryKeyCompositeKeyModel">
            <summary>设置 AbstractDepthFirstVisitor.VisitCompositePrimaryKey(CompositeKeyModel model) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubGraphConnectorVisitor.VisitCompositeUserType(Castle.ActiveRecord.Framework.Internal.CompositeUserTypeModel)">
            <summary>设置 AbstractDepthFirstVisitor.VisitCompositeUserType(CompositeUserTypeModel model) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Internal.Fakes.StubGraphConnectorVisitor.VisitCompositeUserTypeCompositeUserTypeModel">
            <summary>设置 AbstractDepthFirstVisitor.VisitCompositeUserType(CompositeUserTypeModel model) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubGraphConnectorVisitor.VisitDependentObject(Castle.ActiveRecord.Framework.Internal.DependentObjectModel)">
            <summary>设置 AbstractDepthFirstVisitor.VisitDependentObject(DependentObjectModel model) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Internal.Fakes.StubGraphConnectorVisitor.VisitDependentObjectDependentObjectModel">
            <summary>设置 AbstractDepthFirstVisitor.VisitDependentObject(DependentObjectModel model) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubGraphConnectorVisitor.VisitField(Castle.ActiveRecord.Framework.Internal.FieldModel)">
            <summary>设置 AbstractDepthFirstVisitor.VisitField(FieldModel model) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Internal.Fakes.StubGraphConnectorVisitor.VisitFieldFieldModel">
            <summary>设置 AbstractDepthFirstVisitor.VisitField(FieldModel model) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubGraphConnectorVisitor.VisitHasAndBelongsToMany(Castle.ActiveRecord.Framework.Internal.HasAndBelongsToManyModel)">
            <summary>设置 AbstractDepthFirstVisitor.VisitHasAndBelongsToMany(HasAndBelongsToManyModel model) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Internal.Fakes.StubGraphConnectorVisitor.VisitHasAndBelongsToManyHasAndBelongsToManyModel">
            <summary>设置 AbstractDepthFirstVisitor.VisitHasAndBelongsToMany(HasAndBelongsToManyModel model) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubGraphConnectorVisitor.VisitHasMany(Castle.ActiveRecord.Framework.Internal.HasManyModel)">
            <summary>设置 AbstractDepthFirstVisitor.VisitHasMany(HasManyModel model) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Internal.Fakes.StubGraphConnectorVisitor.VisitHasManyHasManyModel">
            <summary>设置 AbstractDepthFirstVisitor.VisitHasMany(HasManyModel model) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubGraphConnectorVisitor.VisitHasManyToAny(Castle.ActiveRecord.Framework.Internal.HasManyToAnyModel)">
            <summary>设置 AbstractDepthFirstVisitor.VisitHasManyToAny(HasManyToAnyModel model) 的 存根</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubGraphConnectorVisitor.VisitHasManyToAnyConfig(Castle.ActiveRecord.Framework.Internal.HasManyToAnyModel.Config)">
            <summary>设置 AbstractDepthFirstVisitor.VisitHasManyToAnyConfig(Config hasManyToAnyConfigModel) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Internal.Fakes.StubGraphConnectorVisitor.VisitHasManyToAnyConfigHasManyToAnyModelConfig">
            <summary>设置 AbstractDepthFirstVisitor.VisitHasManyToAnyConfig(Config hasManyToAnyConfigModel) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Internal.Fakes.StubGraphConnectorVisitor.VisitHasManyToAnyHasManyToAnyModel">
            <summary>设置 AbstractDepthFirstVisitor.VisitHasManyToAny(HasManyToAnyModel model) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubGraphConnectorVisitor.VisitHilo(Castle.ActiveRecord.Framework.Internal.HiloModel)">
            <summary>设置 GraphConnectorVisitor.VisitHilo(HiloModel model) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Internal.Fakes.StubGraphConnectorVisitor.VisitHiloHiloModel">
            <summary>设置 GraphConnectorVisitor.VisitHilo(HiloModel model) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubGraphConnectorVisitor.VisitImport(Castle.ActiveRecord.Framework.Internal.ImportModel)">
            <summary>设置 AbstractDepthFirstVisitor.VisitImport(ImportModel model) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Internal.Fakes.StubGraphConnectorVisitor.VisitImportImportModel">
            <summary>设置 AbstractDepthFirstVisitor.VisitImport(ImportModel model) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubGraphConnectorVisitor.VisitJoinedTable(Castle.ActiveRecord.Framework.Internal.JoinedTableModel)">
            <summary>设置 AbstractDepthFirstVisitor.VisitJoinedTable(JoinedTableModel model) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Internal.Fakes.StubGraphConnectorVisitor.VisitJoinedTableJoinedTableModel">
            <summary>设置 AbstractDepthFirstVisitor.VisitJoinedTable(JoinedTableModel model) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubGraphConnectorVisitor.VisitKey(Castle.ActiveRecord.Framework.Internal.KeyModel)">
            <summary>设置 AbstractDepthFirstVisitor.VisitKey(KeyModel model) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Internal.Fakes.StubGraphConnectorVisitor.VisitKeyKeyModel">
            <summary>设置 AbstractDepthFirstVisitor.VisitKey(KeyModel model) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubGraphConnectorVisitor.VisitModel(Castle.ActiveRecord.Framework.Internal.ActiveRecordModel)">
            <summary>设置 GraphConnectorVisitor.VisitModel(ActiveRecordModel model) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Internal.Fakes.StubGraphConnectorVisitor.VisitModelActiveRecordModel">
            <summary>设置 GraphConnectorVisitor.VisitModel(ActiveRecordModel model) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubGraphConnectorVisitor.VisitNested(Castle.ActiveRecord.Framework.Internal.NestedModel)">
            <summary>设置 GraphConnectorVisitor.VisitNested(NestedModel model) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Internal.Fakes.StubGraphConnectorVisitor.VisitNestedNestedModel">
            <summary>设置 GraphConnectorVisitor.VisitNested(NestedModel model) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubGraphConnectorVisitor.VisitNestedParentReference(Castle.ActiveRecord.Framework.Internal.NestedParentReferenceModel)">
            <summary>设置 AbstractDepthFirstVisitor.VisitNestedParentReference(NestedParentReferenceModel referenceModel) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Internal.Fakes.StubGraphConnectorVisitor.VisitNestedParentReferenceNestedParentReferenceModel">
            <summary>设置 AbstractDepthFirstVisitor.VisitNestedParentReference(NestedParentReferenceModel referenceModel) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubGraphConnectorVisitor.VisitOneToOne(Castle.ActiveRecord.Framework.Internal.OneToOneModel)">
            <summary>设置 AbstractDepthFirstVisitor.VisitOneToOne(OneToOneModel model) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Internal.Fakes.StubGraphConnectorVisitor.VisitOneToOneOneToOneModel">
            <summary>设置 AbstractDepthFirstVisitor.VisitOneToOne(OneToOneModel model) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubGraphConnectorVisitor.VisitPrimaryKey(Castle.ActiveRecord.Framework.Internal.PrimaryKeyModel)">
            <summary>设置 AbstractDepthFirstVisitor.VisitPrimaryKey(PrimaryKeyModel model) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Internal.Fakes.StubGraphConnectorVisitor.VisitPrimaryKeyPrimaryKeyModel">
            <summary>设置 AbstractDepthFirstVisitor.VisitPrimaryKey(PrimaryKeyModel model) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubGraphConnectorVisitor.VisitProperty(Castle.ActiveRecord.Framework.Internal.PropertyModel)">
            <summary>设置 AbstractDepthFirstVisitor.VisitProperty(PropertyModel model) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Internal.Fakes.StubGraphConnectorVisitor.VisitPropertyPropertyModel">
            <summary>设置 AbstractDepthFirstVisitor.VisitProperty(PropertyModel model) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubGraphConnectorVisitor.VisitTimestamp(Castle.ActiveRecord.Framework.Internal.TimestampModel)">
            <summary>设置 AbstractDepthFirstVisitor.VisitTimestamp(TimestampModel model) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Internal.Fakes.StubGraphConnectorVisitor.VisitTimestampTimestampModel">
            <summary>设置 AbstractDepthFirstVisitor.VisitTimestamp(TimestampModel model) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubGraphConnectorVisitor.VisitVersion(Castle.ActiveRecord.Framework.Internal.VersionModel)">
            <summary>设置 AbstractDepthFirstVisitor.VisitVersion(VersionModel model) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Internal.Fakes.StubGraphConnectorVisitor.VisitVersionVersionModel">
            <summary>设置 AbstractDepthFirstVisitor.VisitVersion(VersionModel model) 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.StubGraphConnectorVisitor.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.StubGraphConnectorVisitor.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.StubGraphConnectorVisitor.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Internal.Fakes.StubHasAndBelongsToManyModel">
            <summary>Castle.ActiveRecord.Framework.Internal.HasAndBelongsToManyModel 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubHasAndBelongsToManyModel.#ctor(System.Reflection.PropertyInfo,Castle.ActiveRecord.HasAndBelongsToManyAttribute)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubHasAndBelongsToManyModel.InitializeStub">
            <summary>初始化 type StubHasAndBelongsToManyModel 的新实例</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.StubHasAndBelongsToManyModel.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.StubHasAndBelongsToManyModel.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.StubHasAndBelongsToManyModel.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Internal.Fakes.StubHasManyModel">
            <summary>Castle.ActiveRecord.Framework.Internal.HasManyModel 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubHasManyModel.#ctor(System.Reflection.PropertyInfo,Castle.ActiveRecord.HasManyAttribute,Castle.ActiveRecord.Framework.Internal.ActiveRecordModel)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubHasManyModel.InitializeStub">
            <summary>初始化 type StubHasManyModel 的新实例</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.StubHasManyModel.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.StubHasManyModel.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.StubHasManyModel.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Internal.Fakes.StubHasManyToAnyModel">
            <summary>Castle.ActiveRecord.Framework.Internal.HasManyToAnyModel 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubHasManyToAnyModel.#ctor(System.Reflection.PropertyInfo,Castle.ActiveRecord.HasManyToAnyAttribute)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubHasManyToAnyModel.InitializeStub">
            <summary>初始化 type StubHasManyToAnyModel 的新实例</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.StubHasManyToAnyModel.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.StubHasManyToAnyModel.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.StubHasManyToAnyModel.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Internal.Fakes.StubHiloModel">
            <summary>Castle.ActiveRecord.Framework.Internal.HiloModel 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubHiloModel.#ctor(System.Reflection.PropertyInfo,Castle.ActiveRecord.HiloAttribute)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubHiloModel.InitializeStub">
            <summary>初始化 type StubHiloModel 的新实例</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.StubHiloModel.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.StubHiloModel.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.StubHiloModel.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Internal.Fakes.StubIModelBuilderExtension">
            <summary>Castle.ActiveRecord.Framework.Internal.IModelBuilderExtension 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubIModelBuilderExtension.#ctor">
            <summary>初始化 type StubIModelBuilderExtension 的新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubIModelBuilderExtension.car::Castle#ActiveRecord#Framework#Internal#IModelBuilderExtension#ProcessBelongsTo(System.Reflection.PropertyInfo,Castle.ActiveRecord.Framework.Internal.BelongsToModel,Castle.ActiveRecord.Framework.Internal.ActiveRecordModel)">
            <summary>设置 IModelBuilderExtension.ProcessBelongsTo(PropertyInfo pi, BelongsToModel belongsToModel, ActiveRecordModel model) 的 存根</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubIModelBuilderExtension.car::Castle#ActiveRecord#Framework#Internal#IModelBuilderExtension#ProcessClass(System.Type,Castle.ActiveRecord.Framework.Internal.ActiveRecordModel)">
            <summary>设置 IModelBuilderExtension.ProcessClass(Type type, ActiveRecordModel model) 的 存根</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubIModelBuilderExtension.car::Castle#ActiveRecord#Framework#Internal#IModelBuilderExtension#ProcessField(System.Reflection.FieldInfo,Castle.ActiveRecord.Framework.Internal.ActiveRecordModel)">
            <summary>设置 IModelBuilderExtension.ProcessField(FieldInfo fi, ActiveRecordModel model) 的 存根</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubIModelBuilderExtension.car::Castle#ActiveRecord#Framework#Internal#IModelBuilderExtension#ProcessHasAndBelongsToMany(System.Reflection.PropertyInfo,Castle.ActiveRecord.Framework.Internal.HasAndBelongsToManyModel,Castle.ActiveRecord.Framework.Internal.ActiveRecordModel)">
            <summary>设置 IModelBuilderExtension.ProcessHasAndBelongsToMany(PropertyInfo pi, HasAndBelongsToManyModel hasAndBelongManyModel, ActiveRecordModel model) 的 存根</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubIModelBuilderExtension.car::Castle#ActiveRecord#Framework#Internal#IModelBuilderExtension#ProcessHasMany(System.Reflection.PropertyInfo,Castle.ActiveRecord.Framework.Internal.HasManyModel,Castle.ActiveRecord.Framework.Internal.ActiveRecordModel)">
            <summary>设置 IModelBuilderExtension.ProcessHasMany(PropertyInfo pi, HasManyModel hasManyModel, ActiveRecordModel model) 的 存根</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubIModelBuilderExtension.car::Castle#ActiveRecord#Framework#Internal#IModelBuilderExtension#ProcessHasManyToAny(System.Reflection.PropertyInfo,Castle.ActiveRecord.Framework.Internal.HasManyToAnyModel,Castle.ActiveRecord.Framework.Internal.ActiveRecordModel)">
            <summary>设置 IModelBuilderExtension.ProcessHasManyToAny(PropertyInfo pi, HasManyToAnyModel hasManyModel, ActiveRecordModel model) 的 存根</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubIModelBuilderExtension.car::Castle#ActiveRecord#Framework#Internal#IModelBuilderExtension#ProcessProperty(System.Reflection.PropertyInfo,Castle.ActiveRecord.Framework.Internal.ActiveRecordModel)">
            <summary>设置 IModelBuilderExtension.ProcessProperty(PropertyInfo pi, ActiveRecordModel model) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Internal.Fakes.StubIModelBuilderExtension.ProcessBelongsToPropertyInfoBelongsToModelActiveRecordModel">
            <summary>设置 IModelBuilderExtension.ProcessBelongsTo(PropertyInfo pi, BelongsToModel belongsToModel, ActiveRecordModel model) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Internal.Fakes.StubIModelBuilderExtension.ProcessClassTypeActiveRecordModel">
            <summary>设置 IModelBuilderExtension.ProcessClass(Type type, ActiveRecordModel model) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Internal.Fakes.StubIModelBuilderExtension.ProcessFieldFieldInfoActiveRecordModel">
            <summary>设置 IModelBuilderExtension.ProcessField(FieldInfo fi, ActiveRecordModel model) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Internal.Fakes.StubIModelBuilderExtension.ProcessHasAndBelongsToManyPropertyInfoHasAndBelongsToManyModelActiveRecordModel">
            <summary>设置 IModelBuilderExtension.ProcessHasAndBelongsToMany(PropertyInfo pi, HasAndBelongsToManyModel hasAndBelongManyModel, ActiveRecordModel model) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Internal.Fakes.StubIModelBuilderExtension.ProcessHasManyPropertyInfoHasManyModelActiveRecordModel">
            <summary>设置 IModelBuilderExtension.ProcessHasMany(PropertyInfo pi, HasManyModel hasManyModel, ActiveRecordModel model) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Internal.Fakes.StubIModelBuilderExtension.ProcessHasManyToAnyPropertyInfoHasManyToAnyModelActiveRecordModel">
            <summary>设置 IModelBuilderExtension.ProcessHasManyToAny(PropertyInfo pi, HasManyToAnyModel hasManyModel, ActiveRecordModel model) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Internal.Fakes.StubIModelBuilderExtension.ProcessPropertyPropertyInfoActiveRecordModel">
            <summary>设置 IModelBuilderExtension.ProcessProperty(PropertyInfo pi, ActiveRecordModel model) 的 stub</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Internal.Fakes.StubIVisitable">
            <summary>Castle.ActiveRecord.Framework.Internal.IVisitable 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubIVisitable.#ctor">
            <summary>初始化 type StubIVisitable 的新实例</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Internal.Fakes.StubIVisitable.AcceptIVisitor">
            <summary>设置 IVisitable.Accept(IVisitor visitor) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubIVisitable.car::Castle#ActiveRecord#Framework#Internal#IVisitable#Accept(Castle.ActiveRecord.Framework.Internal.IVisitor)">
            <summary>设置 IVisitable.Accept(IVisitor visitor) 的 存根</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Internal.Fakes.StubIVisitor">
            <summary>Castle.ActiveRecord.Framework.Internal.IVisitor 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubIVisitor.#ctor">
            <summary>初始化 type StubIVisitor 的新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubIVisitor.car::Castle#ActiveRecord#Framework#Internal#IVisitor#VisitAny(Castle.ActiveRecord.Framework.Internal.AnyModel)">
            <summary>设置 IVisitor.VisitAny(AnyModel model) 的 存根</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubIVisitor.car::Castle#ActiveRecord#Framework#Internal#IVisitor#VisitBelongsTo(Castle.ActiveRecord.Framework.Internal.BelongsToModel)">
            <summary>设置 IVisitor.VisitBelongsTo(BelongsToModel model) 的 存根</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubIVisitor.car::Castle#ActiveRecord#Framework#Internal#IVisitor#VisitCollectionID(Castle.ActiveRecord.Framework.Internal.CollectionIDModel)">
            <summary>设置 IVisitor.VisitCollectionID(CollectionIDModel model) 的 存根</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubIVisitor.car::Castle#ActiveRecord#Framework#Internal#IVisitor#VisitCompositePrimaryKey(Castle.ActiveRecord.Framework.Internal.CompositeKeyModel)">
            <summary>设置 IVisitor.VisitCompositePrimaryKey(CompositeKeyModel model) 的 存根</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubIVisitor.car::Castle#ActiveRecord#Framework#Internal#IVisitor#VisitCompositeUserType(Castle.ActiveRecord.Framework.Internal.CompositeUserTypeModel)">
            <summary>设置 IVisitor.VisitCompositeUserType(CompositeUserTypeModel model) 的 存根</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubIVisitor.car::Castle#ActiveRecord#Framework#Internal#IVisitor#VisitDependentObject(Castle.ActiveRecord.Framework.Internal.DependentObjectModel)">
            <summary>设置 IVisitor.VisitDependentObject(DependentObjectModel model) 的 存根</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubIVisitor.car::Castle#ActiveRecord#Framework#Internal#IVisitor#VisitField(Castle.ActiveRecord.Framework.Internal.FieldModel)">
            <summary>设置 IVisitor.VisitField(FieldModel model) 的 存根</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubIVisitor.car::Castle#ActiveRecord#Framework#Internal#IVisitor#VisitHasAndBelongsToMany(Castle.ActiveRecord.Framework.Internal.HasAndBelongsToManyModel)">
            <summary>设置 IVisitor.VisitHasAndBelongsToMany(HasAndBelongsToManyModel model) 的 存根</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubIVisitor.car::Castle#ActiveRecord#Framework#Internal#IVisitor#VisitHasMany(Castle.ActiveRecord.Framework.Internal.HasManyModel)">
            <summary>设置 IVisitor.VisitHasMany(HasManyModel model) 的 存根</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubIVisitor.car::Castle#ActiveRecord#Framework#Internal#IVisitor#VisitHasManyToAny(Castle.ActiveRecord.Framework.Internal.HasManyToAnyModel)">
            <summary>设置 IVisitor.VisitHasManyToAny(HasManyToAnyModel model) 的 存根</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubIVisitor.car::Castle#ActiveRecord#Framework#Internal#IVisitor#VisitHasManyToAnyConfig(Castle.ActiveRecord.Framework.Internal.HasManyToAnyModel.Config)">
            <summary>设置 IVisitor.VisitHasManyToAnyConfig(Config hasManyToAnyConfigModel) 的 存根</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubIVisitor.car::Castle#ActiveRecord#Framework#Internal#IVisitor#VisitHilo(Castle.ActiveRecord.Framework.Internal.HiloModel)">
            <summary>设置 IVisitor.VisitHilo(HiloModel model) 的 存根</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubIVisitor.car::Castle#ActiveRecord#Framework#Internal#IVisitor#VisitImport(Castle.ActiveRecord.Framework.Internal.ImportModel)">
            <summary>设置 IVisitor.VisitImport(ImportModel model) 的 存根</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubIVisitor.car::Castle#ActiveRecord#Framework#Internal#IVisitor#VisitJoinedTable(Castle.ActiveRecord.Framework.Internal.JoinedTableModel)">
            <summary>设置 IVisitor.VisitJoinedTable(JoinedTableModel model) 的 存根</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubIVisitor.car::Castle#ActiveRecord#Framework#Internal#IVisitor#VisitKey(Castle.ActiveRecord.Framework.Internal.KeyModel)">
            <summary>设置 IVisitor.VisitKey(KeyModel model) 的 存根</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubIVisitor.car::Castle#ActiveRecord#Framework#Internal#IVisitor#VisitModel(Castle.ActiveRecord.Framework.Internal.ActiveRecordModel)">
            <summary>设置 IVisitor.VisitModel(ActiveRecordModel model) 的 存根</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubIVisitor.car::Castle#ActiveRecord#Framework#Internal#IVisitor#VisitNested(Castle.ActiveRecord.Framework.Internal.NestedModel)">
            <summary>设置 IVisitor.VisitNested(NestedModel model) 的 存根</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubIVisitor.car::Castle#ActiveRecord#Framework#Internal#IVisitor#VisitNestedParentReference(Castle.ActiveRecord.Framework.Internal.NestedParentReferenceModel)">
            <summary>设置 IVisitor.VisitNestedParentReference(NestedParentReferenceModel referenceModel) 的 存根</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubIVisitor.car::Castle#ActiveRecord#Framework#Internal#IVisitor#VisitOneToOne(Castle.ActiveRecord.Framework.Internal.OneToOneModel)">
            <summary>设置 IVisitor.VisitOneToOne(OneToOneModel model) 的 存根</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubIVisitor.car::Castle#ActiveRecord#Framework#Internal#IVisitor#VisitPrimaryKey(Castle.ActiveRecord.Framework.Internal.PrimaryKeyModel)">
            <summary>设置 IVisitor.VisitPrimaryKey(PrimaryKeyModel model) 的 存根</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubIVisitor.car::Castle#ActiveRecord#Framework#Internal#IVisitor#VisitProperty(Castle.ActiveRecord.Framework.Internal.PropertyModel)">
            <summary>设置 IVisitor.VisitProperty(PropertyModel model) 的 存根</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubIVisitor.car::Castle#ActiveRecord#Framework#Internal#IVisitor#VisitTimestamp(Castle.ActiveRecord.Framework.Internal.TimestampModel)">
            <summary>设置 IVisitor.VisitTimestamp(TimestampModel model) 的 存根</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubIVisitor.car::Castle#ActiveRecord#Framework#Internal#IVisitor#VisitVersion(Castle.ActiveRecord.Framework.Internal.VersionModel)">
            <summary>设置 IVisitor.VisitVersion(VersionModel model) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Internal.Fakes.StubIVisitor.VisitAnyAnyModel">
            <summary>设置 IVisitor.VisitAny(AnyModel model) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Internal.Fakes.StubIVisitor.VisitBelongsToBelongsToModel">
            <summary>设置 IVisitor.VisitBelongsTo(BelongsToModel model) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Internal.Fakes.StubIVisitor.VisitCollectionIDCollectionIDModel">
            <summary>设置 IVisitor.VisitCollectionID(CollectionIDModel model) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Internal.Fakes.StubIVisitor.VisitCompositePrimaryKeyCompositeKeyModel">
            <summary>设置 IVisitor.VisitCompositePrimaryKey(CompositeKeyModel model) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Internal.Fakes.StubIVisitor.VisitCompositeUserTypeCompositeUserTypeModel">
            <summary>设置 IVisitor.VisitCompositeUserType(CompositeUserTypeModel model) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Internal.Fakes.StubIVisitor.VisitDependentObjectDependentObjectModel">
            <summary>设置 IVisitor.VisitDependentObject(DependentObjectModel model) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Internal.Fakes.StubIVisitor.VisitFieldFieldModel">
            <summary>设置 IVisitor.VisitField(FieldModel model) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Internal.Fakes.StubIVisitor.VisitHasAndBelongsToManyHasAndBelongsToManyModel">
            <summary>设置 IVisitor.VisitHasAndBelongsToMany(HasAndBelongsToManyModel model) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Internal.Fakes.StubIVisitor.VisitHasManyHasManyModel">
            <summary>设置 IVisitor.VisitHasMany(HasManyModel model) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Internal.Fakes.StubIVisitor.VisitHasManyToAnyConfigHasManyToAnyModelConfig">
            <summary>设置 IVisitor.VisitHasManyToAnyConfig(Config hasManyToAnyConfigModel) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Internal.Fakes.StubIVisitor.VisitHasManyToAnyHasManyToAnyModel">
            <summary>设置 IVisitor.VisitHasManyToAny(HasManyToAnyModel model) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Internal.Fakes.StubIVisitor.VisitHiloHiloModel">
            <summary>设置 IVisitor.VisitHilo(HiloModel model) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Internal.Fakes.StubIVisitor.VisitImportImportModel">
            <summary>设置 IVisitor.VisitImport(ImportModel model) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Internal.Fakes.StubIVisitor.VisitJoinedTableJoinedTableModel">
            <summary>设置 IVisitor.VisitJoinedTable(JoinedTableModel model) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Internal.Fakes.StubIVisitor.VisitKeyKeyModel">
            <summary>设置 IVisitor.VisitKey(KeyModel model) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Internal.Fakes.StubIVisitor.VisitModelActiveRecordModel">
            <summary>设置 IVisitor.VisitModel(ActiveRecordModel model) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Internal.Fakes.StubIVisitor.VisitNestedNestedModel">
            <summary>设置 IVisitor.VisitNested(NestedModel model) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Internal.Fakes.StubIVisitor.VisitNestedParentReferenceNestedParentReferenceModel">
            <summary>设置 IVisitor.VisitNestedParentReference(NestedParentReferenceModel referenceModel) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Internal.Fakes.StubIVisitor.VisitOneToOneOneToOneModel">
            <summary>设置 IVisitor.VisitOneToOne(OneToOneModel model) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Internal.Fakes.StubIVisitor.VisitPrimaryKeyPrimaryKeyModel">
            <summary>设置 IVisitor.VisitPrimaryKey(PrimaryKeyModel model) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Internal.Fakes.StubIVisitor.VisitPropertyPropertyModel">
            <summary>设置 IVisitor.VisitProperty(PropertyModel model) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Internal.Fakes.StubIVisitor.VisitTimestampTimestampModel">
            <summary>设置 IVisitor.VisitTimestamp(TimestampModel model) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Internal.Fakes.StubIVisitor.VisitVersionVersionModel">
            <summary>设置 IVisitor.VisitVersion(VersionModel model) 的 stub</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Internal.Fakes.StubImportModel">
            <summary>Castle.ActiveRecord.Framework.Internal.ImportModel 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubImportModel.#ctor(Castle.ActiveRecord.ImportAttribute)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubImportModel.InitializeStub">
            <summary>初始化 type StubImportModel 的新实例</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.StubImportModel.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.StubImportModel.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.StubImportModel.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Internal.Fakes.StubJoinedTableModel">
            <summary>Castle.ActiveRecord.Framework.Internal.JoinedTableModel 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubJoinedTableModel.#ctor(Castle.ActiveRecord.JoinedTableAttribute)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubJoinedTableModel.InitializeStub">
            <summary>初始化 type StubJoinedTableModel 的新实例</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.StubJoinedTableModel.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.StubJoinedTableModel.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.StubJoinedTableModel.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Internal.Fakes.StubKeyModel">
            <summary>Castle.ActiveRecord.Framework.Internal.KeyModel 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubKeyModel.#ctor(System.Reflection.PropertyInfo,Castle.ActiveRecord.JoinedKeyAttribute)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubKeyModel.InitializeStub">
            <summary>初始化 type StubKeyModel 的新实例</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.StubKeyModel.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.StubKeyModel.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.StubKeyModel.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Internal.Fakes.StubNestedModel">
            <summary>Castle.ActiveRecord.Framework.Internal.NestedModel 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubNestedModel.#ctor(System.Reflection.PropertyInfo,Castle.ActiveRecord.NestedAttribute,Castle.ActiveRecord.Framework.Internal.ActiveRecordModel)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubNestedModel.InitializeStub">
            <summary>初始化 type StubNestedModel 的新实例</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.StubNestedModel.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.StubNestedModel.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.StubNestedModel.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Internal.Fakes.StubNestedParentReferenceModel">
            <summary>Castle.ActiveRecord.Framework.Internal.NestedParentReferenceModel 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubNestedParentReferenceModel.#ctor(System.Reflection.PropertyInfo,Castle.ActiveRecord.NestedParentReferenceAttribute)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubNestedParentReferenceModel.InitializeStub">
            <summary>初始化 type StubNestedParentReferenceModel 的新实例</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.StubNestedParentReferenceModel.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.StubNestedParentReferenceModel.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.StubNestedParentReferenceModel.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Internal.Fakes.StubOneToOneModel">
            <summary>Castle.ActiveRecord.Framework.Internal.OneToOneModel 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubOneToOneModel.#ctor(System.Reflection.PropertyInfo,Castle.ActiveRecord.OneToOneAttribute)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubOneToOneModel.InitializeStub">
            <summary>初始化 type StubOneToOneModel 的新实例</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.StubOneToOneModel.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.StubOneToOneModel.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.StubOneToOneModel.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Internal.Fakes.StubPrimaryKeyModel">
            <summary>Castle.ActiveRecord.Framework.Internal.PrimaryKeyModel 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubPrimaryKeyModel.#ctor(System.Reflection.PropertyInfo,Castle.ActiveRecord.PrimaryKeyAttribute)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubPrimaryKeyModel.InitializeStub">
            <summary>初始化 type StubPrimaryKeyModel 的新实例</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.StubPrimaryKeyModel.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.StubPrimaryKeyModel.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.StubPrimaryKeyModel.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Internal.Fakes.StubPropertyModel">
            <summary>Castle.ActiveRecord.Framework.Internal.PropertyModel 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubPropertyModel.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubPropertyModel.#ctor(System.Reflection.PropertyInfo,Castle.ActiveRecord.PropertyAttribute)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubPropertyModel.InitializeStub">
            <summary>初始化 type StubPropertyModel 的新实例</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Internal.Fakes.StubPropertyModel.PropertyAttGet">
            <summary>设置 PropertyModel.get_PropertyAtt() 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Internal.Fakes.StubPropertyModel.PropertyGet">
            <summary>设置 PropertyModel.get_Property() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.StubPropertyModel.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.StubPropertyModel.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.StubPropertyModel.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.StubPropertyModel.Property">
            <summary>设置 PropertyModel.get_Property() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.StubPropertyModel.PropertyAtt">
            <summary>设置 PropertyModel.get_PropertyAtt() 的 stub</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Internal.Fakes.StubSemanticVerifierVisitor">
            <summary>Castle.ActiveRecord.Framework.Internal.SemanticVerifierVisitor 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubSemanticVerifierVisitor.#ctor(Castle.ActiveRecord.Framework.Internal.ActiveRecordModelCollection)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubSemanticVerifierVisitor.InitializeStub">
            <summary>初始化 type StubSemanticVerifierVisitor 的新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubSemanticVerifierVisitor.VisitAny(Castle.ActiveRecord.Framework.Internal.AnyModel)">
            <summary>设置 SemanticVerifierVisitor.VisitAny(AnyModel model) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Internal.Fakes.StubSemanticVerifierVisitor.VisitAnyAnyModel">
            <summary>设置 SemanticVerifierVisitor.VisitAny(AnyModel model) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubSemanticVerifierVisitor.VisitBelongsTo(Castle.ActiveRecord.Framework.Internal.BelongsToModel)">
            <summary>设置 SemanticVerifierVisitor.VisitBelongsTo(BelongsToModel model) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Internal.Fakes.StubSemanticVerifierVisitor.VisitBelongsToBelongsToModel">
            <summary>设置 SemanticVerifierVisitor.VisitBelongsTo(BelongsToModel model) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubSemanticVerifierVisitor.VisitCollectionID(Castle.ActiveRecord.Framework.Internal.CollectionIDModel)">
            <summary>设置 AbstractDepthFirstVisitor.VisitCollectionID(CollectionIDModel model) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Internal.Fakes.StubSemanticVerifierVisitor.VisitCollectionIDCollectionIDModel">
            <summary>设置 AbstractDepthFirstVisitor.VisitCollectionID(CollectionIDModel model) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubSemanticVerifierVisitor.VisitCompositePrimaryKey(Castle.ActiveRecord.Framework.Internal.CompositeKeyModel)">
            <summary>设置 SemanticVerifierVisitor.VisitCompositePrimaryKey(CompositeKeyModel model) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Internal.Fakes.StubSemanticVerifierVisitor.VisitCompositePrimaryKeyCompositeKeyModel">
            <summary>设置 SemanticVerifierVisitor.VisitCompositePrimaryKey(CompositeKeyModel model) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubSemanticVerifierVisitor.VisitCompositeUserType(Castle.ActiveRecord.Framework.Internal.CompositeUserTypeModel)">
            <summary>设置 SemanticVerifierVisitor.VisitCompositeUserType(CompositeUserTypeModel model) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Internal.Fakes.StubSemanticVerifierVisitor.VisitCompositeUserTypeCompositeUserTypeModel">
            <summary>设置 SemanticVerifierVisitor.VisitCompositeUserType(CompositeUserTypeModel model) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubSemanticVerifierVisitor.VisitDependentObject(Castle.ActiveRecord.Framework.Internal.DependentObjectModel)">
            <summary>设置 AbstractDepthFirstVisitor.VisitDependentObject(DependentObjectModel model) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Internal.Fakes.StubSemanticVerifierVisitor.VisitDependentObjectDependentObjectModel">
            <summary>设置 AbstractDepthFirstVisitor.VisitDependentObject(DependentObjectModel model) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubSemanticVerifierVisitor.VisitField(Castle.ActiveRecord.Framework.Internal.FieldModel)">
            <summary>设置 SemanticVerifierVisitor.VisitField(FieldModel model) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Internal.Fakes.StubSemanticVerifierVisitor.VisitFieldFieldModel">
            <summary>设置 SemanticVerifierVisitor.VisitField(FieldModel model) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubSemanticVerifierVisitor.VisitHasAndBelongsToMany(Castle.ActiveRecord.Framework.Internal.HasAndBelongsToManyModel)">
            <summary>设置 SemanticVerifierVisitor.VisitHasAndBelongsToMany(HasAndBelongsToManyModel model) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Internal.Fakes.StubSemanticVerifierVisitor.VisitHasAndBelongsToManyHasAndBelongsToManyModel">
            <summary>设置 SemanticVerifierVisitor.VisitHasAndBelongsToMany(HasAndBelongsToManyModel model) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubSemanticVerifierVisitor.VisitHasMany(Castle.ActiveRecord.Framework.Internal.HasManyModel)">
            <summary>设置 SemanticVerifierVisitor.VisitHasMany(HasManyModel model) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Internal.Fakes.StubSemanticVerifierVisitor.VisitHasManyHasManyModel">
            <summary>设置 SemanticVerifierVisitor.VisitHasMany(HasManyModel model) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubSemanticVerifierVisitor.VisitHasManyToAny(Castle.ActiveRecord.Framework.Internal.HasManyToAnyModel)">
            <summary>设置 SemanticVerifierVisitor.VisitHasManyToAny(HasManyToAnyModel model) 的 存根</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubSemanticVerifierVisitor.VisitHasManyToAnyConfig(Castle.ActiveRecord.Framework.Internal.HasManyToAnyModel.Config)">
            <summary>设置 AbstractDepthFirstVisitor.VisitHasManyToAnyConfig(Config hasManyToAnyConfigModel) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Internal.Fakes.StubSemanticVerifierVisitor.VisitHasManyToAnyConfigHasManyToAnyModelConfig">
            <summary>设置 AbstractDepthFirstVisitor.VisitHasManyToAnyConfig(Config hasManyToAnyConfigModel) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Internal.Fakes.StubSemanticVerifierVisitor.VisitHasManyToAnyHasManyToAnyModel">
            <summary>设置 SemanticVerifierVisitor.VisitHasManyToAny(HasManyToAnyModel model) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubSemanticVerifierVisitor.VisitHilo(Castle.ActiveRecord.Framework.Internal.HiloModel)">
            <summary>设置 AbstractDepthFirstVisitor.VisitHilo(HiloModel model) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Internal.Fakes.StubSemanticVerifierVisitor.VisitHiloHiloModel">
            <summary>设置 AbstractDepthFirstVisitor.VisitHilo(HiloModel model) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubSemanticVerifierVisitor.VisitImport(Castle.ActiveRecord.Framework.Internal.ImportModel)">
            <summary>设置 AbstractDepthFirstVisitor.VisitImport(ImportModel model) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Internal.Fakes.StubSemanticVerifierVisitor.VisitImportImportModel">
            <summary>设置 AbstractDepthFirstVisitor.VisitImport(ImportModel model) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubSemanticVerifierVisitor.VisitJoinedTable(Castle.ActiveRecord.Framework.Internal.JoinedTableModel)">
            <summary>设置 SemanticVerifierVisitor.VisitJoinedTable(JoinedTableModel model) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Internal.Fakes.StubSemanticVerifierVisitor.VisitJoinedTableJoinedTableModel">
            <summary>设置 SemanticVerifierVisitor.VisitJoinedTable(JoinedTableModel model) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubSemanticVerifierVisitor.VisitKey(Castle.ActiveRecord.Framework.Internal.KeyModel)">
            <summary>设置 SemanticVerifierVisitor.VisitKey(KeyModel model) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Internal.Fakes.StubSemanticVerifierVisitor.VisitKeyKeyModel">
            <summary>设置 SemanticVerifierVisitor.VisitKey(KeyModel model) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubSemanticVerifierVisitor.VisitModel(Castle.ActiveRecord.Framework.Internal.ActiveRecordModel)">
            <summary>设置 SemanticVerifierVisitor.VisitModel(ActiveRecordModel model) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Internal.Fakes.StubSemanticVerifierVisitor.VisitModelActiveRecordModel">
            <summary>设置 SemanticVerifierVisitor.VisitModel(ActiveRecordModel model) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubSemanticVerifierVisitor.VisitNested(Castle.ActiveRecord.Framework.Internal.NestedModel)">
            <summary>设置 SemanticVerifierVisitor.VisitNested(NestedModel model) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Internal.Fakes.StubSemanticVerifierVisitor.VisitNestedNestedModel">
            <summary>设置 SemanticVerifierVisitor.VisitNested(NestedModel model) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubSemanticVerifierVisitor.VisitNestedParentReference(Castle.ActiveRecord.Framework.Internal.NestedParentReferenceModel)">
            <summary>设置 AbstractDepthFirstVisitor.VisitNestedParentReference(NestedParentReferenceModel referenceModel) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Internal.Fakes.StubSemanticVerifierVisitor.VisitNestedParentReferenceNestedParentReferenceModel">
            <summary>设置 AbstractDepthFirstVisitor.VisitNestedParentReference(NestedParentReferenceModel referenceModel) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubSemanticVerifierVisitor.VisitOneToOne(Castle.ActiveRecord.Framework.Internal.OneToOneModel)">
            <summary>设置 SemanticVerifierVisitor.VisitOneToOne(OneToOneModel model) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Internal.Fakes.StubSemanticVerifierVisitor.VisitOneToOneOneToOneModel">
            <summary>设置 SemanticVerifierVisitor.VisitOneToOne(OneToOneModel model) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubSemanticVerifierVisitor.VisitPrimaryKey(Castle.ActiveRecord.Framework.Internal.PrimaryKeyModel)">
            <summary>设置 SemanticVerifierVisitor.VisitPrimaryKey(PrimaryKeyModel model) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Internal.Fakes.StubSemanticVerifierVisitor.VisitPrimaryKeyPrimaryKeyModel">
            <summary>设置 SemanticVerifierVisitor.VisitPrimaryKey(PrimaryKeyModel model) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubSemanticVerifierVisitor.VisitProperty(Castle.ActiveRecord.Framework.Internal.PropertyModel)">
            <summary>设置 SemanticVerifierVisitor.VisitProperty(PropertyModel model) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Internal.Fakes.StubSemanticVerifierVisitor.VisitPropertyPropertyModel">
            <summary>设置 SemanticVerifierVisitor.VisitProperty(PropertyModel model) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubSemanticVerifierVisitor.VisitTimestamp(Castle.ActiveRecord.Framework.Internal.TimestampModel)">
            <summary>设置 SemanticVerifierVisitor.VisitTimestamp(TimestampModel model) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Internal.Fakes.StubSemanticVerifierVisitor.VisitTimestampTimestampModel">
            <summary>设置 SemanticVerifierVisitor.VisitTimestamp(TimestampModel model) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubSemanticVerifierVisitor.VisitVersion(Castle.ActiveRecord.Framework.Internal.VersionModel)">
            <summary>设置 SemanticVerifierVisitor.VisitVersion(VersionModel model) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Internal.Fakes.StubSemanticVerifierVisitor.VisitVersionVersionModel">
            <summary>设置 SemanticVerifierVisitor.VisitVersion(VersionModel model) 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.StubSemanticVerifierVisitor.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.StubSemanticVerifierVisitor.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.StubSemanticVerifierVisitor.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Internal.Fakes.StubTimestampModel">
            <summary>Castle.ActiveRecord.Framework.Internal.TimestampModel 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubTimestampModel.#ctor(System.Reflection.PropertyInfo,Castle.ActiveRecord.TimestampAttribute)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubTimestampModel.InitializeStub">
            <summary>初始化 type StubTimestampModel 的新实例</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.StubTimestampModel.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.StubTimestampModel.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.StubTimestampModel.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Internal.Fakes.StubVersionModel">
            <summary>Castle.ActiveRecord.Framework.Internal.VersionModel 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubVersionModel.#ctor(System.Reflection.PropertyInfo,Castle.ActiveRecord.VersionAttribute)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubVersionModel.InitializeStub">
            <summary>初始化 type StubVersionModel 的新实例</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.StubVersionModel.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.StubVersionModel.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.StubVersionModel.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Internal.Fakes.StubXmlGenerationVisitor">
            <summary>Castle.ActiveRecord.Framework.Internal.XmlGenerationVisitor 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubXmlGenerationVisitor.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubXmlGenerationVisitor.InitializeStub">
            <summary>初始化 type StubXmlGenerationVisitor 的新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubXmlGenerationVisitor.VisitAny(Castle.ActiveRecord.Framework.Internal.AnyModel)">
            <summary>设置 XmlGenerationVisitor.VisitAny(AnyModel model) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Internal.Fakes.StubXmlGenerationVisitor.VisitAnyAnyModel">
            <summary>设置 XmlGenerationVisitor.VisitAny(AnyModel model) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubXmlGenerationVisitor.VisitBelongsTo(Castle.ActiveRecord.Framework.Internal.BelongsToModel)">
            <summary>设置 XmlGenerationVisitor.VisitBelongsTo(BelongsToModel model) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Internal.Fakes.StubXmlGenerationVisitor.VisitBelongsToBelongsToModel">
            <summary>设置 XmlGenerationVisitor.VisitBelongsTo(BelongsToModel model) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubXmlGenerationVisitor.VisitCollectionID(Castle.ActiveRecord.Framework.Internal.CollectionIDModel)">
            <summary>设置 XmlGenerationVisitor.VisitCollectionID(CollectionIDModel model) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Internal.Fakes.StubXmlGenerationVisitor.VisitCollectionIDCollectionIDModel">
            <summary>设置 XmlGenerationVisitor.VisitCollectionID(CollectionIDModel model) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubXmlGenerationVisitor.VisitCompositePrimaryKey(Castle.ActiveRecord.Framework.Internal.CompositeKeyModel)">
            <summary>设置 XmlGenerationVisitor.VisitCompositePrimaryKey(CompositeKeyModel model) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Internal.Fakes.StubXmlGenerationVisitor.VisitCompositePrimaryKeyCompositeKeyModel">
            <summary>设置 XmlGenerationVisitor.VisitCompositePrimaryKey(CompositeKeyModel model) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubXmlGenerationVisitor.VisitCompositeUserType(Castle.ActiveRecord.Framework.Internal.CompositeUserTypeModel)">
            <summary>设置 XmlGenerationVisitor.VisitCompositeUserType(CompositeUserTypeModel model) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Internal.Fakes.StubXmlGenerationVisitor.VisitCompositeUserTypeCompositeUserTypeModel">
            <summary>设置 XmlGenerationVisitor.VisitCompositeUserType(CompositeUserTypeModel model) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubXmlGenerationVisitor.VisitDependentObject(Castle.ActiveRecord.Framework.Internal.DependentObjectModel)">
            <summary>设置 XmlGenerationVisitor.VisitDependentObject(DependentObjectModel model) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Internal.Fakes.StubXmlGenerationVisitor.VisitDependentObjectDependentObjectModel">
            <summary>设置 XmlGenerationVisitor.VisitDependentObject(DependentObjectModel model) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubXmlGenerationVisitor.VisitField(Castle.ActiveRecord.Framework.Internal.FieldModel)">
            <summary>设置 XmlGenerationVisitor.VisitField(FieldModel model) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Internal.Fakes.StubXmlGenerationVisitor.VisitFieldFieldModel">
            <summary>设置 XmlGenerationVisitor.VisitField(FieldModel model) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubXmlGenerationVisitor.VisitHasAndBelongsToMany(Castle.ActiveRecord.Framework.Internal.HasAndBelongsToManyModel)">
            <summary>设置 XmlGenerationVisitor.VisitHasAndBelongsToMany(HasAndBelongsToManyModel model) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Internal.Fakes.StubXmlGenerationVisitor.VisitHasAndBelongsToManyHasAndBelongsToManyModel">
            <summary>设置 XmlGenerationVisitor.VisitHasAndBelongsToMany(HasAndBelongsToManyModel model) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubXmlGenerationVisitor.VisitHasMany(Castle.ActiveRecord.Framework.Internal.HasManyModel)">
            <summary>设置 XmlGenerationVisitor.VisitHasMany(HasManyModel model) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Internal.Fakes.StubXmlGenerationVisitor.VisitHasManyHasManyModel">
            <summary>设置 XmlGenerationVisitor.VisitHasMany(HasManyModel model) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubXmlGenerationVisitor.VisitHasManyToAny(Castle.ActiveRecord.Framework.Internal.HasManyToAnyModel)">
            <summary>设置 XmlGenerationVisitor.VisitHasManyToAny(HasManyToAnyModel model) 的 存根</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubXmlGenerationVisitor.VisitHasManyToAnyConfig(Castle.ActiveRecord.Framework.Internal.HasManyToAnyModel.Config)">
            <summary>设置 XmlGenerationVisitor.VisitHasManyToAnyConfig(Config model) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Internal.Fakes.StubXmlGenerationVisitor.VisitHasManyToAnyConfigHasManyToAnyModelConfig">
            <summary>设置 XmlGenerationVisitor.VisitHasManyToAnyConfig(Config model) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Internal.Fakes.StubXmlGenerationVisitor.VisitHasManyToAnyHasManyToAnyModel">
            <summary>设置 XmlGenerationVisitor.VisitHasManyToAny(HasManyToAnyModel model) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubXmlGenerationVisitor.VisitHilo(Castle.ActiveRecord.Framework.Internal.HiloModel)">
            <summary>设置 XmlGenerationVisitor.VisitHilo(HiloModel model) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Internal.Fakes.StubXmlGenerationVisitor.VisitHiloHiloModel">
            <summary>设置 XmlGenerationVisitor.VisitHilo(HiloModel model) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubXmlGenerationVisitor.VisitImport(Castle.ActiveRecord.Framework.Internal.ImportModel)">
            <summary>设置 XmlGenerationVisitor.VisitImport(ImportModel model) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Internal.Fakes.StubXmlGenerationVisitor.VisitImportImportModel">
            <summary>设置 XmlGenerationVisitor.VisitImport(ImportModel model) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubXmlGenerationVisitor.VisitJoinedTable(Castle.ActiveRecord.Framework.Internal.JoinedTableModel)">
            <summary>设置 XmlGenerationVisitor.VisitJoinedTable(JoinedTableModel model) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Internal.Fakes.StubXmlGenerationVisitor.VisitJoinedTableJoinedTableModel">
            <summary>设置 XmlGenerationVisitor.VisitJoinedTable(JoinedTableModel model) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubXmlGenerationVisitor.VisitKey(Castle.ActiveRecord.Framework.Internal.KeyModel)">
            <summary>设置 XmlGenerationVisitor.VisitKey(KeyModel model) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Internal.Fakes.StubXmlGenerationVisitor.VisitKeyKeyModel">
            <summary>设置 XmlGenerationVisitor.VisitKey(KeyModel model) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubXmlGenerationVisitor.VisitModel(Castle.ActiveRecord.Framework.Internal.ActiveRecordModel)">
            <summary>设置 XmlGenerationVisitor.VisitModel(ActiveRecordModel model) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Internal.Fakes.StubXmlGenerationVisitor.VisitModelActiveRecordModel">
            <summary>设置 XmlGenerationVisitor.VisitModel(ActiveRecordModel model) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubXmlGenerationVisitor.VisitNested(Castle.ActiveRecord.Framework.Internal.NestedModel)">
            <summary>设置 XmlGenerationVisitor.VisitNested(NestedModel model) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Internal.Fakes.StubXmlGenerationVisitor.VisitNestedNestedModel">
            <summary>设置 XmlGenerationVisitor.VisitNested(NestedModel model) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubXmlGenerationVisitor.VisitNestedParentReference(Castle.ActiveRecord.Framework.Internal.NestedParentReferenceModel)">
            <summary>设置 XmlGenerationVisitor.VisitNestedParentReference(NestedParentReferenceModel referenceModel) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Internal.Fakes.StubXmlGenerationVisitor.VisitNestedParentReferenceNestedParentReferenceModel">
            <summary>设置 XmlGenerationVisitor.VisitNestedParentReference(NestedParentReferenceModel referenceModel) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubXmlGenerationVisitor.VisitOneToOne(Castle.ActiveRecord.Framework.Internal.OneToOneModel)">
            <summary>设置 XmlGenerationVisitor.VisitOneToOne(OneToOneModel model) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Internal.Fakes.StubXmlGenerationVisitor.VisitOneToOneOneToOneModel">
            <summary>设置 XmlGenerationVisitor.VisitOneToOne(OneToOneModel model) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubXmlGenerationVisitor.VisitPrimaryKey(Castle.ActiveRecord.Framework.Internal.PrimaryKeyModel)">
            <summary>设置 XmlGenerationVisitor.VisitPrimaryKey(PrimaryKeyModel model) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Internal.Fakes.StubXmlGenerationVisitor.VisitPrimaryKeyPrimaryKeyModel">
            <summary>设置 XmlGenerationVisitor.VisitPrimaryKey(PrimaryKeyModel model) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubXmlGenerationVisitor.VisitProperty(Castle.ActiveRecord.Framework.Internal.PropertyModel)">
            <summary>设置 XmlGenerationVisitor.VisitProperty(PropertyModel model) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Internal.Fakes.StubXmlGenerationVisitor.VisitPropertyPropertyModel">
            <summary>设置 XmlGenerationVisitor.VisitProperty(PropertyModel model) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubXmlGenerationVisitor.VisitTimestamp(Castle.ActiveRecord.Framework.Internal.TimestampModel)">
            <summary>设置 XmlGenerationVisitor.VisitTimestamp(TimestampModel model) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Internal.Fakes.StubXmlGenerationVisitor.VisitTimestampTimestampModel">
            <summary>设置 XmlGenerationVisitor.VisitTimestamp(TimestampModel model) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Internal.Fakes.StubXmlGenerationVisitor.VisitVersion(Castle.ActiveRecord.Framework.Internal.VersionModel)">
            <summary>设置 XmlGenerationVisitor.VisitVersion(VersionModel model) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Internal.Fakes.StubXmlGenerationVisitor.VisitVersionVersionModel">
            <summary>设置 XmlGenerationVisitor.VisitVersion(VersionModel model) 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.StubXmlGenerationVisitor.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.StubXmlGenerationVisitor.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Internal.Fakes.StubXmlGenerationVisitor.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Scopes.Fakes.ShimAbstractScope">
            <summary>Castle.ActiveRecord.Framework.Scopes.AbstractScope 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Scopes.Fakes.ShimAbstractScope.#ctor(Castle.ActiveRecord.Framework.Scopes.AbstractScope)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Scopes.Fakes.ShimAbstractScope.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Scopes.Fakes.ShimAbstractScope.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Scopes.Fakes.ShimAbstractScope.Bind(Castle.ActiveRecord.ISessionScope)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Scopes.Fakes.ShimAbstractScope.Bind(System.IDisposable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Scopes.Fakes.ShimAbstractScope.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Scopes.Fakes.ShimAbstractScope.ConstructorFlushActionSessionScopeType">
            <summary>设置 AbstractScope.AbstractScope(FlushAction flushAction, SessionScopeType type) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Scopes.Fakes.ShimAbstractScope.DiscardSessionsICollectionOfISession">
            <summary>设置 AbstractScope.DiscardSessions(ICollection`1&lt;ISession&gt; sessions) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Scopes.Fakes.ShimAbstractScope.Dispose">
            <summary>设置 AbstractScope.Dispose() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Scopes.Fakes.ShimAbstractScope.EvictObject">
            <summary>设置 AbstractScope.Evict(Object instance) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Scopes.Fakes.ShimAbstractScope.Flush">
            <summary>设置 AbstractScope.Flush() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Scopes.Fakes.ShimAbstractScope.FlushActionGet">
            <summary>设置 AbstractScope.get_FlushAction() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Scopes.Fakes.ShimAbstractScope.GetSessionObject">
            <summary>设置 AbstractScope.GetSession(Object key) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Scopes.Fakes.ShimAbstractScope.GetSessions">
            <summary>设置 AbstractScope.GetSessions() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Scopes.Fakes.ShimAbstractScope.InitializeISession">
            <summary>设置 AbstractScope.Initialize(ISession session) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Scopes.Fakes.ShimAbstractScope.IsKeyKnownObject">
            <summary>设置 AbstractScope.IsKeyKnown(Object key) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Scopes.Fakes.ShimAbstractScope.OpenSessionISessionFactoryIInterceptor">
            <summary>设置 AbstractScope.OpenSession(ISessionFactory sessionFactory, IInterceptor interceptor) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Scopes.Fakes.ShimAbstractScope.PerformDisposalICollectionOfISession">
            <summary>设置 AbstractScope.PerformDisposal(ICollection`1&lt;ISession&gt; sessions) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Scopes.Fakes.ShimAbstractScope.PerformDisposalICollectionOfISessionBooleanBoolean">
            <summary>设置 AbstractScope.PerformDisposal(ICollection`1&lt;ISession&gt; sessions, Boolean flush, Boolean close) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Scopes.Fakes.ShimAbstractScope.RegisterSessionObjectISession">
            <summary>设置 AbstractScope.RegisterSession(Object key, ISession session) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Scopes.Fakes.ShimAbstractScope.RemoveSessionISession">
            <summary>设置 AbstractScope.RemoveSession(ISession session) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Scopes.Fakes.ShimAbstractScope.ResetFlushMode">
            <summary>设置 AbstractScope.ResetFlushMode() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Scopes.Fakes.ShimAbstractScope.ScopeTypeGet">
            <summary>设置 AbstractScope.get_ScopeType() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Scopes.Fakes.ShimAbstractScope.SetFlushModeISession">
            <summary>设置 AbstractScope.SetFlushMode(ISession session) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Scopes.Fakes.ShimAbstractScope.WantsToCreateTheSessionGet">
            <summary>设置 AbstractScope.get_WantsToCreateTheSession() 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Scopes.Fakes.ShimAbstractScope.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Scopes.Fakes.ShimAbstractScope.AllInstances.DiscardSessionsICollectionOfISession">
            <summary>设置 AbstractScope.DiscardSessions(ICollection`1&lt;ISession&gt; sessions) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Scopes.Fakes.ShimAbstractScope.AllInstances.Dispose">
            <summary>设置 AbstractScope.Dispose() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Scopes.Fakes.ShimAbstractScope.AllInstances.EvictObject">
            <summary>设置 AbstractScope.Evict(Object instance) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Scopes.Fakes.ShimAbstractScope.AllInstances.Flush">
            <summary>设置 AbstractScope.Flush() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Scopes.Fakes.ShimAbstractScope.AllInstances.FlushActionGet">
            <summary>设置 AbstractScope.get_FlushAction() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Scopes.Fakes.ShimAbstractScope.AllInstances.GetSessionObject">
            <summary>设置 AbstractScope.GetSession(Object key) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Scopes.Fakes.ShimAbstractScope.AllInstances.GetSessions">
            <summary>设置 AbstractScope.GetSessions() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Scopes.Fakes.ShimAbstractScope.AllInstances.InitializeISession">
            <summary>设置 AbstractScope.Initialize(ISession session) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Scopes.Fakes.ShimAbstractScope.AllInstances.IsKeyKnownObject">
            <summary>设置 AbstractScope.IsKeyKnown(Object key) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Scopes.Fakes.ShimAbstractScope.AllInstances.OpenSessionISessionFactoryIInterceptor">
            <summary>设置 AbstractScope.OpenSession(ISessionFactory sessionFactory, IInterceptor interceptor) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Scopes.Fakes.ShimAbstractScope.AllInstances.PerformDisposalICollectionOfISession">
            <summary>设置 AbstractScope.PerformDisposal(ICollection`1&lt;ISession&gt; sessions) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Scopes.Fakes.ShimAbstractScope.AllInstances.PerformDisposalICollectionOfISessionBooleanBoolean">
            <summary>设置 AbstractScope.PerformDisposal(ICollection`1&lt;ISession&gt; sessions, Boolean flush, Boolean close) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Scopes.Fakes.ShimAbstractScope.AllInstances.RegisterSessionObjectISession">
            <summary>设置 AbstractScope.RegisterSession(Object key, ISession session) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Scopes.Fakes.ShimAbstractScope.AllInstances.RemoveSessionISession">
            <summary>设置 AbstractScope.RemoveSession(ISession session) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Scopes.Fakes.ShimAbstractScope.AllInstances.ResetFlushMode">
            <summary>设置 AbstractScope.ResetFlushMode() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Scopes.Fakes.ShimAbstractScope.AllInstances.ScopeTypeGet">
            <summary>设置 AbstractScope.get_ScopeType() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Scopes.Fakes.ShimAbstractScope.AllInstances.SetFlushModeISession">
            <summary>设置 AbstractScope.SetFlushMode(ISession session) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Scopes.Fakes.ShimAbstractScope.AllInstances.WantsToCreateTheSessionGet">
            <summary>设置 AbstractScope.get_WantsToCreateTheSession() 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Scopes.Fakes.ShimAbstractThreadScopeInfo">
            <summary>Castle.ActiveRecord.Framework.Scopes.AbstractThreadScopeInfo 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Scopes.Fakes.ShimAbstractThreadScopeInfo.#ctor(Castle.ActiveRecord.Framework.Scopes.AbstractThreadScopeInfo)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Scopes.Fakes.ShimAbstractThreadScopeInfo.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Scopes.Fakes.ShimAbstractThreadScopeInfo.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Scopes.Fakes.ShimAbstractThreadScopeInfo.Bind(Castle.ActiveRecord.Framework.IThreadScopeInfo)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Scopes.Fakes.ShimAbstractThreadScopeInfo.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Scopes.Fakes.ShimAbstractThreadScopeInfo.Constructor">
            <summary>设置 AbstractThreadScopeInfo.AbstractThreadScopeInfo() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Scopes.Fakes.ShimAbstractThreadScopeInfo.GetRegisteredScope">
            <summary>设置 AbstractThreadScopeInfo.GetRegisteredScope() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Scopes.Fakes.ShimAbstractThreadScopeInfo.HasInitializedScopeGet">
            <summary>设置 AbstractThreadScopeInfo.get_HasInitializedScope() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Scopes.Fakes.ShimAbstractThreadScopeInfo.RegisterScopeISessionScope">
            <summary>设置 AbstractThreadScopeInfo.RegisterScope(ISessionScope scope) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Scopes.Fakes.ShimAbstractThreadScopeInfo.UnRegisterScopeISessionScope">
            <summary>设置 AbstractThreadScopeInfo.UnRegisterScope(ISessionScope scope) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Scopes.Fakes.ShimAbstractThreadScopeInfo.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Scopes.Fakes.ShimAbstractThreadScopeInfo.AllInstances.GetRegisteredScope">
            <summary>设置 AbstractThreadScopeInfo.GetRegisteredScope() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Scopes.Fakes.ShimAbstractThreadScopeInfo.AllInstances.HasInitializedScopeGet">
            <summary>设置 AbstractThreadScopeInfo.get_HasInitializedScope() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Scopes.Fakes.ShimAbstractThreadScopeInfo.AllInstances.RegisterScopeISessionScope">
            <summary>设置 AbstractThreadScopeInfo.RegisterScope(ISessionScope scope) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Scopes.Fakes.ShimAbstractThreadScopeInfo.AllInstances.UnRegisterScopeISessionScope">
            <summary>设置 AbstractThreadScopeInfo.UnRegisterScope(ISessionScope scope) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Scopes.Fakes.ShimDifferentDatabaseScope">
            <summary>Castle.ActiveRecord.Framework.Scopes.DifferentDatabaseScope 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Scopes.Fakes.ShimDifferentDatabaseScope.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Scopes.Fakes.ShimDifferentDatabaseScope.#ctor(Castle.ActiveRecord.Framework.Scopes.DifferentDatabaseScope)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Scopes.Fakes.ShimDifferentDatabaseScope.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Scopes.Fakes.ShimDifferentDatabaseScope.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Scopes.Fakes.ShimDifferentDatabaseScope.Bind(Castle.ActiveRecord.ISessionScope)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Scopes.Fakes.ShimDifferentDatabaseScope.Bind(System.IDisposable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Scopes.Fakes.ShimDifferentDatabaseScope.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Scopes.Fakes.ShimDifferentDatabaseScope.ConstructorIDbConnection">
            <summary>设置 DifferentDatabaseScope.DifferentDatabaseScope(IDbConnection connection) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Scopes.Fakes.ShimDifferentDatabaseScope.ConstructorIDbConnectionFlushAction">
            <summary>设置 DifferentDatabaseScope.DifferentDatabaseScope(IDbConnection connection, FlushAction flushAction) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Scopes.Fakes.ShimDifferentDatabaseScope.FailSessionISession">
            <summary>设置 DifferentDatabaseScope.FailSession(ISession session) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Scopes.Fakes.ShimDifferentDatabaseScope.GetSessionObject">
            <summary>设置 DifferentDatabaseScope.GetSession(Object key) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Scopes.Fakes.ShimDifferentDatabaseScope.IsKeyKnownObject">
            <summary>设置 DifferentDatabaseScope.IsKeyKnown(Object key) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Scopes.Fakes.ShimDifferentDatabaseScope.OnTransactionCompletedObjectEventArgs">
            <summary>设置 DifferentDatabaseScope.OnTransactionCompleted(Object sender, EventArgs e) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Scopes.Fakes.ShimDifferentDatabaseScope.OpenSessionISessionFactoryIInterceptor">
            <summary>设置 DifferentDatabaseScope.OpenSession(ISessionFactory sessionFactory, IInterceptor interceptor) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Scopes.Fakes.ShimDifferentDatabaseScope.PerformDisposalICollectionOfISession">
            <summary>设置 DifferentDatabaseScope.PerformDisposal(ICollection`1&lt;ISession&gt; sessions) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Scopes.Fakes.ShimDifferentDatabaseScope.RegisterSessionObjectISession">
            <summary>设置 DifferentDatabaseScope.RegisterSession(Object key, ISession session) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Scopes.Fakes.ShimDifferentDatabaseScope.WantsToCreateTheSessionGet">
            <summary>设置 DifferentDatabaseScope.get_WantsToCreateTheSession() 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Scopes.Fakes.ShimDifferentDatabaseScope.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Scopes.Fakes.ShimDifferentDatabaseScope.AllInstances.FailSessionISession">
            <summary>设置 DifferentDatabaseScope.FailSession(ISession session) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Scopes.Fakes.ShimDifferentDatabaseScope.AllInstances.GetSessionObject">
            <summary>设置 DifferentDatabaseScope.GetSession(Object key) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Scopes.Fakes.ShimDifferentDatabaseScope.AllInstances.IsKeyKnownObject">
            <summary>设置 DifferentDatabaseScope.IsKeyKnown(Object key) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Scopes.Fakes.ShimDifferentDatabaseScope.AllInstances.OnTransactionCompletedObjectEventArgs">
            <summary>设置 DifferentDatabaseScope.OnTransactionCompleted(Object sender, EventArgs e) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Scopes.Fakes.ShimDifferentDatabaseScope.AllInstances.OpenSessionISessionFactoryIInterceptor">
            <summary>设置 DifferentDatabaseScope.OpenSession(ISessionFactory sessionFactory, IInterceptor interceptor) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Scopes.Fakes.ShimDifferentDatabaseScope.AllInstances.PerformDisposalICollectionOfISession">
            <summary>设置 DifferentDatabaseScope.PerformDisposal(ICollection`1&lt;ISession&gt; sessions) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Scopes.Fakes.ShimDifferentDatabaseScope.AllInstances.RegisterSessionObjectISession">
            <summary>设置 DifferentDatabaseScope.RegisterSession(Object key, ISession session) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Scopes.Fakes.ShimDifferentDatabaseScope.AllInstances.WantsToCreateTheSessionGet">
            <summary>设置 DifferentDatabaseScope.get_WantsToCreateTheSession() 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Scopes.Fakes.ShimScopeMachineryException">
            <summary>Castle.ActiveRecord.Framework.Scopes.ScopeMachineryException 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Scopes.Fakes.ShimScopeMachineryException.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Scopes.Fakes.ShimScopeMachineryException.#ctor(Castle.ActiveRecord.Framework.Scopes.ScopeMachineryException)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Scopes.Fakes.ShimScopeMachineryException.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Scopes.Fakes.ShimScopeMachineryException.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Scopes.Fakes.ShimScopeMachineryException.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Scopes.Fakes.ShimScopeMachineryException.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Scopes.Fakes.ShimScopeMachineryException.ConstructorSerializationInfoStreamingContext">
            <summary>设置 ScopeMachineryException.ScopeMachineryException(SerializationInfo info, StreamingContext context) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Scopes.Fakes.ShimScopeMachineryException.ConstructorString">
            <summary>设置 ScopeMachineryException.ScopeMachineryException(String message) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Scopes.Fakes.ShimScopeMachineryException.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Scopes.Fakes.ShimThreadScopeAccessor">
            <summary>Castle.ActiveRecord.Framework.Scopes.ThreadScopeAccessor 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Scopes.Fakes.ShimThreadScopeAccessor.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Scopes.Fakes.ShimThreadScopeAccessor.#ctor(Castle.ActiveRecord.Framework.Scopes.ThreadScopeAccessor)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Scopes.Fakes.ShimThreadScopeAccessor.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Scopes.Fakes.ShimThreadScopeAccessor.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Scopes.Fakes.ShimThreadScopeAccessor.Bind(Castle.ActiveRecord.Framework.IThreadScopeInfo)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Scopes.Fakes.ShimThreadScopeAccessor.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Scopes.Fakes.ShimThreadScopeAccessor.Constructor">
            <summary>设置 ThreadScopeAccessor.ThreadScopeAccessor() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Scopes.Fakes.ShimThreadScopeAccessor.CurrentStackGet">
            <summary>设置 ThreadScopeAccessor.get_CurrentStack() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Scopes.Fakes.ShimThreadScopeAccessor.GetRegisteredScope">
            <summary>设置 ThreadScopeAccessor.GetRegisteredScope() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Scopes.Fakes.ShimThreadScopeAccessor.HasInitializedScopeGet">
            <summary>设置 ThreadScopeAccessor.get_HasInitializedScope() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Scopes.Fakes.ShimThreadScopeAccessor.InstanceGet">
            <summary>设置 ThreadScopeAccessor.get_Instance() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Scopes.Fakes.ShimThreadScopeAccessor.RegisterScopeISessionScope">
            <summary>设置 ThreadScopeAccessor.RegisterScope(ISessionScope scope) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Scopes.Fakes.ShimThreadScopeAccessor.ScopeInfoGet">
            <summary>设置 ThreadScopeAccessor.get_ScopeInfo() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Scopes.Fakes.ShimThreadScopeAccessor.ScopeInfoSetIThreadScopeInfo">
            <summary>设置 ThreadScopeAccessor.set_ScopeInfo(IThreadScopeInfo value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Scopes.Fakes.ShimThreadScopeAccessor.StaticConstructor">
            <summary>设置 ThreadScopeAccessor.ThreadScopeAccessor() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Scopes.Fakes.ShimThreadScopeAccessor.UnRegisterScopeISessionScope">
            <summary>设置 ThreadScopeAccessor.UnRegisterScope(ISessionScope scope) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Scopes.Fakes.ShimThreadScopeAccessor.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Scopes.Fakes.ShimThreadScopeAccessor.AllInstances.CurrentStackGet">
            <summary>设置 ThreadScopeAccessor.get_CurrentStack() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Scopes.Fakes.ShimThreadScopeAccessor.AllInstances.GetRegisteredScope">
            <summary>设置 ThreadScopeAccessor.GetRegisteredScope() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Scopes.Fakes.ShimThreadScopeAccessor.AllInstances.HasInitializedScopeGet">
            <summary>设置 ThreadScopeAccessor.get_HasInitializedScope() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Scopes.Fakes.ShimThreadScopeAccessor.AllInstances.RegisterScopeISessionScope">
            <summary>设置 ThreadScopeAccessor.RegisterScope(ISessionScope scope) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Scopes.Fakes.ShimThreadScopeAccessor.AllInstances.ScopeInfoGet">
            <summary>设置 ThreadScopeAccessor.get_ScopeInfo() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Scopes.Fakes.ShimThreadScopeAccessor.AllInstances.ScopeInfoSetIThreadScopeInfo">
            <summary>设置 ThreadScopeAccessor.set_ScopeInfo(IThreadScopeInfo value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Scopes.Fakes.ShimThreadScopeAccessor.AllInstances.UnRegisterScopeISessionScope">
            <summary>设置 ThreadScopeAccessor.UnRegisterScope(ISessionScope scope) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Scopes.Fakes.ShimThreadScopeInfo">
            <summary>Castle.ActiveRecord.Framework.Scopes.ThreadScopeInfo 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Scopes.Fakes.ShimThreadScopeInfo.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Scopes.Fakes.ShimThreadScopeInfo.#ctor(Castle.ActiveRecord.Framework.Scopes.ThreadScopeInfo)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Scopes.Fakes.ShimThreadScopeInfo.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Scopes.Fakes.ShimThreadScopeInfo.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Scopes.Fakes.ShimThreadScopeInfo.Bind(Castle.ActiveRecord.Framework.IThreadScopeInfo)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Scopes.Fakes.ShimThreadScopeInfo.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Scopes.Fakes.ShimThreadScopeInfo.Constructor">
            <summary>设置 ThreadScopeInfo.ThreadScopeInfo() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Scopes.Fakes.ShimThreadScopeInfo.CurrentStackGet">
            <summary>设置 ThreadScopeInfo.get_CurrentStack() 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Scopes.Fakes.ShimThreadScopeInfo.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Scopes.Fakes.ShimThreadScopeInfo.AllInstances.CurrentStackGet">
            <summary>设置 ThreadScopeInfo.get_CurrentStack() 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Scopes.Fakes.StubAbstractScope">
            <summary>Castle.ActiveRecord.Framework.Scopes.AbstractScope 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Scopes.Fakes.StubAbstractScope.#ctor(Castle.ActiveRecord.FlushAction,Castle.ActiveRecord.SessionScopeType)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Scopes.Fakes.StubAbstractScope.DiscardSessions(System.Collections.Generic.ICollection{NHibernate.ISession})">
            <summary>设置 AbstractScope.DiscardSessions(ICollection`1&lt;ISession&gt; sessions) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Scopes.Fakes.StubAbstractScope.DiscardSessionsICollectionOfISession">
            <summary>设置 AbstractScope.DiscardSessions(ICollection`1&lt;ISession&gt; sessions) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Scopes.Fakes.StubAbstractScope.FailSession(NHibernate.ISession)">
            <summary>设置 AbstractScope.FailSession(ISession session) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Scopes.Fakes.StubAbstractScope.FailSessionISession">
            <summary>设置 AbstractScope.FailSession(ISession session) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Scopes.Fakes.StubAbstractScope.Flush">
            <summary>设置 AbstractScope.Flush() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Scopes.Fakes.StubAbstractScope.Flush01">
            <summary>设置 AbstractScope.Flush() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Scopes.Fakes.StubAbstractScope.GetSession(System.Object)">
            <summary>设置 AbstractScope.GetSession(Object key) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Scopes.Fakes.StubAbstractScope.GetSessionObject">
            <summary>设置 AbstractScope.GetSession(Object key) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Scopes.Fakes.StubAbstractScope.Initialize(NHibernate.ISession)">
            <summary>设置 AbstractScope.Initialize(ISession session) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Scopes.Fakes.StubAbstractScope.InitializeISession">
            <summary>设置 AbstractScope.Initialize(ISession session) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Scopes.Fakes.StubAbstractScope.InitializeStub">
            <summary>初始化 type StubAbstractScope 的新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Scopes.Fakes.StubAbstractScope.IsKeyKnown(System.Object)">
            <summary>设置 AbstractScope.IsKeyKnown(Object key) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Scopes.Fakes.StubAbstractScope.IsKeyKnownObject">
            <summary>设置 AbstractScope.IsKeyKnown(Object key) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Scopes.Fakes.StubAbstractScope.OpenSession(NHibernate.ISessionFactory,NHibernate.IInterceptor)">
            <summary>设置 AbstractScope.OpenSession(ISessionFactory sessionFactory, IInterceptor interceptor) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Scopes.Fakes.StubAbstractScope.OpenSessionISessionFactoryIInterceptor">
            <summary>设置 AbstractScope.OpenSession(ISessionFactory sessionFactory, IInterceptor interceptor) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Scopes.Fakes.StubAbstractScope.PerformDisposal(System.Collections.Generic.ICollection{NHibernate.ISession})">
            <summary>设置 AbstractScope.PerformDisposal(ICollection`1&lt;ISession&gt; sessions) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Scopes.Fakes.StubAbstractScope.PerformDisposalICollectionOfISession">
            <summary>设置 AbstractScope.PerformDisposal(ICollection`1&lt;ISession&gt; sessions) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Scopes.Fakes.StubAbstractScope.RegisterSession(System.Object,NHibernate.ISession)">
            <summary>设置 AbstractScope.RegisterSession(Object key, ISession session) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Scopes.Fakes.StubAbstractScope.RegisterSessionObjectISession">
            <summary>设置 AbstractScope.RegisterSession(Object key, ISession session) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Scopes.Fakes.StubAbstractScope.WantsToCreateTheSessionGet">
            <summary>设置 AbstractScope.get_WantsToCreateTheSession() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Scopes.Fakes.StubAbstractScope.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Scopes.Fakes.StubAbstractScope.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Scopes.Fakes.StubAbstractScope.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Scopes.Fakes.StubAbstractScope.WantsToCreateTheSession">
            <summary>设置 AbstractScope.get_WantsToCreateTheSession() 的 stub</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Scopes.Fakes.StubAbstractThreadScopeInfo">
            <summary>Castle.ActiveRecord.Framework.Scopes.AbstractThreadScopeInfo 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Scopes.Fakes.StubAbstractThreadScopeInfo.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Scopes.Fakes.StubAbstractThreadScopeInfo.CurrentStackGet">
            <summary>设置 AbstractThreadScopeInfo.get_CurrentStack() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Scopes.Fakes.StubAbstractThreadScopeInfo.InitializeStub">
            <summary>初始化 type StubAbstractThreadScopeInfo 的新实例</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Scopes.Fakes.StubAbstractThreadScopeInfo.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Scopes.Fakes.StubAbstractThreadScopeInfo.CurrentStack">
            <summary>设置 AbstractThreadScopeInfo.get_CurrentStack() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Scopes.Fakes.StubAbstractThreadScopeInfo.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Scopes.Fakes.StubAbstractThreadScopeInfo.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Scopes.Fakes.StubDifferentDatabaseScope">
            <summary>Castle.ActiveRecord.Framework.Scopes.DifferentDatabaseScope 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Scopes.Fakes.StubDifferentDatabaseScope.#ctor(System.Data.IDbConnection)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Scopes.Fakes.StubDifferentDatabaseScope.#ctor(System.Data.IDbConnection,Castle.ActiveRecord.FlushAction)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Scopes.Fakes.StubDifferentDatabaseScope.DiscardSessions(System.Collections.Generic.ICollection{NHibernate.ISession})">
            <summary>设置 AbstractScope.DiscardSessions(ICollection`1&lt;ISession&gt; sessions) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Scopes.Fakes.StubDifferentDatabaseScope.DiscardSessionsICollectionOfISession">
            <summary>设置 AbstractScope.DiscardSessions(ICollection`1&lt;ISession&gt; sessions) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Scopes.Fakes.StubDifferentDatabaseScope.FailSession(NHibernate.ISession)">
            <summary>设置 DifferentDatabaseScope.FailSession(ISession session) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Scopes.Fakes.StubDifferentDatabaseScope.FailSessionISession">
            <summary>设置 DifferentDatabaseScope.FailSession(ISession session) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Scopes.Fakes.StubDifferentDatabaseScope.Flush">
            <summary>设置 AbstractScope.Flush() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Scopes.Fakes.StubDifferentDatabaseScope.Flush01">
            <summary>设置 AbstractScope.Flush() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Scopes.Fakes.StubDifferentDatabaseScope.GetSession(System.Object)">
            <summary>设置 DifferentDatabaseScope.GetSession(Object key) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Scopes.Fakes.StubDifferentDatabaseScope.GetSessionObject">
            <summary>设置 DifferentDatabaseScope.GetSession(Object key) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Scopes.Fakes.StubDifferentDatabaseScope.Initialize(NHibernate.ISession)">
            <summary>设置 AbstractScope.Initialize(ISession session) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Scopes.Fakes.StubDifferentDatabaseScope.InitializeISession">
            <summary>设置 AbstractScope.Initialize(ISession session) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Scopes.Fakes.StubDifferentDatabaseScope.InitializeStub">
            <summary>初始化 type StubDifferentDatabaseScope 的新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Scopes.Fakes.StubDifferentDatabaseScope.IsKeyKnown(System.Object)">
            <summary>设置 DifferentDatabaseScope.IsKeyKnown(Object key) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Scopes.Fakes.StubDifferentDatabaseScope.IsKeyKnownObject">
            <summary>设置 DifferentDatabaseScope.IsKeyKnown(Object key) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Scopes.Fakes.StubDifferentDatabaseScope.OpenSession(NHibernate.ISessionFactory,NHibernate.IInterceptor)">
            <summary>设置 DifferentDatabaseScope.OpenSession(ISessionFactory sessionFactory, IInterceptor interceptor) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Scopes.Fakes.StubDifferentDatabaseScope.OpenSessionISessionFactoryIInterceptor">
            <summary>设置 DifferentDatabaseScope.OpenSession(ISessionFactory sessionFactory, IInterceptor interceptor) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Scopes.Fakes.StubDifferentDatabaseScope.PerformDisposal(System.Collections.Generic.ICollection{NHibernate.ISession})">
            <summary>设置 DifferentDatabaseScope.PerformDisposal(ICollection`1&lt;ISession&gt; sessions) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Scopes.Fakes.StubDifferentDatabaseScope.PerformDisposalICollectionOfISession">
            <summary>设置 DifferentDatabaseScope.PerformDisposal(ICollection`1&lt;ISession&gt; sessions) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Scopes.Fakes.StubDifferentDatabaseScope.RegisterSession(System.Object,NHibernate.ISession)">
            <summary>设置 DifferentDatabaseScope.RegisterSession(Object key, ISession session) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Scopes.Fakes.StubDifferentDatabaseScope.RegisterSessionObjectISession">
            <summary>设置 DifferentDatabaseScope.RegisterSession(Object key, ISession session) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Scopes.Fakes.StubDifferentDatabaseScope.WantsToCreateTheSessionGet">
            <summary>设置 DifferentDatabaseScope.get_WantsToCreateTheSession() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Scopes.Fakes.StubDifferentDatabaseScope.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Scopes.Fakes.StubDifferentDatabaseScope.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Scopes.Fakes.StubDifferentDatabaseScope.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Scopes.Fakes.StubDifferentDatabaseScope.WantsToCreateTheSession">
            <summary>设置 DifferentDatabaseScope.get_WantsToCreateTheSession() 的 stub</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Scopes.Fakes.StubScopeMachineryException">
            <summary>Castle.ActiveRecord.Framework.Scopes.ScopeMachineryException 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Scopes.Fakes.StubScopeMachineryException.#ctor(System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Scopes.Fakes.StubScopeMachineryException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Scopes.Fakes.StubScopeMachineryException.AttachBackingFieldToHelpLink">
            <summary>附加委托以将 StubScopeMachineryException.HelpLink 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Scopes.Fakes.StubScopeMachineryException.AttachBackingFieldToSource">
            <summary>附加委托以将 StubScopeMachineryException.Source 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Scopes.Fakes.StubScopeMachineryException.DataGet">
            <summary>设置 Exception.get_Data() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Scopes.Fakes.StubScopeMachineryException.GetBaseException">
            <summary>设置 Exception.GetBaseException() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Scopes.Fakes.StubScopeMachineryException.GetBaseException01">
            <summary>设置 Exception.GetBaseException() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Scopes.Fakes.StubScopeMachineryException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>设置 Exception.GetObjectData(SerializationInfo info, StreamingContext context) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Scopes.Fakes.StubScopeMachineryException.GetObjectDataSerializationInfoStreamingContext">
            <summary>设置 Exception.GetObjectData(SerializationInfo info, StreamingContext context) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Scopes.Fakes.StubScopeMachineryException.HelpLinkGet">
            <summary>设置 Exception.get_HelpLink() 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Scopes.Fakes.StubScopeMachineryException.HelpLinkSetString">
            <summary>设置 Exception.set_HelpLink(String value) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Scopes.Fakes.StubScopeMachineryException.InitializeStub">
            <summary>初始化 type StubScopeMachineryException 的新实例</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Scopes.Fakes.StubScopeMachineryException.MessageGet">
            <summary>设置 Exception.get_Message() 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Scopes.Fakes.StubScopeMachineryException.SourceGet">
            <summary>设置 Exception.get_Source() 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Scopes.Fakes.StubScopeMachineryException.SourceSetString">
            <summary>设置 Exception.set_Source(String value) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Scopes.Fakes.StubScopeMachineryException.StackTraceGet">
            <summary>设置 Exception.get_StackTrace() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Scopes.Fakes.StubScopeMachineryException.ToString">
            <summary>设置 Exception.ToString() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Scopes.Fakes.StubScopeMachineryException.ToString01">
            <summary>设置 Exception.ToString() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Scopes.Fakes.StubScopeMachineryException.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Scopes.Fakes.StubScopeMachineryException.Data">
            <summary>设置 Exception.get_Data() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Scopes.Fakes.StubScopeMachineryException.HelpLink">
            <summary>设置 Exception.get_HelpLink() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Scopes.Fakes.StubScopeMachineryException.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Scopes.Fakes.StubScopeMachineryException.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Scopes.Fakes.StubScopeMachineryException.Message">
            <summary>设置 Exception.get_Message() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Scopes.Fakes.StubScopeMachineryException.Source">
            <summary>设置 Exception.get_Source() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Scopes.Fakes.StubScopeMachineryException.StackTrace">
            <summary>设置 Exception.get_StackTrace() 的 stub</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Validators.Fakes.ShimIsUniqueValidator">
            <summary>Castle.ActiveRecord.Framework.Validators.IsUniqueValidator 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Validators.Fakes.ShimIsUniqueValidator.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Validators.Fakes.ShimIsUniqueValidator.#ctor(Castle.ActiveRecord.Framework.Validators.IsUniqueValidator)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Validators.Fakes.ShimIsUniqueValidator.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Validators.Fakes.ShimIsUniqueValidator.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Validators.Fakes.ShimIsUniqueValidator.Bind(Castle.Components.Validator.IPropertyAccessAware)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Validators.Fakes.ShimIsUniqueValidator.Bind(Castle.Components.Validator.IValidator)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Validators.Fakes.ShimIsUniqueValidator.ApplyBrowserValidationBrowserValidationConfigurationInputElementTypeIBrowserValidationGeneratorIDictionaryString">
            <summary>设置 IsUniqueValidator.ApplyBrowserValidation(BrowserValidationConfiguration config, InputElementType inputType, IBrowserValidationGenerator generator, IDictionary attributes, String target) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Validators.Fakes.ShimIsUniqueValidator.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Validators.Fakes.ShimIsUniqueValidator.BuildErrorMessage">
            <summary>设置 IsUniqueValidator.BuildErrorMessage() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Validators.Fakes.ShimIsUniqueValidator.CheckUniquenessISessionObject">
            <summary>设置 IsUniqueValidator.CheckUniqueness(ISession session, Object instance) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Validators.Fakes.ShimIsUniqueValidator.Constructor">
            <summary>设置 IsUniqueValidator.IsUniqueValidator() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Validators.Fakes.ShimIsUniqueValidator.IsValidObjectObject">
            <summary>设置 IsUniqueValidator.IsValid(Object instance, Object fieldValue) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Validators.Fakes.ShimIsUniqueValidator.SupportsBrowserValidationGet">
            <summary>设置 IsUniqueValidator.get_SupportsBrowserValidation() 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Validators.Fakes.ShimIsUniqueValidator.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Validators.Fakes.ShimIsUniqueValidator.AllInstances.ApplyBrowserValidationBrowserValidationConfigurationInputElementTypeIBrowserValidationGeneratorIDictionaryString">
            <summary>设置 IsUniqueValidator.ApplyBrowserValidation(BrowserValidationConfiguration config, InputElementType inputType, IBrowserValidationGenerator generator, IDictionary attributes, String target) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Validators.Fakes.ShimIsUniqueValidator.AllInstances.BuildErrorMessage">
            <summary>设置 IsUniqueValidator.BuildErrorMessage() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Validators.Fakes.ShimIsUniqueValidator.AllInstances.CheckUniquenessISessionObject">
            <summary>设置 IsUniqueValidator.CheckUniqueness(ISession session, Object instance) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Validators.Fakes.ShimIsUniqueValidator.AllInstances.IsValidObjectObject">
            <summary>设置 IsUniqueValidator.IsValid(Object instance, Object fieldValue) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Validators.Fakes.ShimIsUniqueValidator.AllInstances.SupportsBrowserValidationGet">
            <summary>设置 IsUniqueValidator.get_SupportsBrowserValidation() 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Framework.Validators.Fakes.StubIsUniqueValidator">
            <summary>Castle.ActiveRecord.Framework.Validators.IsUniqueValidator 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Validators.Fakes.StubIsUniqueValidator.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Validators.Fakes.StubIsUniqueValidator.ApplyBrowserValidation(Castle.Components.Validator.BrowserValidationConfiguration,Castle.Components.Validator.InputElementType,Castle.Components.Validator.IBrowserValidationGenerator,System.Collections.IDictionary,System.String)">
            <summary>设置 IsUniqueValidator.ApplyBrowserValidation(BrowserValidationConfiguration config, InputElementType inputType, IBrowserValidationGenerator generator, IDictionary attributes, String target) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Validators.Fakes.StubIsUniqueValidator.ApplyBrowserValidationBrowserValidationConfigurationInputElementTypeIBrowserValidationGeneratorIDictionaryString">
            <summary>设置 IsUniqueValidator.ApplyBrowserValidation(BrowserValidationConfiguration config, InputElementType inputType, IBrowserValidationGenerator generator, IDictionary attributes, String target) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Validators.Fakes.StubIsUniqueValidator.BuildErrorMessage">
            <summary>设置 IsUniqueValidator.BuildErrorMessage() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Validators.Fakes.StubIsUniqueValidator.BuildErrorMessage01">
            <summary>设置 IsUniqueValidator.BuildErrorMessage() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Validators.Fakes.StubIsUniqueValidator.Initialize(Castle.Components.Validator.IValidatorRegistry,System.Reflection.PropertyInfo)">
            <summary>设置 AbstractValidator.Initialize(IValidatorRegistry validationRegistry, PropertyInfo property) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Validators.Fakes.StubIsUniqueValidator.InitializeIValidatorRegistryPropertyInfo">
            <summary>设置 AbstractValidator.Initialize(IValidatorRegistry validationRegistry, PropertyInfo property) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Validators.Fakes.StubIsUniqueValidator.InitializeStub">
            <summary>初始化 type StubIsUniqueValidator 的新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Framework.Validators.Fakes.StubIsUniqueValidator.IsValid(System.Object,System.Object)">
            <summary>设置 IsUniqueValidator.IsValid(Object instance, Object fieldValue) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Validators.Fakes.StubIsUniqueValidator.IsValidObjectObject">
            <summary>设置 IsUniqueValidator.IsValid(Object instance, Object fieldValue) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Validators.Fakes.StubIsUniqueValidator.MessageKeyGet">
            <summary>设置 AbstractValidator.get_MessageKey() 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Framework.Validators.Fakes.StubIsUniqueValidator.SupportsBrowserValidationGet">
            <summary>设置 IsUniqueValidator.get_SupportsBrowserValidation() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Validators.Fakes.StubIsUniqueValidator.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Validators.Fakes.StubIsUniqueValidator.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Validators.Fakes.StubIsUniqueValidator.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Validators.Fakes.StubIsUniqueValidator.MessageKey">
            <summary>设置 AbstractValidator.get_MessageKey() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Framework.Validators.Fakes.StubIsUniqueValidator.SupportsBrowserValidation">
            <summary>设置 IsUniqueValidator.get_SupportsBrowserValidation() 的 stub</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Linq.Fakes.ShimLinqQuery`1">
            <summary>Castle.ActiveRecord.Linq.LinqQuery`1 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Linq.Fakes.ShimLinqQuery`1.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Linq.Fakes.ShimLinqQuery`1.#ctor(Castle.ActiveRecord.Linq.LinqQuery{`0})">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Linq.Fakes.ShimLinqQuery`1.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Linq.Fakes.ShimLinqQuery`1.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Linq.Fakes.ShimLinqQuery`1.Bind(Castle.ActiveRecord.IActiveRecordQuery)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Linq.Fakes.ShimLinqQuery`1.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Linq.Fakes.ShimLinqQuery`1.ConstructorExpressionType">
            <summary>设置 LinqQuery`1.LinqQuery`1(Expression expression, Type rootType) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Linq.Fakes.ShimLinqQuery`1.EnumerateISession">
            <summary>设置 LinqQuery`1.Enumerate(ISession session) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Linq.Fakes.ShimLinqQuery`1.ExecuteISession">
            <summary>设置 LinqQuery`1.Execute(ISession session) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Linq.Fakes.ShimLinqQuery`1.ResultGet">
            <summary>设置 LinqQuery`1.get_Result() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Linq.Fakes.ShimLinqQuery`1.ResultSetListOfT0">
            <summary>设置 LinqQuery`1.set_Result(List`1&lt;!0&gt; value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Linq.Fakes.ShimLinqQuery`1.RootTypeGet">
            <summary>设置 LinqQuery`1.get_RootType() 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Linq.Fakes.ShimLinqQuery`1.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Linq.Fakes.ShimLinqQuery`1.AllInstances.EnumerateISession">
            <summary>设置 LinqQuery`1.Enumerate(ISession session) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Linq.Fakes.ShimLinqQuery`1.AllInstances.ExecuteISession">
            <summary>设置 LinqQuery`1.Execute(ISession session) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Linq.Fakes.ShimLinqQuery`1.AllInstances.ResultGet">
            <summary>设置 LinqQuery`1.get_Result() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Linq.Fakes.ShimLinqQuery`1.AllInstances.ResultSetListOfT0">
            <summary>设置 LinqQuery`1.set_Result(List`1&lt;!0&gt; value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Linq.Fakes.ShimLinqQuery`1.AllInstances.RootTypeGet">
            <summary>设置 LinqQuery`1.get_RootType() 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Linq.Fakes.StubLinqQuery`1">
            <summary>Castle.ActiveRecord.Linq.LinqQuery`1 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Linq.Fakes.StubLinqQuery`1.#ctor(System.Linq.Expressions.Expression,System.Type)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Linq.Fakes.StubLinqQuery`1.InitializeStub">
            <summary>初始化 type StubLinqQuery 的新实例</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Linq.Fakes.StubLinqQuery`1.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Linq.Fakes.StubLinqQuery`1.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Linq.Fakes.StubLinqQuery`1.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Queries.Fakes.ShimActiveRecordCriteriaQuery">
            <summary>Castle.ActiveRecord.Queries.ActiveRecordCriteriaQuery 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.ShimActiveRecordCriteriaQuery.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.ShimActiveRecordCriteriaQuery.#ctor(Castle.ActiveRecord.Queries.ActiveRecordCriteriaQuery)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.ShimActiveRecordCriteriaQuery.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.ShimActiveRecordCriteriaQuery.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.ShimActiveRecordCriteriaQuery.Bind(Castle.ActiveRecord.IActiveRecordQuery)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.ShimActiveRecordCriteriaQuery.Bind(System.ICloneable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimActiveRecordCriteriaQuery.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimActiveRecordCriteriaQuery.ConstructorTypeDetachedCriteria">
            <summary>设置 ActiveRecordCriteriaQuery.ActiveRecordCriteriaQuery(Type targetType, DetachedCriteria detachedCriteria) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimActiveRecordCriteriaQuery.ConstructorTypeICriterionArray">
            <summary>设置 ActiveRecordCriteriaQuery.ActiveRecordCriteriaQuery(Type targetType, ICriterion[] criterias) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimActiveRecordCriteriaQuery.InternalExecuteISession">
            <summary>设置 ActiveRecordCriteriaQuery.InternalExecute(ISession session) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Queries.Fakes.ShimActiveRecordCriteriaQuery.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimActiveRecordCriteriaQuery.AllInstances.InternalExecuteISession">
            <summary>设置 ActiveRecordCriteriaQuery.InternalExecute(ISession session) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Queries.Fakes.ShimActiveRecordMultiQuery">
            <summary>Castle.ActiveRecord.Queries.ActiveRecordMultiQuery 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.ShimActiveRecordMultiQuery.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.ShimActiveRecordMultiQuery.#ctor(Castle.ActiveRecord.Queries.ActiveRecordMultiQuery)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.ShimActiveRecordMultiQuery.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.ShimActiveRecordMultiQuery.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.ShimActiveRecordMultiQuery.Bind(Castle.ActiveRecord.IActiveRecordQuery)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimActiveRecordMultiQuery.AddActiveRecordBaseQuery">
            <summary>设置 ActiveRecordMultiQuery.Add(ActiveRecordBaseQuery activeRecordQuery) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimActiveRecordMultiQuery.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimActiveRecordMultiQuery.ConstructorType">
            <summary>设置 ActiveRecordMultiQuery.ActiveRecordMultiQuery(Type RootType) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimActiveRecordMultiQuery.ConstructorTypeActiveRecordBaseQueryArray">
            <summary>设置 ActiveRecordMultiQuery.ActiveRecordMultiQuery(Type RootType, ActiveRecordBaseQuery[] activeRecordQueries) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimActiveRecordMultiQuery.EnumerateISession">
            <summary>设置 ActiveRecordMultiQuery.Enumerate(ISession session) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimActiveRecordMultiQuery.ExecuteISession">
            <summary>设置 ActiveRecordMultiQuery.Execute(ISession session) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimActiveRecordMultiQuery.RootTypeGet">
            <summary>设置 ActiveRecordMultiQuery.get_RootType() 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Queries.Fakes.ShimActiveRecordMultiQuery.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimActiveRecordMultiQuery.AllInstances.AddActiveRecordBaseQuery">
            <summary>设置 ActiveRecordMultiQuery.Add(ActiveRecordBaseQuery activeRecordQuery) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimActiveRecordMultiQuery.AllInstances.EnumerateISession">
            <summary>设置 ActiveRecordMultiQuery.Enumerate(ISession session) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimActiveRecordMultiQuery.AllInstances.ExecuteISession">
            <summary>设置 ActiveRecordMultiQuery.Execute(ISession session) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimActiveRecordMultiQuery.AllInstances.RootTypeGet">
            <summary>设置 ActiveRecordMultiQuery.get_RootType() 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Queries.Fakes.ShimCountQuery">
            <summary>Castle.ActiveRecord.Queries.CountQuery 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.ShimCountQuery.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.ShimCountQuery.#ctor(Castle.ActiveRecord.Queries.CountQuery)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.ShimCountQuery.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.ShimCountQuery.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.ShimCountQuery.Bind(Castle.ActiveRecord.IActiveRecordQuery)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.ShimCountQuery.Bind(System.ICloneable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimCountQuery.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimCountQuery.ConstructorType">
            <summary>设置 CountQuery.CountQuery(Type targetType) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimCountQuery.ConstructorTypeDetachedCriteria">
            <summary>设置 CountQuery.CountQuery(Type targetType, DetachedCriteria detachedCriteria) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimCountQuery.ConstructorTypeICriterionArray">
            <summary>设置 CountQuery.CountQuery(Type targetType, ICriterion[] criterias) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimCountQuery.ConstructorTypeStringObjectArray">
            <summary>设置 CountQuery.CountQuery(Type targetType, String filter, Object[] parameters) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimCountQuery.InternalExecuteISession">
            <summary>设置 CountQuery.InternalExecute(ISession session) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Queries.Fakes.ShimCountQuery.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimCountQuery.AllInstances.InternalExecuteISession">
            <summary>设置 CountQuery.InternalExecute(ISession session) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Queries.Fakes.ShimHqlBasedQuery">
            <summary>Castle.ActiveRecord.Queries.HqlBasedQuery 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.ShimHqlBasedQuery.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.ShimHqlBasedQuery.#ctor(Castle.ActiveRecord.Queries.HqlBasedQuery)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.ShimHqlBasedQuery.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.ShimHqlBasedQuery.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.ShimHqlBasedQuery.Bind(Castle.ActiveRecord.IActiveRecordQuery)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.ShimHqlBasedQuery.Bind(System.ICloneable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimHqlBasedQuery.AddSqlJoinDefinitionStringString">
            <summary>设置 HqlBasedQuery.AddSqlJoinDefinition(String associationPath, String associationAlias) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimHqlBasedQuery.AddSqlReturnDefinitionTypeString">
            <summary>设置 HqlBasedQuery.AddSqlReturnDefinition(Type returnType, String returnAlias) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimHqlBasedQuery.AddSqlScalarDefinitionITypeString">
            <summary>设置 HqlBasedQuery.AddSqlScalarDefinition(IType scalarType, String columnAlias) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimHqlBasedQuery.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimHqlBasedQuery.ConstructorTypeQueryLanguageString">
            <summary>设置 HqlBasedQuery.HqlBasedQuery(Type targetType, QueryLanguage queryLanguage, String query) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimHqlBasedQuery.ConstructorTypeQueryLanguageStringObjectArray">
            <summary>设置 HqlBasedQuery.HqlBasedQuery(Type targetType, QueryLanguage queryLanguage, String query, Object[] positionalParameters) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimHqlBasedQuery.ConstructorTypeString">
            <summary>设置 HqlBasedQuery.HqlBasedQuery(Type targetType, String query) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimHqlBasedQuery.ConstructorTypeStringObjectArray">
            <summary>设置 HqlBasedQuery.HqlBasedQuery(Type targetType, String query, Object[] positionalParameters) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimHqlBasedQuery.CreateQueryISession">
            <summary>设置 HqlBasedQuery.CreateQuery(ISession session) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimHqlBasedQuery.QueryGet">
            <summary>设置 HqlBasedQuery.get_Query() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimHqlBasedQuery.QuerySetString">
            <summary>设置 HqlBasedQuery.set_Query(String value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimHqlBasedQuery.SetParameterListStringICollection">
            <summary>设置 HqlBasedQuery.SetParameterList(String parameterName, ICollection list) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimHqlBasedQuery.SetParameterListStringICollectionIType">
            <summary>设置 HqlBasedQuery.SetParameterList(String parameterName, ICollection list, IType type) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimHqlBasedQuery.SetParameterStringObject">
            <summary>设置 HqlBasedQuery.SetParameter(String parameterName, Object value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimHqlBasedQuery.SetParameterStringObjectIType">
            <summary>设置 HqlBasedQuery.SetParameter(String parameterName, Object value, IType type) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimHqlBasedQuery.SetQueryRangeInt32">
            <summary>设置 HqlBasedQuery.SetQueryRange(Int32 maxResults) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimHqlBasedQuery.SetQueryRangeInt32Int32">
            <summary>设置 HqlBasedQuery.SetQueryRange(Int32 firstResult, Int32 maxResults) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimHqlBasedQuery.SetResultTransformerIResultTransformer">
            <summary>设置 HqlBasedQuery.SetResultTransformer(IResultTransformer transformer) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Queries.Fakes.ShimHqlBasedQuery.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimHqlBasedQuery.AllInstances.AddSqlJoinDefinitionStringString">
            <summary>设置 HqlBasedQuery.AddSqlJoinDefinition(String associationPath, String associationAlias) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimHqlBasedQuery.AllInstances.AddSqlReturnDefinitionTypeString">
            <summary>设置 HqlBasedQuery.AddSqlReturnDefinition(Type returnType, String returnAlias) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimHqlBasedQuery.AllInstances.AddSqlScalarDefinitionITypeString">
            <summary>设置 HqlBasedQuery.AddSqlScalarDefinition(IType scalarType, String columnAlias) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimHqlBasedQuery.AllInstances.CreateQueryISession">
            <summary>设置 HqlBasedQuery.CreateQuery(ISession session) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimHqlBasedQuery.AllInstances.QueryGet">
            <summary>设置 HqlBasedQuery.get_Query() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimHqlBasedQuery.AllInstances.QuerySetString">
            <summary>设置 HqlBasedQuery.set_Query(String value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimHqlBasedQuery.AllInstances.SetParameterListStringICollection">
            <summary>设置 HqlBasedQuery.SetParameterList(String parameterName, ICollection list) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimHqlBasedQuery.AllInstances.SetParameterListStringICollectionIType">
            <summary>设置 HqlBasedQuery.SetParameterList(String parameterName, ICollection list, IType type) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimHqlBasedQuery.AllInstances.SetParameterStringObject">
            <summary>设置 HqlBasedQuery.SetParameter(String parameterName, Object value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimHqlBasedQuery.AllInstances.SetParameterStringObjectIType">
            <summary>设置 HqlBasedQuery.SetParameter(String parameterName, Object value, IType type) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimHqlBasedQuery.AllInstances.SetQueryRangeInt32">
            <summary>设置 HqlBasedQuery.SetQueryRange(Int32 maxResults) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimHqlBasedQuery.AllInstances.SetQueryRangeInt32Int32">
            <summary>设置 HqlBasedQuery.SetQueryRange(Int32 firstResult, Int32 maxResults) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimHqlBasedQuery.AllInstances.SetResultTransformerIResultTransformer">
            <summary>设置 HqlBasedQuery.SetResultTransformer(IResultTransformer transformer) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Queries.Fakes.ShimProjectionQuery`1">
            <summary>Castle.ActiveRecord.Queries.ProjectionQuery`1 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.ShimProjectionQuery`1.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.ShimProjectionQuery`1.#ctor(Castle.ActiveRecord.Queries.ProjectionQuery{`0})">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.ShimProjectionQuery`1.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.ShimProjectionQuery`1.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.ShimProjectionQuery`1.Bind(Castle.ActiveRecord.IActiveRecordQuery)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimProjectionQuery`1.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimProjectionQuery`1.ConstructorDetachedCriteriaOrderArrayProjectionList">
            <summary>设置 ProjectionQuery`1.ProjectionQuery`1(DetachedCriteria detachedCriteria, Order[] orders, ProjectionList projections) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimProjectionQuery`1.ConstructorDetachedCriteriaOrderProjectionList">
            <summary>设置 ProjectionQuery`1.ProjectionQuery`1(DetachedCriteria detachedCriteria, Order order, ProjectionList projections) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimProjectionQuery`1.ConstructorDetachedCriteriaProjectionList">
            <summary>设置 ProjectionQuery`1.ProjectionQuery`1(DetachedCriteria detachedCriteria, ProjectionList projections) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimProjectionQuery`1.ConstructorOrderProjectionList">
            <summary>设置 ProjectionQuery`1.ProjectionQuery`1(Order order, ProjectionList projections) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimProjectionQuery`1.ConstructorProjectionList">
            <summary>设置 ProjectionQuery`1.ProjectionQuery`1(ProjectionList projections) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Queries.Fakes.ShimProjectionQuery`1.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Queries.Fakes.ShimProjectionQuery`2">
            <summary>Castle.ActiveRecord.Queries.ProjectionQuery`2 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.ShimProjectionQuery`2.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.ShimProjectionQuery`2.#ctor(Castle.ActiveRecord.Queries.ProjectionQuery{`0,`1})">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.ShimProjectionQuery`2.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.ShimProjectionQuery`2.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.ShimProjectionQuery`2.Bind(Castle.ActiveRecord.IActiveRecordQuery)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimProjectionQuery`2.AssertAllArgumentsValid">
            <summary>设置 ProjectionQuery`2.AssertAllArgumentsValid() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimProjectionQuery`2.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimProjectionQuery`2.CastleActiveRecordIActiveRecordQueryExecuteISession">
            <summary>设置 ProjectionQuery`2.Castle.ActiveRecord.IActiveRecordQuery.Execute(ISession session) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimProjectionQuery`2.ConstructorDetachedCriteriaOrderArrayProjectionList">
            <summary>设置 ProjectionQuery`2.ProjectionQuery`2(DetachedCriteria detachedCriteria, Order[] orders, ProjectionList projections) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimProjectionQuery`2.ConstructorDetachedCriteriaOrderProjectionList">
            <summary>设置 ProjectionQuery`2.ProjectionQuery`2(DetachedCriteria detachedCriteria, Order order, ProjectionList projections) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimProjectionQuery`2.ConstructorDetachedCriteriaProjectionList">
            <summary>设置 ProjectionQuery`2.ProjectionQuery`2(DetachedCriteria detachedCriteria, ProjectionList projections) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimProjectionQuery`2.ConstructorOrderProjectionList">
            <summary>设置 ProjectionQuery`2.ProjectionQuery`2(Order order, ProjectionList projections) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimProjectionQuery`2.ConstructorProjectionList">
            <summary>设置 ProjectionQuery`2.ProjectionQuery`2(ProjectionList projections) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimProjectionQuery`2.CreateCriteriaISession">
            <summary>设置 ProjectionQuery`2.CreateCriteria(ISession session) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimProjectionQuery`2.EnumerateISession">
            <summary>设置 ProjectionQuery`2.Enumerate(ISession session) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimProjectionQuery`2.Execute">
            <summary>设置 ProjectionQuery`2.Execute() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimProjectionQuery`2.RootTypeGet">
            <summary>设置 ProjectionQuery`2.get_RootType() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimProjectionQuery`2.SetRangeInt32Int32">
            <summary>设置 ProjectionQuery`2.SetRange(Int32 first, Int32 max) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Queries.Fakes.ShimProjectionQuery`2.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimProjectionQuery`2.AllInstances.AssertAllArgumentsValid">
            <summary>设置 ProjectionQuery`2.AssertAllArgumentsValid() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimProjectionQuery`2.AllInstances.CastleActiveRecordIActiveRecordQueryExecuteISession">
            <summary>设置 ProjectionQuery`2.Castle.ActiveRecord.IActiveRecordQuery.Execute(ISession session) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimProjectionQuery`2.AllInstances.CreateCriteriaISession">
            <summary>设置 ProjectionQuery`2.CreateCriteria(ISession session) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimProjectionQuery`2.AllInstances.EnumerateISession">
            <summary>设置 ProjectionQuery`2.Enumerate(ISession session) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimProjectionQuery`2.AllInstances.Execute">
            <summary>设置 ProjectionQuery`2.Execute() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimProjectionQuery`2.AllInstances.RootTypeGet">
            <summary>设置 ProjectionQuery`2.get_RootType() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimProjectionQuery`2.AllInstances.SetRangeInt32Int32">
            <summary>设置 ProjectionQuery`2.SetRange(Int32 first, Int32 max) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Queries.Fakes.ShimScalarProjectionQuery`2">
            <summary>Castle.ActiveRecord.Queries.ScalarProjectionQuery`2 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.ShimScalarProjectionQuery`2.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.ShimScalarProjectionQuery`2.#ctor(Castle.ActiveRecord.Queries.ScalarProjectionQuery{`0,`1})">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.ShimScalarProjectionQuery`2.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.ShimScalarProjectionQuery`2.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.ShimScalarProjectionQuery`2.Bind(Castle.ActiveRecord.IActiveRecordQuery)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.ShimScalarProjectionQuery`2.Bind(Castle.ActiveRecord.IActiveRecordQuery{`1})">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimScalarProjectionQuery`2.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimScalarProjectionQuery`2.CastleActiveRecordIActiveRecordQueryExecuteISession">
            <summary>设置 ScalarProjectionQuery`2.Castle.ActiveRecord.IActiveRecordQuery.Execute(ISession session) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimScalarProjectionQuery`2.ConstructorIProjectionDetachedCriteria">
            <summary>设置 ScalarProjectionQuery`2.ScalarProjectionQuery`2(IProjection projection, DetachedCriteria criteria) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimScalarProjectionQuery`2.ConstructorIProjectionICriterionArray">
            <summary>设置 ScalarProjectionQuery`2.ScalarProjectionQuery`2(IProjection projection, ICriterion[] criterions) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimScalarProjectionQuery`2.EnumerateISession">
            <summary>设置 ScalarProjectionQuery`2.Enumerate(ISession session) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimScalarProjectionQuery`2.Execute">
            <summary>设置 ScalarProjectionQuery`2.Execute() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimScalarProjectionQuery`2.ExecuteISession">
            <summary>设置 ScalarProjectionQuery`2.Execute(ISession session) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimScalarProjectionQuery`2.RootTypeGet">
            <summary>设置 ScalarProjectionQuery`2.get_RootType() 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Queries.Fakes.ShimScalarProjectionQuery`2.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimScalarProjectionQuery`2.AllInstances.CastleActiveRecordIActiveRecordQueryExecuteISession">
            <summary>设置 ScalarProjectionQuery`2.Castle.ActiveRecord.IActiveRecordQuery.Execute(ISession session) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimScalarProjectionQuery`2.AllInstances.EnumerateISession">
            <summary>设置 ScalarProjectionQuery`2.Enumerate(ISession session) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimScalarProjectionQuery`2.AllInstances.Execute">
            <summary>设置 ScalarProjectionQuery`2.Execute() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimScalarProjectionQuery`2.AllInstances.ExecuteISession">
            <summary>设置 ScalarProjectionQuery`2.Execute(ISession session) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimScalarProjectionQuery`2.AllInstances.RootTypeGet">
            <summary>设置 ScalarProjectionQuery`2.get_RootType() 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Queries.Fakes.ShimScalarQuery">
            <summary>Castle.ActiveRecord.Queries.ScalarQuery 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.ShimScalarQuery.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.ShimScalarQuery.#ctor(Castle.ActiveRecord.Queries.ScalarQuery)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.ShimScalarQuery.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.ShimScalarQuery.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.ShimScalarQuery.Bind(Castle.ActiveRecord.IActiveRecordQuery)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.ShimScalarQuery.Bind(System.ICloneable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimScalarQuery.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimScalarQuery.ConstructorTypeQueryLanguageString">
            <summary>设置 ScalarQuery.ScalarQuery(Type targetType, QueryLanguage queryLanguage, String query) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimScalarQuery.ConstructorTypeQueryLanguageStringObjectArray">
            <summary>设置 ScalarQuery.ScalarQuery(Type targetType, QueryLanguage queryLanguage, String query, Object[] positionalParameters) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimScalarQuery.ConstructorTypeString">
            <summary>设置 ScalarQuery.ScalarQuery(Type targetType, String query) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimScalarQuery.ConstructorTypeStringObjectArray">
            <summary>设置 ScalarQuery.ScalarQuery(Type targetType, String query, Object[] positionalParameters) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimScalarQuery.InternalEnumerateISession">
            <summary>设置 ScalarQuery.InternalEnumerate(ISession session) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimScalarQuery.InternalExecuteISession">
            <summary>设置 ScalarQuery.InternalExecute(ISession session) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Queries.Fakes.ShimScalarQuery.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimScalarQuery.AllInstances.InternalEnumerateISession">
            <summary>设置 ScalarQuery.InternalEnumerate(ISession session) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimScalarQuery.AllInstances.InternalExecuteISession">
            <summary>设置 ScalarQuery.InternalExecute(ISession session) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Queries.Fakes.ShimScalarQuery`1">
            <summary>Castle.ActiveRecord.Queries.ScalarQuery`1 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.ShimScalarQuery`1.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.ShimScalarQuery`1.#ctor(Castle.ActiveRecord.Queries.ScalarQuery{`0})">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.ShimScalarQuery`1.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.ShimScalarQuery`1.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.ShimScalarQuery`1.Bind(Castle.ActiveRecord.IActiveRecordQuery)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.ShimScalarQuery`1.Bind(Castle.ActiveRecord.IActiveRecordQuery{`0})">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.ShimScalarQuery`1.Bind(System.ICloneable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimScalarQuery`1.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimScalarQuery`1.CastleActiveRecordIActiveRecordQueryTExecuteISession">
            <summary>设置 ScalarQuery`1.Castle.ActiveRecord.IActiveRecordQuery&lt;T&gt;.Execute(ISession session) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimScalarQuery`1.ConstructorTypeQueryLanguageString">
            <summary>设置 ScalarQuery`1.ScalarQuery`1(Type targetType, QueryLanguage queryLanguage, String query) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimScalarQuery`1.ConstructorTypeQueryLanguageStringObjectArray">
            <summary>设置 ScalarQuery`1.ScalarQuery`1(Type targetType, QueryLanguage queryLanguage, String query, Object[] positionalParameters) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimScalarQuery`1.ConstructorTypeString">
            <summary>设置 ScalarQuery`1.ScalarQuery`1(Type targetType, String query) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimScalarQuery`1.ConstructorTypeStringObjectArray">
            <summary>设置 ScalarQuery`1.ScalarQuery`1(Type targetType, String query, Object[] positionalParameters) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimScalarQuery`1.Execute">
            <summary>设置 ScalarQuery`1.Execute() 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Queries.Fakes.ShimScalarQuery`1.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimScalarQuery`1.AllInstances.CastleActiveRecordIActiveRecordQueryTExecuteISession">
            <summary>设置 ScalarQuery`1.Castle.ActiveRecord.IActiveRecordQuery&lt;T&gt;.Execute(ISession session) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimScalarQuery`1.AllInstances.Execute">
            <summary>设置 ScalarQuery`1.Execute() 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Queries.Fakes.ShimSimpleQuery">
            <summary>Castle.ActiveRecord.Queries.SimpleQuery 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.ShimSimpleQuery.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.ShimSimpleQuery.#ctor(Castle.ActiveRecord.Queries.SimpleQuery)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.ShimSimpleQuery.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.ShimSimpleQuery.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.ShimSimpleQuery.Bind(Castle.ActiveRecord.IActiveRecordQuery)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.ShimSimpleQuery.Bind(System.ICloneable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimSimpleQuery.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimSimpleQuery.ConstructorTypeQueryLanguageStringObjectArray">
            <summary>设置 SimpleQuery.SimpleQuery(Type returnType, QueryLanguage queryLanguage, String query, Object[] positionalParameters) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimSimpleQuery.ConstructorTypeStringObjectArray">
            <summary>设置 SimpleQuery.SimpleQuery(Type returnType, String query, Object[] positionalParameters) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimSimpleQuery.ConstructorTypeTypeQueryLanguageStringObjectArray">
            <summary>设置 SimpleQuery.SimpleQuery(Type targetType, Type returnType, QueryLanguage queryLanguage, String query, Object[] parameters) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimSimpleQuery.ConstructorTypeTypeStringObjectArray">
            <summary>设置 SimpleQuery.SimpleQuery(Type targetType, Type returnType, String query, Object[] parameters) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimSimpleQuery.InternalExecuteISession">
            <summary>设置 SimpleQuery.InternalExecute(ISession session) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Queries.Fakes.ShimSimpleQuery.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimSimpleQuery.AllInstances.InternalExecuteISession">
            <summary>设置 SimpleQuery.InternalExecute(ISession session) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Queries.Fakes.ShimSimpleQuery`1">
            <summary>Castle.ActiveRecord.Queries.SimpleQuery`1 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.ShimSimpleQuery`1.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.ShimSimpleQuery`1.#ctor(Castle.ActiveRecord.Queries.SimpleQuery{`0})">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.ShimSimpleQuery`1.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.ShimSimpleQuery`1.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.ShimSimpleQuery`1.Bind(Castle.ActiveRecord.IActiveRecordQuery)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.ShimSimpleQuery`1.Bind(Castle.ActiveRecord.IActiveRecordQuery{`0[]})">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.ShimSimpleQuery`1.Bind(System.ICloneable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimSimpleQuery`1.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimSimpleQuery`1.CastleActiveRecordIActiveRecordQueryTExecuteISession">
            <summary>设置 SimpleQuery`1.Castle.ActiveRecord.IActiveRecordQuery&lt;T[]&gt;.Execute(ISession session) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimSimpleQuery`1.ConstructorQueryLanguageStringObjectArray">
            <summary>设置 SimpleQuery`1.SimpleQuery`1(QueryLanguage queryLanguage, String query, Object[] positionalParameters) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimSimpleQuery`1.ConstructorStringObjectArray">
            <summary>设置 SimpleQuery`1.SimpleQuery`1(String query, Object[] positionalParameters) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimSimpleQuery`1.ConstructorTypeQueryLanguageStringObjectArray">
            <summary>设置 SimpleQuery`1.SimpleQuery`1(Type targetType, QueryLanguage queryLanguage, String query, Object[] positionalParameters) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimSimpleQuery`1.ConstructorTypeStringObjectArray">
            <summary>设置 SimpleQuery`1.SimpleQuery`1(Type targetType, String query, Object[] positionalParameters) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimSimpleQuery`1.Enumerate">
            <summary>设置 SimpleQuery`1.Enumerate() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimSimpleQuery`1.Execute">
            <summary>设置 SimpleQuery`1.Execute() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimSimpleQuery`1.GenericEnumerateISession">
            <summary>设置 SimpleQuery`1.GenericEnumerate(ISession session) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimSimpleQuery`1.InternalEnumerateFromBaseISession">
            <summary>设置 SimpleQuery`1.InternalEnumerateFromBase(ISession session) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimSimpleQuery`1.InternalEnumerateISession">
            <summary>设置 SimpleQuery`1.InternalEnumerate(ISession session) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimSimpleQuery`1.InternalExecuteISession">
            <summary>设置 SimpleQuery`1.InternalExecute(ISession session) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Queries.Fakes.ShimSimpleQuery`1.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimSimpleQuery`1.AllInstances.CastleActiveRecordIActiveRecordQueryTExecuteISession">
            <summary>设置 SimpleQuery`1.Castle.ActiveRecord.IActiveRecordQuery&lt;T[]&gt;.Execute(ISession session) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimSimpleQuery`1.AllInstances.Enumerate">
            <summary>设置 SimpleQuery`1.Enumerate() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimSimpleQuery`1.AllInstances.Execute">
            <summary>设置 SimpleQuery`1.Execute() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimSimpleQuery`1.AllInstances.GenericEnumerateISession">
            <summary>设置 SimpleQuery`1.GenericEnumerate(ISession session) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimSimpleQuery`1.AllInstances.InternalEnumerateFromBaseISession">
            <summary>设置 SimpleQuery`1.InternalEnumerateFromBase(ISession session) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimSimpleQuery`1.AllInstances.InternalEnumerateISession">
            <summary>设置 SimpleQuery`1.InternalEnumerate(ISession session) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimSimpleQuery`1.AllInstances.InternalExecuteISession">
            <summary>设置 SimpleQuery`1.InternalExecute(ISession session) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Queries.Fakes.ShimValueAndTypeTuple">
            <summary>Castle.ActiveRecord.Queries.ValueAndTypeTuple 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.ShimValueAndTypeTuple.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.ShimValueAndTypeTuple.#ctor(Castle.ActiveRecord.Queries.ValueAndTypeTuple)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.ShimValueAndTypeTuple.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.ShimValueAndTypeTuple.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimValueAndTypeTuple.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimValueAndTypeTuple.ConstructorITypeObject">
            <summary>设置 ValueAndTypeTuple.ValueAndTypeTuple(IType type, Object value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimValueAndTypeTuple.ConstructorObject">
            <summary>设置 ValueAndTypeTuple.ValueAndTypeTuple(Object value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimValueAndTypeTuple.TypeGet">
            <summary>设置 ValueAndTypeTuple.get_Type() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimValueAndTypeTuple.ValueGet">
            <summary>设置 ValueAndTypeTuple.get_Value() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimValueAndTypeTuple.WrapObject">
            <summary>设置 ValueAndTypeTuple.Wrap(Object obj) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Queries.Fakes.ShimValueAndTypeTuple.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimValueAndTypeTuple.AllInstances.TypeGet">
            <summary>设置 ValueAndTypeTuple.get_Type() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.ShimValueAndTypeTuple.AllInstances.ValueGet">
            <summary>设置 ValueAndTypeTuple.get_Value() 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Queries.Fakes.StubActiveRecordCriteriaQuery">
            <summary>Castle.ActiveRecord.Queries.ActiveRecordCriteriaQuery 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.StubActiveRecordCriteriaQuery.#ctor(System.Type,NHibernate.Criterion.ICriterion[])">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.StubActiveRecordCriteriaQuery.#ctor(System.Type,NHibernate.Criterion.DetachedCriteria)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.StubActiveRecordCriteriaQuery.Clone">
            <summary>设置 ActiveRecordBaseQuery.Clone() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Queries.Fakes.StubActiveRecordCriteriaQuery.Clone01">
            <summary>设置 ActiveRecordBaseQuery.Clone() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.StubActiveRecordCriteriaQuery.CreateQuery(NHibernate.ISession)">
            <summary>设置 HqlBasedQuery.CreateQuery(ISession session) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Queries.Fakes.StubActiveRecordCriteriaQuery.CreateQueryISession">
            <summary>设置 HqlBasedQuery.CreateQuery(ISession session) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.StubActiveRecordCriteriaQuery.InitializeStub">
            <summary>初始化 type StubActiveRecordCriteriaQuery 的新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.StubActiveRecordCriteriaQuery.InternalEnumerate(NHibernate.ISession)">
            <summary>设置 ActiveRecordBaseQuery.InternalEnumerate(ISession session) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Queries.Fakes.StubActiveRecordCriteriaQuery.InternalEnumerateISession">
            <summary>设置 ActiveRecordBaseQuery.InternalEnumerate(ISession session) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.StubActiveRecordCriteriaQuery.InternalExecute(NHibernate.ISession)">
            <summary>设置 ActiveRecordCriteriaQuery.InternalExecute(ISession session) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Queries.Fakes.StubActiveRecordCriteriaQuery.InternalExecuteISession">
            <summary>设置 ActiveRecordCriteriaQuery.InternalExecute(ISession session) 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.StubActiveRecordCriteriaQuery.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.StubActiveRecordCriteriaQuery.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.StubActiveRecordCriteriaQuery.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Queries.Fakes.StubActiveRecordMultiQuery">
            <summary>Castle.ActiveRecord.Queries.ActiveRecordMultiQuery 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.StubActiveRecordMultiQuery.#ctor(System.Type)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.StubActiveRecordMultiQuery.#ctor(System.Type,Castle.ActiveRecord.ActiveRecordBaseQuery[])">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.StubActiveRecordMultiQuery.InitializeStub">
            <summary>初始化 type StubActiveRecordMultiQuery 的新实例</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.StubActiveRecordMultiQuery.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.StubActiveRecordMultiQuery.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.StubActiveRecordMultiQuery.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Queries.Fakes.StubCountQuery">
            <summary>Castle.ActiveRecord.Queries.CountQuery 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.StubCountQuery.#ctor(System.Type)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.StubCountQuery.#ctor(System.Type,NHibernate.Criterion.ICriterion[])">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.StubCountQuery.#ctor(System.Type,NHibernate.Criterion.DetachedCriteria)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.StubCountQuery.#ctor(System.Type,System.String,System.Object[])">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.StubCountQuery.Clone">
            <summary>设置 ActiveRecordBaseQuery.Clone() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Queries.Fakes.StubCountQuery.Clone01">
            <summary>设置 ActiveRecordBaseQuery.Clone() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.StubCountQuery.CreateQuery(NHibernate.ISession)">
            <summary>设置 HqlBasedQuery.CreateQuery(ISession session) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Queries.Fakes.StubCountQuery.CreateQueryISession">
            <summary>设置 HqlBasedQuery.CreateQuery(ISession session) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.StubCountQuery.InitializeStub">
            <summary>初始化 type StubCountQuery 的新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.StubCountQuery.InternalEnumerate(NHibernate.ISession)">
            <summary>设置 ActiveRecordBaseQuery.InternalEnumerate(ISession session) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Queries.Fakes.StubCountQuery.InternalEnumerateISession">
            <summary>设置 ActiveRecordBaseQuery.InternalEnumerate(ISession session) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.StubCountQuery.InternalExecute(NHibernate.ISession)">
            <summary>设置 CountQuery.InternalExecute(ISession session) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Queries.Fakes.StubCountQuery.InternalExecuteISession">
            <summary>设置 CountQuery.InternalExecute(ISession session) 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.StubCountQuery.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.StubCountQuery.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.StubCountQuery.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Queries.Fakes.StubHqlBasedQuery">
            <summary>Castle.ActiveRecord.Queries.HqlBasedQuery 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.StubHqlBasedQuery.#ctor(System.Type,System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.StubHqlBasedQuery.#ctor(System.Type,System.String,System.Object[])">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.StubHqlBasedQuery.#ctor(System.Type,Castle.ActiveRecord.Queries.QueryLanguage,System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.StubHqlBasedQuery.#ctor(System.Type,Castle.ActiveRecord.Queries.QueryLanguage,System.String,System.Object[])">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.StubHqlBasedQuery.Clone">
            <summary>设置 ActiveRecordBaseQuery.Clone() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Queries.Fakes.StubHqlBasedQuery.Clone01">
            <summary>设置 ActiveRecordBaseQuery.Clone() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.StubHqlBasedQuery.CreateQuery(NHibernate.ISession)">
            <summary>设置 HqlBasedQuery.CreateQuery(ISession session) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Queries.Fakes.StubHqlBasedQuery.CreateQueryISession">
            <summary>设置 HqlBasedQuery.CreateQuery(ISession session) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.StubHqlBasedQuery.InitializeStub">
            <summary>初始化 type StubHqlBasedQuery 的新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.StubHqlBasedQuery.InternalEnumerate(NHibernate.ISession)">
            <summary>设置 ActiveRecordBaseQuery.InternalEnumerate(ISession session) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Queries.Fakes.StubHqlBasedQuery.InternalEnumerateISession">
            <summary>设置 ActiveRecordBaseQuery.InternalEnumerate(ISession session) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.StubHqlBasedQuery.InternalExecute(NHibernate.ISession)">
            <summary>设置 ActiveRecordBaseQuery.InternalExecute(ISession session) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Queries.Fakes.StubHqlBasedQuery.InternalExecuteISession">
            <summary>设置 ActiveRecordBaseQuery.InternalExecute(ISession session) 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.StubHqlBasedQuery.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.StubHqlBasedQuery.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.StubHqlBasedQuery.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Queries.Fakes.StubProjectionQuery`1">
            <summary>Castle.ActiveRecord.Queries.ProjectionQuery`1 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.StubProjectionQuery`1.#ctor(NHibernate.Criterion.ProjectionList)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.StubProjectionQuery`1.#ctor(NHibernate.Criterion.DetachedCriteria,NHibernate.Criterion.ProjectionList)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.StubProjectionQuery`1.#ctor(NHibernate.Criterion.Order,NHibernate.Criterion.ProjectionList)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.StubProjectionQuery`1.#ctor(NHibernate.Criterion.DetachedCriteria,NHibernate.Criterion.Order,NHibernate.Criterion.ProjectionList)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.StubProjectionQuery`1.#ctor(NHibernate.Criterion.DetachedCriteria,NHibernate.Criterion.Order[],NHibernate.Criterion.ProjectionList)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.StubProjectionQuery`1.InitializeStub">
            <summary>初始化 type StubProjectionQuery 的新实例</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.StubProjectionQuery`1.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.StubProjectionQuery`1.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.StubProjectionQuery`1.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Queries.Fakes.StubProjectionQuery`2">
            <summary>Castle.ActiveRecord.Queries.ProjectionQuery`2 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.StubProjectionQuery`2.#ctor(NHibernate.Criterion.ProjectionList)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.StubProjectionQuery`2.#ctor(NHibernate.Criterion.DetachedCriteria,NHibernate.Criterion.ProjectionList)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.StubProjectionQuery`2.#ctor(NHibernate.Criterion.Order,NHibernate.Criterion.ProjectionList)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.StubProjectionQuery`2.#ctor(NHibernate.Criterion.DetachedCriteria,NHibernate.Criterion.Order,NHibernate.Criterion.ProjectionList)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.StubProjectionQuery`2.#ctor(NHibernate.Criterion.DetachedCriteria,NHibernate.Criterion.Order[],NHibernate.Criterion.ProjectionList)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.StubProjectionQuery`2.InitializeStub">
            <summary>初始化 type StubProjectionQuery 的新实例</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.StubProjectionQuery`2.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.StubProjectionQuery`2.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.StubProjectionQuery`2.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Queries.Fakes.StubScalarProjectionQuery`2">
            <summary>Castle.ActiveRecord.Queries.ScalarProjectionQuery`2 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.StubScalarProjectionQuery`2.#ctor(NHibernate.Criterion.IProjection,NHibernate.Criterion.ICriterion[])">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.StubScalarProjectionQuery`2.#ctor(NHibernate.Criterion.IProjection,NHibernate.Criterion.DetachedCriteria)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.StubScalarProjectionQuery`2.InitializeStub">
            <summary>初始化 type StubScalarProjectionQuery 的新实例</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.StubScalarProjectionQuery`2.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.StubScalarProjectionQuery`2.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.StubScalarProjectionQuery`2.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Queries.Fakes.StubScalarQuery">
            <summary>Castle.ActiveRecord.Queries.ScalarQuery 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.StubScalarQuery.#ctor(System.Type,System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.StubScalarQuery.#ctor(System.Type,System.String,System.Object[])">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.StubScalarQuery.#ctor(System.Type,Castle.ActiveRecord.Queries.QueryLanguage,System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.StubScalarQuery.#ctor(System.Type,Castle.ActiveRecord.Queries.QueryLanguage,System.String,System.Object[])">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.StubScalarQuery.Clone">
            <summary>设置 ActiveRecordBaseQuery.Clone() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Queries.Fakes.StubScalarQuery.Clone01">
            <summary>设置 ActiveRecordBaseQuery.Clone() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.StubScalarQuery.CreateQuery(NHibernate.ISession)">
            <summary>设置 HqlBasedQuery.CreateQuery(ISession session) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Queries.Fakes.StubScalarQuery.CreateQueryISession">
            <summary>设置 HqlBasedQuery.CreateQuery(ISession session) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.StubScalarQuery.InitializeStub">
            <summary>初始化 type StubScalarQuery 的新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.StubScalarQuery.InternalEnumerate(NHibernate.ISession)">
            <summary>设置 ScalarQuery.InternalEnumerate(ISession session) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Queries.Fakes.StubScalarQuery.InternalEnumerateISession">
            <summary>设置 ScalarQuery.InternalEnumerate(ISession session) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.StubScalarQuery.InternalExecute(NHibernate.ISession)">
            <summary>设置 ScalarQuery.InternalExecute(ISession session) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Queries.Fakes.StubScalarQuery.InternalExecuteISession">
            <summary>设置 ScalarQuery.InternalExecute(ISession session) 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.StubScalarQuery.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.StubScalarQuery.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.StubScalarQuery.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Queries.Fakes.StubScalarQuery`1">
            <summary>Castle.ActiveRecord.Queries.ScalarQuery`1 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.StubScalarQuery`1.#ctor(System.Type,System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.StubScalarQuery`1.#ctor(System.Type,System.String,System.Object[])">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.StubScalarQuery`1.#ctor(System.Type,Castle.ActiveRecord.Queries.QueryLanguage,System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.StubScalarQuery`1.#ctor(System.Type,Castle.ActiveRecord.Queries.QueryLanguage,System.String,System.Object[])">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.StubScalarQuery`1.Clone">
            <summary>设置 ActiveRecordBaseQuery.Clone() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Queries.Fakes.StubScalarQuery`1.Clone01">
            <summary>设置 ActiveRecordBaseQuery.Clone() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.StubScalarQuery`1.CreateQuery(NHibernate.ISession)">
            <summary>设置 HqlBasedQuery.CreateQuery(ISession session) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Queries.Fakes.StubScalarQuery`1.CreateQueryISession">
            <summary>设置 HqlBasedQuery.CreateQuery(ISession session) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.StubScalarQuery`1.InitializeStub">
            <summary>初始化 type StubScalarQuery 的新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.StubScalarQuery`1.InternalEnumerate(NHibernate.ISession)">
            <summary>设置 ScalarQuery.InternalEnumerate(ISession session) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Queries.Fakes.StubScalarQuery`1.InternalEnumerateISession">
            <summary>设置 ScalarQuery.InternalEnumerate(ISession session) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.StubScalarQuery`1.InternalExecute(NHibernate.ISession)">
            <summary>设置 ScalarQuery.InternalExecute(ISession session) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Queries.Fakes.StubScalarQuery`1.InternalExecuteISession">
            <summary>设置 ScalarQuery.InternalExecute(ISession session) 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.StubScalarQuery`1.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.StubScalarQuery`1.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.StubScalarQuery`1.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Queries.Fakes.StubSimpleQuery">
            <summary>Castle.ActiveRecord.Queries.SimpleQuery 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.StubSimpleQuery.#ctor(System.Type,System.String,System.Object[])">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.StubSimpleQuery.#ctor(System.Type,System.Type,System.String,System.Object[])">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.StubSimpleQuery.#ctor(System.Type,Castle.ActiveRecord.Queries.QueryLanguage,System.String,System.Object[])">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.StubSimpleQuery.#ctor(System.Type,System.Type,Castle.ActiveRecord.Queries.QueryLanguage,System.String,System.Object[])">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.StubSimpleQuery.Clone">
            <summary>设置 ActiveRecordBaseQuery.Clone() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Queries.Fakes.StubSimpleQuery.Clone01">
            <summary>设置 ActiveRecordBaseQuery.Clone() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.StubSimpleQuery.CreateQuery(NHibernate.ISession)">
            <summary>设置 HqlBasedQuery.CreateQuery(ISession session) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Queries.Fakes.StubSimpleQuery.CreateQueryISession">
            <summary>设置 HqlBasedQuery.CreateQuery(ISession session) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.StubSimpleQuery.InitializeStub">
            <summary>初始化 type StubSimpleQuery 的新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.StubSimpleQuery.InternalEnumerate(NHibernate.ISession)">
            <summary>设置 ActiveRecordBaseQuery.InternalEnumerate(ISession session) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Queries.Fakes.StubSimpleQuery.InternalEnumerateISession">
            <summary>设置 ActiveRecordBaseQuery.InternalEnumerate(ISession session) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.StubSimpleQuery.InternalExecute(NHibernate.ISession)">
            <summary>设置 SimpleQuery.InternalExecute(ISession session) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Queries.Fakes.StubSimpleQuery.InternalExecuteISession">
            <summary>设置 SimpleQuery.InternalExecute(ISession session) 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.StubSimpleQuery.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.StubSimpleQuery.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.StubSimpleQuery.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Queries.Fakes.StubSimpleQuery`1">
            <summary>Castle.ActiveRecord.Queries.SimpleQuery`1 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.StubSimpleQuery`1.#ctor(System.String,System.Object[])">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.StubSimpleQuery`1.#ctor(Castle.ActiveRecord.Queries.QueryLanguage,System.String,System.Object[])">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.StubSimpleQuery`1.#ctor(System.Type,System.String,System.Object[])">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.StubSimpleQuery`1.#ctor(System.Type,Castle.ActiveRecord.Queries.QueryLanguage,System.String,System.Object[])">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.StubSimpleQuery`1.Clone">
            <summary>设置 ActiveRecordBaseQuery.Clone() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Queries.Fakes.StubSimpleQuery`1.Clone01">
            <summary>设置 ActiveRecordBaseQuery.Clone() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.StubSimpleQuery`1.CreateQuery(NHibernate.ISession)">
            <summary>设置 HqlBasedQuery.CreateQuery(ISession session) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Queries.Fakes.StubSimpleQuery`1.CreateQueryISession">
            <summary>设置 HqlBasedQuery.CreateQuery(ISession session) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.StubSimpleQuery`1.InitializeStub">
            <summary>初始化 type StubSimpleQuery 的新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.StubSimpleQuery`1.InternalEnumerate(NHibernate.ISession)">
            <summary>设置 SimpleQuery`1.InternalEnumerate(ISession session) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Queries.Fakes.StubSimpleQuery`1.InternalEnumerateISession">
            <summary>设置 SimpleQuery`1.InternalEnumerate(ISession session) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.StubSimpleQuery`1.InternalExecute(NHibernate.ISession)">
            <summary>设置 SimpleQuery`1.InternalExecute(ISession session) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Queries.Fakes.StubSimpleQuery`1.InternalExecuteISession">
            <summary>设置 SimpleQuery`1.InternalExecute(ISession session) 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.StubSimpleQuery`1.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.StubSimpleQuery`1.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.StubSimpleQuery`1.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Queries.Fakes.StubValueAndTypeTuple">
            <summary>Castle.ActiveRecord.Queries.ValueAndTypeTuple 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.StubValueAndTypeTuple.#ctor(System.Object)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.StubValueAndTypeTuple.#ctor(NHibernate.Type.IType,System.Object)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Fakes.StubValueAndTypeTuple.InitializeStub">
            <summary>初始化 type StubValueAndTypeTuple 的新实例</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.StubValueAndTypeTuple.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.StubValueAndTypeTuple.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Fakes.StubValueAndTypeTuple.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Queries.Modifiers.Fakes.ShimQueryParameter">
            <summary>Castle.ActiveRecord.Queries.Modifiers.QueryParameter 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Modifiers.Fakes.ShimQueryParameter.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Modifiers.Fakes.ShimQueryParameter.#ctor(Castle.ActiveRecord.Queries.Modifiers.QueryParameter)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Modifiers.Fakes.ShimQueryParameter.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Modifiers.Fakes.ShimQueryParameter.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Modifiers.Fakes.ShimQueryParameter.Bind(Castle.ActiveRecord.Queries.Modifiers.IQueryModifier)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Modifiers.Fakes.ShimQueryParameter.ApplyIQuery">
            <summary>设置 QueryParameter.Apply(IQuery query) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Modifiers.Fakes.ShimQueryParameter.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Modifiers.Fakes.ShimQueryParameter.ConstructorInt32ICollection">
            <summary>设置 QueryParameter.QueryParameter(Int32 position, ICollection value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Modifiers.Fakes.ShimQueryParameter.ConstructorInt32ICollectionIType">
            <summary>设置 QueryParameter.QueryParameter(Int32 position, ICollection value, IType type) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Modifiers.Fakes.ShimQueryParameter.ConstructorInt32Object">
            <summary>设置 QueryParameter.QueryParameter(Int32 position, Object value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Modifiers.Fakes.ShimQueryParameter.ConstructorInt32ObjectIType">
            <summary>设置 QueryParameter.QueryParameter(Int32 position, Object value, IType type) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Modifiers.Fakes.ShimQueryParameter.ConstructorStringICollection">
            <summary>设置 QueryParameter.QueryParameter(String name, ICollection value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Modifiers.Fakes.ShimQueryParameter.ConstructorStringICollectionIType">
            <summary>设置 QueryParameter.QueryParameter(String name, ICollection value, IType type) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Modifiers.Fakes.ShimQueryParameter.ConstructorStringObject">
            <summary>设置 QueryParameter.QueryParameter(String name, Object value) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Modifiers.Fakes.ShimQueryParameter.ConstructorStringObjectIType">
            <summary>设置 QueryParameter.QueryParameter(String name, Object value, IType type) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Modifiers.Fakes.ShimQueryParameter.NameGet">
            <summary>设置 QueryParameter.get_Name() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Modifiers.Fakes.ShimQueryParameter.PositionGet">
            <summary>设置 QueryParameter.get_Position() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Modifiers.Fakes.ShimQueryParameter.TypeGet">
            <summary>设置 QueryParameter.get_Type() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Modifiers.Fakes.ShimQueryParameter.ValueGet">
            <summary>设置 QueryParameter.get_Value() 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Queries.Modifiers.Fakes.ShimQueryParameter.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Modifiers.Fakes.ShimQueryParameter.AllInstances.ApplyIQuery">
            <summary>设置 QueryParameter.Apply(IQuery query) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Modifiers.Fakes.ShimQueryParameter.AllInstances.NameGet">
            <summary>设置 QueryParameter.get_Name() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Modifiers.Fakes.ShimQueryParameter.AllInstances.PositionGet">
            <summary>设置 QueryParameter.get_Position() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Modifiers.Fakes.ShimQueryParameter.AllInstances.TypeGet">
            <summary>设置 QueryParameter.get_Type() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Modifiers.Fakes.ShimQueryParameter.AllInstances.ValueGet">
            <summary>设置 QueryParameter.get_Value() 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Queries.Modifiers.Fakes.ShimQueryRange">
            <summary>Castle.ActiveRecord.Queries.Modifiers.QueryRange 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Modifiers.Fakes.ShimQueryRange.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Modifiers.Fakes.ShimQueryRange.#ctor(Castle.ActiveRecord.Queries.Modifiers.QueryRange)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Modifiers.Fakes.ShimQueryRange.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Modifiers.Fakes.ShimQueryRange.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Modifiers.Fakes.ShimQueryRange.Bind(Castle.ActiveRecord.Queries.Modifiers.IQueryModifier)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Modifiers.Fakes.ShimQueryRange.ApplyIQuery">
            <summary>设置 QueryRange.Apply(IQuery query) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Modifiers.Fakes.ShimQueryRange.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Modifiers.Fakes.ShimQueryRange.ConstructorInt32">
            <summary>设置 QueryRange.QueryRange(Int32 maxResults) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Modifiers.Fakes.ShimQueryRange.ConstructorInt32Int32">
            <summary>设置 QueryRange.QueryRange(Int32 firstResult, Int32 maxResults) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Modifiers.Fakes.ShimQueryRange.FirstResultGet">
            <summary>设置 QueryRange.get_FirstResult() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Modifiers.Fakes.ShimQueryRange.MaxResultsGet">
            <summary>设置 QueryRange.get_MaxResults() 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Queries.Modifiers.Fakes.ShimQueryRange.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Modifiers.Fakes.ShimQueryRange.AllInstances.ApplyIQuery">
            <summary>设置 QueryRange.Apply(IQuery query) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Modifiers.Fakes.ShimQueryRange.AllInstances.FirstResultGet">
            <summary>设置 QueryRange.get_FirstResult() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Modifiers.Fakes.ShimQueryRange.AllInstances.MaxResultsGet">
            <summary>设置 QueryRange.get_MaxResults() 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Queries.Modifiers.Fakes.ShimQueryResultTransformer">
            <summary>Castle.ActiveRecord.Queries.Modifiers.QueryResultTransformer 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Modifiers.Fakes.ShimQueryResultTransformer.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Modifiers.Fakes.ShimQueryResultTransformer.#ctor(Castle.ActiveRecord.Queries.Modifiers.QueryResultTransformer)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Modifiers.Fakes.ShimQueryResultTransformer.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Modifiers.Fakes.ShimQueryResultTransformer.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Modifiers.Fakes.ShimQueryResultTransformer.Bind(Castle.ActiveRecord.Queries.Modifiers.IQueryModifier)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Modifiers.Fakes.ShimQueryResultTransformer.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Modifiers.Fakes.ShimQueryResultTransformer.CastleActiveRecordQueriesModifiersIQueryModifierApplyIQuery">
            <summary>设置 QueryResultTransformer.Castle.ActiveRecord.Queries.Modifiers.IQueryModifier.Apply(IQuery query) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Modifiers.Fakes.ShimQueryResultTransformer.ConstructorIResultTransformer">
            <summary>设置 QueryResultTransformer.QueryResultTransformer(IResultTransformer transformer) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Modifiers.Fakes.ShimQueryResultTransformer.ResultTransformerGet">
            <summary>设置 QueryResultTransformer.get_ResultTransformer() 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Queries.Modifiers.Fakes.ShimQueryResultTransformer.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Modifiers.Fakes.ShimQueryResultTransformer.AllInstances.CastleActiveRecordQueriesModifiersIQueryModifierApplyIQuery">
            <summary>设置 QueryResultTransformer.Castle.ActiveRecord.Queries.Modifiers.IQueryModifier.Apply(IQuery query) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Modifiers.Fakes.ShimQueryResultTransformer.AllInstances.ResultTransformerGet">
            <summary>设置 QueryResultTransformer.get_ResultTransformer() 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Queries.Modifiers.Fakes.ShimSqlQueryJoinDefinition">
            <summary>Castle.ActiveRecord.Queries.Modifiers.SqlQueryJoinDefinition 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Modifiers.Fakes.ShimSqlQueryJoinDefinition.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Modifiers.Fakes.ShimSqlQueryJoinDefinition.#ctor(Castle.ActiveRecord.Queries.Modifiers.SqlQueryJoinDefinition)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Modifiers.Fakes.ShimSqlQueryJoinDefinition.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Modifiers.Fakes.ShimSqlQueryJoinDefinition.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Modifiers.Fakes.ShimSqlQueryJoinDefinition.Bind(Castle.ActiveRecord.Queries.Modifiers.IQueryModifier)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Modifiers.Fakes.ShimSqlQueryJoinDefinition.AssociationAliasGet">
            <summary>设置 SqlQueryJoinDefinition.get_AssociationAlias() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Modifiers.Fakes.ShimSqlQueryJoinDefinition.AssociationPathGet">
            <summary>设置 SqlQueryJoinDefinition.get_AssociationPath() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Modifiers.Fakes.ShimSqlQueryJoinDefinition.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Modifiers.Fakes.ShimSqlQueryJoinDefinition.CastleActiveRecordQueriesModifiersIQueryModifierApplyIQuery">
            <summary>设置 SqlQueryJoinDefinition.Castle.ActiveRecord.Queries.Modifiers.IQueryModifier.Apply(IQuery query) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Modifiers.Fakes.ShimSqlQueryJoinDefinition.ConstructorStringString">
            <summary>设置 SqlQueryJoinDefinition.SqlQueryJoinDefinition(String associationPath, String associationAlias) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Queries.Modifiers.Fakes.ShimSqlQueryJoinDefinition.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Modifiers.Fakes.ShimSqlQueryJoinDefinition.AllInstances.AssociationAliasGet">
            <summary>设置 SqlQueryJoinDefinition.get_AssociationAlias() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Modifiers.Fakes.ShimSqlQueryJoinDefinition.AllInstances.AssociationPathGet">
            <summary>设置 SqlQueryJoinDefinition.get_AssociationPath() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Modifiers.Fakes.ShimSqlQueryJoinDefinition.AllInstances.CastleActiveRecordQueriesModifiersIQueryModifierApplyIQuery">
            <summary>设置 SqlQueryJoinDefinition.Castle.ActiveRecord.Queries.Modifiers.IQueryModifier.Apply(IQuery query) 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Queries.Modifiers.Fakes.ShimSqlQueryReturnDefinition">
            <summary>Castle.ActiveRecord.Queries.Modifiers.SqlQueryReturnDefinition 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Modifiers.Fakes.ShimSqlQueryReturnDefinition.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Modifiers.Fakes.ShimSqlQueryReturnDefinition.#ctor(Castle.ActiveRecord.Queries.Modifiers.SqlQueryReturnDefinition)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Modifiers.Fakes.ShimSqlQueryReturnDefinition.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Modifiers.Fakes.ShimSqlQueryReturnDefinition.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Modifiers.Fakes.ShimSqlQueryReturnDefinition.Bind(Castle.ActiveRecord.Queries.Modifiers.IQueryModifier)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Modifiers.Fakes.ShimSqlQueryReturnDefinition.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Modifiers.Fakes.ShimSqlQueryReturnDefinition.CastleActiveRecordQueriesModifiersIQueryModifierApplyIQuery">
            <summary>设置 SqlQueryReturnDefinition.Castle.ActiveRecord.Queries.Modifiers.IQueryModifier.Apply(IQuery query) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Modifiers.Fakes.ShimSqlQueryReturnDefinition.ConstructorTypeString">
            <summary>设置 SqlQueryReturnDefinition.SqlQueryReturnDefinition(Type returnType, String returnAlias) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Modifiers.Fakes.ShimSqlQueryReturnDefinition.ReturnAliasGet">
            <summary>设置 SqlQueryReturnDefinition.get_ReturnAlias() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Modifiers.Fakes.ShimSqlQueryReturnDefinition.ReturnTypeGet">
            <summary>设置 SqlQueryReturnDefinition.get_ReturnType() 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Queries.Modifiers.Fakes.ShimSqlQueryReturnDefinition.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Modifiers.Fakes.ShimSqlQueryReturnDefinition.AllInstances.CastleActiveRecordQueriesModifiersIQueryModifierApplyIQuery">
            <summary>设置 SqlQueryReturnDefinition.Castle.ActiveRecord.Queries.Modifiers.IQueryModifier.Apply(IQuery query) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Modifiers.Fakes.ShimSqlQueryReturnDefinition.AllInstances.ReturnAliasGet">
            <summary>设置 SqlQueryReturnDefinition.get_ReturnAlias() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Modifiers.Fakes.ShimSqlQueryReturnDefinition.AllInstances.ReturnTypeGet">
            <summary>设置 SqlQueryReturnDefinition.get_ReturnType() 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Queries.Modifiers.Fakes.ShimSqlQueryScalarDefinition">
            <summary>Castle.ActiveRecord.Queries.Modifiers.SqlQueryScalarDefinition 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Modifiers.Fakes.ShimSqlQueryScalarDefinition.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Modifiers.Fakes.ShimSqlQueryScalarDefinition.#ctor(Castle.ActiveRecord.Queries.Modifiers.SqlQueryScalarDefinition)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Modifiers.Fakes.ShimSqlQueryScalarDefinition.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Modifiers.Fakes.ShimSqlQueryScalarDefinition.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Modifiers.Fakes.ShimSqlQueryScalarDefinition.Bind(Castle.ActiveRecord.Queries.Modifiers.IQueryModifier)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Modifiers.Fakes.ShimSqlQueryScalarDefinition.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Modifiers.Fakes.ShimSqlQueryScalarDefinition.CastleActiveRecordQueriesModifiersIQueryModifierApplyIQuery">
            <summary>设置 SqlQueryScalarDefinition.Castle.ActiveRecord.Queries.Modifiers.IQueryModifier.Apply(IQuery query) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Modifiers.Fakes.ShimSqlQueryScalarDefinition.ColumnAliasGet">
            <summary>设置 SqlQueryScalarDefinition.get_ColumnAlias() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Modifiers.Fakes.ShimSqlQueryScalarDefinition.ConstructorITypeString">
            <summary>设置 SqlQueryScalarDefinition.SqlQueryScalarDefinition(IType scalarType, String columnAlias) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Modifiers.Fakes.ShimSqlQueryScalarDefinition.ScalarTypeGet">
            <summary>设置 SqlQueryScalarDefinition.get_ScalarType() 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Queries.Modifiers.Fakes.ShimSqlQueryScalarDefinition.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Modifiers.Fakes.ShimSqlQueryScalarDefinition.AllInstances.CastleActiveRecordQueriesModifiersIQueryModifierApplyIQuery">
            <summary>设置 SqlQueryScalarDefinition.Castle.ActiveRecord.Queries.Modifiers.IQueryModifier.Apply(IQuery query) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Modifiers.Fakes.ShimSqlQueryScalarDefinition.AllInstances.ColumnAliasGet">
            <summary>设置 SqlQueryScalarDefinition.get_ColumnAlias() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Modifiers.Fakes.ShimSqlQueryScalarDefinition.AllInstances.ScalarTypeGet">
            <summary>设置 SqlQueryScalarDefinition.get_ScalarType() 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Queries.Modifiers.Fakes.StubIQueryModifier">
            <summary>Castle.ActiveRecord.Queries.Modifiers.IQueryModifier 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Modifiers.Fakes.StubIQueryModifier.#ctor">
            <summary>初始化 type StubIQueryModifier 的新实例</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Queries.Modifiers.Fakes.StubIQueryModifier.ApplyIQuery">
            <summary>设置 IQueryModifier.Apply(IQuery query) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Modifiers.Fakes.StubIQueryModifier.car::Castle#ActiveRecord#Queries#Modifiers#IQueryModifier#Apply(NHibernate.IQuery)">
            <summary>设置 IQueryModifier.Apply(IQuery query) 的 存根</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Queries.Modifiers.Fakes.StubQueryParameter">
            <summary>Castle.ActiveRecord.Queries.Modifiers.QueryParameter 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Modifiers.Fakes.StubQueryParameter.#ctor(System.String,System.Collections.ICollection)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Modifiers.Fakes.StubQueryParameter.#ctor(System.Int32,System.Object)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Modifiers.Fakes.StubQueryParameter.#ctor(System.Int32,System.Collections.ICollection)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Modifiers.Fakes.StubQueryParameter.#ctor(System.String,System.Object)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Modifiers.Fakes.StubQueryParameter.#ctor(System.String,System.Collections.ICollection,NHibernate.Type.IType)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Modifiers.Fakes.StubQueryParameter.#ctor(System.Int32,System.Object,NHibernate.Type.IType)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Modifiers.Fakes.StubQueryParameter.#ctor(System.Int32,System.Collections.ICollection,NHibernate.Type.IType)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Modifiers.Fakes.StubQueryParameter.#ctor(System.String,System.Object,NHibernate.Type.IType)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Modifiers.Fakes.StubQueryParameter.InitializeStub">
            <summary>初始化 type StubQueryParameter 的新实例</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Modifiers.Fakes.StubQueryParameter.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Modifiers.Fakes.StubQueryParameter.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Modifiers.Fakes.StubQueryParameter.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Queries.Modifiers.Fakes.StubQueryRange">
            <summary>Castle.ActiveRecord.Queries.Modifiers.QueryRange 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Modifiers.Fakes.StubQueryRange.#ctor(System.Int32)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Modifiers.Fakes.StubQueryRange.#ctor(System.Int32,System.Int32)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Modifiers.Fakes.StubQueryRange.InitializeStub">
            <summary>初始化 type StubQueryRange 的新实例</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Modifiers.Fakes.StubQueryRange.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Modifiers.Fakes.StubQueryRange.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Modifiers.Fakes.StubQueryRange.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Queries.Modifiers.Fakes.StubQueryResultTransformer">
            <summary>Castle.ActiveRecord.Queries.Modifiers.QueryResultTransformer 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Modifiers.Fakes.StubQueryResultTransformer.#ctor(NHibernate.Transform.IResultTransformer)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Modifiers.Fakes.StubQueryResultTransformer.InitializeStub">
            <summary>初始化 type StubQueryResultTransformer 的新实例</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Modifiers.Fakes.StubQueryResultTransformer.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Modifiers.Fakes.StubQueryResultTransformer.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Modifiers.Fakes.StubQueryResultTransformer.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Queries.Modifiers.Fakes.StubSqlQueryJoinDefinition">
            <summary>Castle.ActiveRecord.Queries.Modifiers.SqlQueryJoinDefinition 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Modifiers.Fakes.StubSqlQueryJoinDefinition.#ctor(System.String,System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Modifiers.Fakes.StubSqlQueryJoinDefinition.InitializeStub">
            <summary>初始化 type StubSqlQueryJoinDefinition 的新实例</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Modifiers.Fakes.StubSqlQueryJoinDefinition.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Modifiers.Fakes.StubSqlQueryJoinDefinition.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Modifiers.Fakes.StubSqlQueryJoinDefinition.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Queries.Modifiers.Fakes.StubSqlQueryReturnDefinition">
            <summary>Castle.ActiveRecord.Queries.Modifiers.SqlQueryReturnDefinition 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Modifiers.Fakes.StubSqlQueryReturnDefinition.#ctor(System.Type,System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Modifiers.Fakes.StubSqlQueryReturnDefinition.InitializeStub">
            <summary>初始化 type StubSqlQueryReturnDefinition 的新实例</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Modifiers.Fakes.StubSqlQueryReturnDefinition.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Modifiers.Fakes.StubSqlQueryReturnDefinition.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Modifiers.Fakes.StubSqlQueryReturnDefinition.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Queries.Modifiers.Fakes.StubSqlQueryScalarDefinition">
            <summary>Castle.ActiveRecord.Queries.Modifiers.SqlQueryScalarDefinition 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Modifiers.Fakes.StubSqlQueryScalarDefinition.#ctor(NHibernate.Type.IType,System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Queries.Modifiers.Fakes.StubSqlQueryScalarDefinition.InitializeStub">
            <summary>初始化 type StubSqlQueryScalarDefinition 的新实例</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Modifiers.Fakes.StubSqlQueryScalarDefinition.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Modifiers.Fakes.StubSqlQueryScalarDefinition.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Queries.Modifiers.Fakes.StubSqlQueryScalarDefinition.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Testing.Fakes.ShimInMemoryConnectionProvider">
            <summary>Castle.ActiveRecord.Testing.InMemoryConnectionProvider 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Testing.Fakes.ShimInMemoryConnectionProvider.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Testing.Fakes.ShimInMemoryConnectionProvider.#ctor(Castle.ActiveRecord.Testing.InMemoryConnectionProvider)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Testing.Fakes.ShimInMemoryConnectionProvider.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Testing.Fakes.ShimInMemoryConnectionProvider.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Testing.Fakes.ShimInMemoryConnectionProvider.Bind(NHibernate.Connection.IConnectionProvider)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Testing.Fakes.ShimInMemoryConnectionProvider.Bind(System.IDisposable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Testing.Fakes.ShimInMemoryConnectionProvider.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Testing.Fakes.ShimInMemoryConnectionProvider.CloseConnectionIDbConnection">
            <summary>设置 InMemoryConnectionProvider.CloseConnection(IDbConnection conn) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Testing.Fakes.ShimInMemoryConnectionProvider.Constructor">
            <summary>设置 InMemoryConnectionProvider.InMemoryConnectionProvider() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Testing.Fakes.ShimInMemoryConnectionProvider.GetConnection">
            <summary>设置 InMemoryConnectionProvider.GetConnection() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Testing.Fakes.ShimInMemoryConnectionProvider.Restart">
            <summary>设置 InMemoryConnectionProvider.Restart() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Testing.Fakes.ShimInMemoryConnectionProvider.StaticConstructor">
            <summary>设置 InMemoryConnectionProvider.InMemoryConnectionProvider() 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Testing.Fakes.ShimInMemoryConnectionProvider.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Testing.Fakes.ShimInMemoryConnectionProvider.AllInstances.CloseConnectionIDbConnection">
            <summary>设置 InMemoryConnectionProvider.CloseConnection(IDbConnection conn) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Testing.Fakes.ShimInMemoryConnectionProvider.AllInstances.GetConnection">
            <summary>设置 InMemoryConnectionProvider.GetConnection() 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Testing.Fakes.ShimInMemoryTest">
            <summary>Castle.ActiveRecord.Testing.InMemoryTest 的填充码类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Testing.Fakes.ShimInMemoryTest.#ctor(Castle.ActiveRecord.Testing.InMemoryTest)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Testing.Fakes.ShimInMemoryTest.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Testing.Fakes.ShimInMemoryTest.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Testing.Fakes.ShimInMemoryTest.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Testing.Fakes.ShimInMemoryTest.ConfigureInPlaceConfigurationSource">
            <summary>设置 InMemoryTest.Configure(InPlaceConfigurationSource config) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Testing.Fakes.ShimInMemoryTest.Constructor">
            <summary>设置 InMemoryTest.InMemoryTest() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Testing.Fakes.ShimInMemoryTest.GetAdditionalBaseClasses">
            <summary>设置 InMemoryTest.GetAdditionalBaseClasses() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Testing.Fakes.ShimInMemoryTest.GetAssemblies">
            <summary>设置 InMemoryTest.GetAssemblies() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Testing.Fakes.ShimInMemoryTest.GetProperties">
            <summary>设置 InMemoryTest.GetProperties() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Testing.Fakes.ShimInMemoryTest.GetTypes">
            <summary>设置 InMemoryTest.GetTypes() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Testing.Fakes.ShimInMemoryTest.SetUp">
            <summary>设置 InMemoryTest.SetUp() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Testing.Fakes.ShimInMemoryTest.TearDown">
            <summary>设置 InMemoryTest.TearDown() 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Testing.Fakes.ShimInMemoryTest.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Testing.Fakes.ShimInMemoryTest.AllInstances.ConfigureInPlaceConfigurationSource">
            <summary>设置 InMemoryTest.Configure(InPlaceConfigurationSource config) 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Testing.Fakes.ShimInMemoryTest.AllInstances.GetAdditionalBaseClasses">
            <summary>设置 InMemoryTest.GetAdditionalBaseClasses() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Testing.Fakes.ShimInMemoryTest.AllInstances.GetAssemblies">
            <summary>设置 InMemoryTest.GetAssemblies() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Testing.Fakes.ShimInMemoryTest.AllInstances.GetProperties">
            <summary>设置 InMemoryTest.GetProperties() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Testing.Fakes.ShimInMemoryTest.AllInstances.GetTypes">
            <summary>设置 InMemoryTest.GetTypes() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Testing.Fakes.ShimInMemoryTest.AllInstances.SetUp">
            <summary>设置 InMemoryTest.SetUp() 的 填充码</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Testing.Fakes.ShimInMemoryTest.AllInstances.TearDown">
            <summary>设置 InMemoryTest.TearDown() 的 填充码</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Testing.Fakes.StubInMemoryConnectionProvider">
            <summary>Castle.ActiveRecord.Testing.InMemoryConnectionProvider 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Testing.Fakes.StubInMemoryConnectionProvider.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Testing.Fakes.StubInMemoryConnectionProvider.CloseConnection(System.Data.IDbConnection)">
            <summary>设置 InMemoryConnectionProvider.CloseConnection(IDbConnection conn) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Testing.Fakes.StubInMemoryConnectionProvider.CloseConnectionIDbConnection">
            <summary>设置 InMemoryConnectionProvider.CloseConnection(IDbConnection conn) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Testing.Fakes.StubInMemoryConnectionProvider.Configure(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>设置 ConnectionProvider.Configure(IDictionary`2&lt;String,String&gt; settings) 的 存根</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Testing.Fakes.StubInMemoryConnectionProvider.ConfigureDriver(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>设置 ConnectionProvider.ConfigureDriver(IDictionary`2&lt;String,String&gt; settings) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Testing.Fakes.StubInMemoryConnectionProvider.ConfigureDriverIDictionaryOfStringString">
            <summary>设置 ConnectionProvider.ConfigureDriver(IDictionary`2&lt;String,String&gt; settings) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Testing.Fakes.StubInMemoryConnectionProvider.ConfigureIDictionaryOfStringString">
            <summary>设置 ConnectionProvider.Configure(IDictionary`2&lt;String,String&gt; settings) 的 stub</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Testing.Fakes.StubInMemoryConnectionProvider.ConnectionStringGet">
            <summary>设置 ConnectionProvider.get_ConnectionString() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Testing.Fakes.StubInMemoryConnectionProvider.Dispose(System.Boolean)">
            <summary>设置 ConnectionProvider.Dispose(Boolean isDisposing) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Testing.Fakes.StubInMemoryConnectionProvider.DisposeBoolean">
            <summary>设置 ConnectionProvider.Dispose(Boolean isDisposing) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Testing.Fakes.StubInMemoryConnectionProvider.GetConnection">
            <summary>设置 InMemoryConnectionProvider.GetConnection() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Testing.Fakes.StubInMemoryConnectionProvider.GetConnection01">
            <summary>设置 InMemoryConnectionProvider.GetConnection() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Testing.Fakes.StubInMemoryConnectionProvider.GetNamedConnectionString(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>设置 ConnectionProvider.GetNamedConnectionString(IDictionary`2&lt;String,String&gt; settings) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Testing.Fakes.StubInMemoryConnectionProvider.GetNamedConnectionStringIDictionaryOfStringString">
            <summary>设置 ConnectionProvider.GetNamedConnectionString(IDictionary`2&lt;String,String&gt; settings) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Testing.Fakes.StubInMemoryConnectionProvider.InitializeStub">
            <summary>初始化 type StubInMemoryConnectionProvider 的新实例</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Testing.Fakes.StubInMemoryConnectionProvider.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Testing.Fakes.StubInMemoryConnectionProvider.ConnectionString">
            <summary>设置 ConnectionProvider.get_ConnectionString() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Testing.Fakes.StubInMemoryConnectionProvider.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Testing.Fakes.StubInMemoryConnectionProvider.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Castle.ActiveRecord.Testing.Fakes.StubInMemoryTest">
            <summary>Castle.ActiveRecord.Testing.InMemoryTest 的存根类型</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Testing.Fakes.StubInMemoryTest.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Testing.Fakes.StubInMemoryTest.Configure(Castle.ActiveRecord.Framework.Config.InPlaceConfigurationSource)">
            <summary>设置 InMemoryTest.Configure(InPlaceConfigurationSource config) 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Testing.Fakes.StubInMemoryTest.ConfigureInPlaceConfigurationSource">
            <summary>设置 InMemoryTest.Configure(InPlaceConfigurationSource config) 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Testing.Fakes.StubInMemoryTest.GetAdditionalBaseClasses">
            <summary>设置 InMemoryTest.GetAdditionalBaseClasses() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Testing.Fakes.StubInMemoryTest.GetAdditionalBaseClasses01">
            <summary>设置 InMemoryTest.GetAdditionalBaseClasses() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Testing.Fakes.StubInMemoryTest.GetAssemblies">
            <summary>设置 InMemoryTest.GetAssemblies() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Testing.Fakes.StubInMemoryTest.GetAssemblies01">
            <summary>设置 InMemoryTest.GetAssemblies() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Testing.Fakes.StubInMemoryTest.GetProperties">
            <summary>设置 InMemoryTest.GetProperties() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Testing.Fakes.StubInMemoryTest.GetProperties01">
            <summary>设置 InMemoryTest.GetProperties() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Testing.Fakes.StubInMemoryTest.GetTypes">
            <summary>设置 InMemoryTest.GetTypes() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Testing.Fakes.StubInMemoryTest.GetTypes01">
            <summary>设置 InMemoryTest.GetTypes() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Testing.Fakes.StubInMemoryTest.InitializeStub">
            <summary>初始化 type StubInMemoryTest 的新实例</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Testing.Fakes.StubInMemoryTest.SetUp">
            <summary>设置 InMemoryTest.SetUp() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Testing.Fakes.StubInMemoryTest.SetUp01">
            <summary>设置 InMemoryTest.SetUp() 的 stub</summary>
        </member>
        <member name="M:Castle.ActiveRecord.Testing.Fakes.StubInMemoryTest.TearDown">
            <summary>设置 InMemoryTest.TearDown() 的 存根</summary>
        </member>
        <member name="F:Castle.ActiveRecord.Testing.Fakes.StubInMemoryTest.TearDown01">
            <summary>设置 InMemoryTest.TearDown() 的 stub</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Testing.Fakes.StubInMemoryTest.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Testing.Fakes.StubInMemoryTest.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:Castle.ActiveRecord.Testing.Fakes.StubInMemoryTest.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:Microsoft.QualityTools.Testing.Fakes.Delegates.CastleActiveRecordDelegates">
            <summary>包含用于 Castle.ActiveRecord 的存根和填充码的自定义委托</summary>
        </member>
    </members>
</doc>
