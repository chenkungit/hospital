<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:device="http://www.springframework.org/schema/mobile/device"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/mobile/device http://www.springframework.org/schema/mobile/device/spring-mobile-device-1.0.xsd
    http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd   
    http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd 
    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">
	
	<!-- 自动扫描路径 -->
	<context:component-scan base-package="com.sinotao.business" />
	
	<!-- 定义数据源Bean -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
	    <!-- 数据源驱动类可不写，Druid默认会自动根据URL识别DriverClass -->
		<property name="driverClassName" value="$[jdbc.driverClassName]" />
		<!-- 基本属性 url、user、password -->
		<property name="url" value="$[jdbc.url]" />
		<property name="username" value="$[jdbc.username]" />
		<property name="password" value="$[jdbc.password]" />
		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="$[jdbc.initialSize]" />
		<property name="minIdle" value="$[jdbc.minIdle]" />
		<property name="maxIdle" value="$[jdbc.maxIdle]" />
		<property name="maxActive" value="$[jdbc.maxActive]" />
		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="$[jdbc.maxWait]" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="$[jdbc.timeBetweenEvictionRunsMillis]" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="$[jdbc.minEvictableIdleTimeMillis]" />
		<property name="validationQuery" value="$[jdbc.validationQuery]" />
		<property name="testWhileIdle" value="$[jdbc.testWhileIdle]" />
		<property name="testOnBorrow" value="$[jdbc.testOnBorrow]" />
		<property name="testOnReturn" value="$[jdbc.testOnReturn]" />
    </bean>
	
	<!--  SqlSessionFactory -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="mapperLocations" value="classpath*:conf/sqlMap/*.xml" />
        <property name="configLocation" value="classpath:spring/mybatis-config.xml"></property>
		<property name="plugins">
			<array>
				<bean class="com.github.pagehelper.PageHelper">
					<property name="properties">
						<value>
							<!-- dialect属性，使用时可以指定该属性（不指定的情况下，分页插件会自动判断） -->
							<!-- 可选值为oracle,mysql,mariadb,sqlite,hsqldb,postgresql,db2,sqlserver,informix -->
							dialect=mysql
					        <!-- 该参数默认为false -->
					        <!-- 设置为true时，会将RowBounds第一个参数offset当成pageNum页码使用 -->
					        <!-- 和startPage中的pageNum效果一样-->
					        offsetAsPageNum=true
					        <!-- 该参数默认为false -->
					        <!-- 设置为true时，使用RowBounds分页会进行count查询 -->
					        rowBoundsWithCount=true
					        <!-- 设置为true时，如果pageSize=0或者RowBounds.limit = 0就会查询出全部的结果 -->
					        <!-- （相当于没有执行分页查询，但是返回结果仍然是Page类型）-->
					        pageSizeZero=true
					        <!-- 3.3.0版本可用 - 分页参数合理化，默认false禁用 -->
					        <!-- 启用合理化时，如果pageNum<1会查询第一页，如果pageNum>pages会查询最后一页 -->
					        <!-- 禁用合理化时，如果pageNum<1或pageNum>pages会返回空数据 -->
							reasonable=true
					        <!-- 3.5.0版本可用 - 为了支持startPage(Object params)方法 -->
					        <!-- 增加了一个`params`参数来配置参数映射，用于从Map或ServletRequest中取值 -->
					        <!-- 可以配置pageNum,pageSize,count,pageSizeZero,reasonable,不配置映射的用默认值 -->
					        <!-- 不理解该含义的前提下，不要随便复制该配置 -->
					        params=pageNum=start;pageSize=limit;
        
						</value>
					</property>
				</bean>
			</array>
		</property>
	</bean>
	
    <!-- 扫描Mapper接口 -->
	<bean class="tk.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
		<property name="basePackage" value="com.sinotao.business.dao" />
		<property name="properties">
			<value>
               	<!--通用Mapper接口，多个通用接口用逗号隔开-->
               	mappers=tk.mybatis.mapper.common.Mapper
                <!--UUID生成策略-->
			    <!--配置UUID生成策略需要使用OGNL表达式-->
			    <!--默认值32位长度:@java.util.UUID@randomUUID().toString().replace("-", "")-->
			    <!--<property name="UUID" value="@java.util.UUID@randomUUID().toString()"/>-->
			    <!--主键自增回写方法,默认值MYSQL,详细说明请看文档-->
			    <!-- IDENTITY=HSQLDB -->
			    <!--序列的获取规则,使用{num}格式化参数，默认值为{0}.nextval，针对Oracle-->
				<!--可选参数一共3个，对应0,1,2,分别为SequenceName，ColumnName,PropertyName-->
				seqFormat={0}.nextval
				<!--主键自增回写方法执行顺序,默认AFTER,可选值为(BEFORE|AFTER)-->
				ORDER=AFTER
                notEmpty=true
			</value>
		</property>
	</bean>
	
	<!-- 开启事务注解驱动 -->
	<tx:annotation-driven transaction-manager="transactionManager" />
	<!-- 事务管理器 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<!-- 配置文件初始化 -->
	<bean id="configuration" class="com.sinotao.business.util.Configuration">
		<property name="drivePath" value="$[upload.drivePath]" />
		<property name="richFolder" value="$[upload.richFolder]" />
		<property name="fileFolder" value="$[upload.fileFolder]" />
	</bean>
</beans>